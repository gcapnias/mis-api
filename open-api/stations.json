{
  "basePath": "/api",
  "definitions": {
    "CameraServiceRestDto": {
      "properties": {
        "cameraId": {
          "description": "ID of the Camera",
          "format": "byte",
          "type": "string"
        },
        "isPowerOn": {
          "description": "Specifies whether the Camera power is on",
          "type": "boolean"
        },
        "isServerOffline": {
          "description": "Specifies if the the Camera server is offline. Presented only if camera server is offline",
          "type": "boolean"
        },
        "links": {
          "description": "*method=GET*Provides link relations as URLs using the REST 'hateoas' convention (for REST delivered data).<br>&nbsp;&nbsp;&nbsp;&nbsp;The 'rel/camera' link references the associated camera and can be used to access further information via the REST Cameras Endpoint",
          "items": {
            "$ref": "#/definitions/Link"
          },
          "type": "array"
        },
        "name": {
          "description": "Name of the Camera",
          "type": "string"
        },
        "position": {
          "$ref": "#/definitions/GeoPosRestDto",
          "description": "Position of the Camera. Available with expand=detail"
        },
        "reportedTime": {
          "$ref": "#/definitions/ReportedTimeRestDto",
          "description": "Last reported time of the Camera Server. Available with expand=detail"
        }
      },
      "required": [
        "links",
        "isPowerOn",
        "cameraId",
        "name"
      ]
    },
    "CameraStationRestDto": {
      "properties": {
        "cameraServices": {
          "description": "Further information for each Camera managed",
          "items": {
            "$ref": "#/definitions/CameraServiceRestDto"
          },
          "type": "array"
        },
        "reportedTime": {
          "$ref": "#/definitions/ReportedTimeRestDto",
          "description": "Most recent reported time of the Camera Station"
        }
      },
      "required": [
        "cameraServices"
      ]
    },
    "ControllersRestDto": {
      "description": "Radar Controllers",
      "properties": {
        "primary": {
          "description": "Provides the primary controller of this service as an IP address",
          "type": "string"
        },
        "secondary": {
          "description": "Provides the secondary controller (if any) of this service as an IP address",
          "type": "string"
        }
      }
    },
    "DisplayStationRestDto": {
      "properties": {
        "count": {
          "description": "Running sequence counter of heartbeat messages received for the Display Station. Available with expand=detail",
          "format": "int32",
          "type": "integer"
        },
        "reportedTime": {
          "$ref": "#/definitions/ReportedTimeRestDto",
          "description": "Last reported time of the Display Station. Available with expand=detail"
        },
        "stationName": {
          "description": "Name of the Display Station",
          "type": "string"
        }
      },
      "required": [
        "stationName"
      ]
    },
    "ErrorRestDto": {
      "properties": {
        "code": {
          "description": "HTTP Status Code",
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "description": "summary description of the error",
          "type": "string"
        },
        "url": {
          "description": "URL resulting in this error message",
          "type": "string"
        }
      }
    },
    "GeoPosRestDto": {
      "description": "Geophysical location",
      "properties": {
        "altitude": {
          "description": "Height of the object above sea level (meters)",
          "format": "double",
          "type": "number"
        },
        "latitude": {
          "description": "[-90 to +90]: Latitude of the object (Decimal Degrees, North Positive/South Negative)",
          "format": "double",
          "type": "number"
        },
        "longitude": {
          "description": "[-180 to +180]: Longitude of the object (Decimal Degrees, East Positive/West Negative)",
          "format": "double",
          "type": "number"
        }
      },
      "required": [
        "latitude",
        "longitude"
      ]
    },
    "Link": {
      "properties": {
        "href": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "templated": {
          "type": "boolean"
        }
      }
    },
    "NavOrTrackerServiceRestDto": {
      "properties": {
        "controller": {
          "description": "Provides the controller of this service as an IP address. Available with expand=detail",
          "type": "string"
        },
        "isActive": {
          "description": "Specifies whether the service is active or not",
          "type": "boolean"
        }
      },
      "required": [
        "isActive"
      ]
    },
    "RPStationRestDto": {
      "properties": {
        "count": {
          "description": "Running sequence counter of heartbeat messages received for the RP Station. Available with expand=detail",
          "format": "int32",
          "type": "integer"
        },
        "navService": {
          "$ref": "#/definitions/NavOrTrackerServiceRestDto",
          "description": "Details of the Navigation Service"
        },
        "position": {
          "$ref": "#/definitions/GeoPosRestDto",
          "description": "Location of the Station. Available with expand=detail"
        },
        "radarService": {
          "$ref": "#/definitions/RadarServiceRestDto",
          "description": "Details of the Radar Service"
        },
        "reportedTime": {
          "$ref": "#/definitions/ReportedTimeRestDto",
          "description": "Last reported time from the Station. Available with expand=detail"
        },
        "rpNum": {
          "description": "Radar Processing Number. Used for identification of the Radar",
          "format": "int32",
          "type": "integer"
        },
        "stationName": {
          "description": "Name of the Station",
          "type": "string"
        },
        "trackerService": {
          "$ref": "#/definitions/NavOrTrackerServiceRestDto",
          "description": "Details of the Tracker Service"
        }
      },
      "required": [
        "rpNum",
        "stationName"
      ]
    },
    "RadarServiceRestDto": {
      "properties": {
        "controllers": {
          "$ref": "#/definitions/ControllersRestDto",
          "description": "The controllers of this service. Available with expand=detail"
        },
        "isActive": {
          "description": "Specifies whether the service is active",
          "type": "boolean"
        },
        "links": {
          "description": "*method=GET*Provides link relations as URLs using the REST 'hateoas' convention (for REST delivered data).<br>&nbsp;&nbsp;&nbsp;&nbsp;The 'rel/radar' link references the associated Radar and can be used to access further information via the REST Radar (or RadarImage) Endpoint",
          "items": {
            "$ref": "#/definitions/Link"
          },
          "type": "array"
        },
        "name": {
          "description": "Name of this service",
          "type": "string"
        },
        "radarUsageTime": {
          "$ref": "#/definitions/RadarUsageTimeRestDto",
          "description": "Information on time of Radar Activity. Available with expand=detail"
        }
      },
      "required": [
        "links",
        "isActive",
        "name"
      ]
    },
    "RadarUsageTimeRestDto": {
      "description": "Radar Usage Time",
      "properties": {
        "totalTime": {
          "description": "total number of hours the PCRP has been on. Available with expand=detail",
          "format": "int32",
          "type": "integer"
        },
        "transmitTime": {
          "description": "total number of hours the radar has transmitted. Available with expand=detail",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "totalTime",
        "transmitTime"
      ]
    },
    "ReportedTimeRestDto": {
      "properties": {
        "lastReported": {
          "description": "Date and time of the last received report. <br>&nbsp;&nbsp;&nbsp;&nbsp;Example Value: 2019-03-14T14:55:00Z specifies a year-month-day followed by 24-hour hours:minutes:seconds in GMT time",
          "type": "string"
        },
        "secondsSinceLastReport": {
          "description": "How long ago the last report was received in seconds",
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ResponseBodyExceptionInfo": {
      "description": "description not used ",
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorRestDto",
          "description": "error details"
        }
      }
    },
    "StationRestDto": {
      "properties": {
        "cameraStation": {
          "$ref": "#/definitions/CameraStationRestDto",
          "description": "Information for the Camera Station, if any"
        },
        "displayStation": {
          "$ref": "#/definitions/DisplayStationRestDto",
          "description": "Information for the Display Station, if any"
        },
        "id": {
          "description": "the resource identifier; the station id (an IP address)",
          "type": "string"
        },
        "links": {
          "description": "*method=GET*Provides link relations as URLs using the REST 'hateoas' convention (for REST delivered data).<br>&nbsp;&nbsp;&nbsp;&nbsp;The 'self' link references this rest object, including any specified query criteria",
          "items": {
            "$ref": "#/definitions/Link"
          },
          "type": "array"
        },
        "reportedTime": {
          "$ref": "#/definitions/ReportedTimeRestDto",
          "description": "The most recent reported time among all the sub-stations (display, camera, rp) at this Station"
        },
        "rpStation": {
          "$ref": "#/definitions/RPStationRestDto",
          "description": "Information for the Radar Processing (RP) Station, if any"
        }
      },
      "required": [
        "links",
        "reportedTime"
      ]
    },
    "StationsRestDto": {
      "description": "Container for multiple Stations",
      "properties": {
        "items": {
          "description": "An array of Stations matching the query criteria",
          "items": {
            "$ref": "#/definitions/StationRestDto"
          },
          "type": "array"
        },
        "links": {
          "description": "*method=GET*Provides link relations as URLs using the REST 'hateoas' convention (for REST delivered data).<br>&nbsp;&nbsp;&nbsp;&nbsp;The 'self' link references this rest object, including any specified query criteria",
          "items": {
            "$ref": "#/definitions/Link"
          },
          "type": "array"
        },
        "totalItems": {
          "description": "Total number of elements matching the query filter and not limited by page size",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "totalItems"
      ]
    },
    "Void": {}
  },
  "info": {
    "version": "1.0"
  },
  "paths": {
    "/stations": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": false,
        "description": "Requests Station data for all Stations in the system",
        "operationId": "getStationsDatas",
        "parameters": [
          {
            "description": "Provides extra detail for some of the fields.<br>Value: [detail]",
            "in": "query",
            "name": "expand",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success. See the 'Response Class' section above for the description of the data.",
            "schema": {
              "$ref": "#/definitions/StationsRestDto"
            }
          },
          "401": {
            "description": "Insufficient authorization. Basic Authentication is missing, invalid, or permissions are insufficient for the operation.",
            "schema": {
              "$ref": "#/definitions/ResponseBodyExceptionInfo"
            }
          }
        },
        "summary": "Get Stations"
      }
    },
    "/stations/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": false,
        "description": "Requests Station data for the station identified by the IP Address",
        "operationId": "getStationData",
        "parameters": [
          {
            "description": "the station id (an IP address)",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Provides extra detail for some of the fields.<br>Value: [detail]",
            "in": "query",
            "name": "expand",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success. See the 'Response Class' section above for the description of the data.",
            "schema": {
              "$ref": "#/definitions/StationRestDto"
            }
          },
          "400": {
            "description": "Bad Request. Typically invalid or incomplete parameter(s). See the 'message' property for detail of the error.",
            "schema": {
              "$ref": "#/definitions/ResponseBodyExceptionInfo"
            }
          },
          "401": {
            "description": "Insufficient authorization. Basic Authentication is missing, invalid, or permissions are insufficient for the operation.",
            "schema": {
              "$ref": "#/definitions/ResponseBodyExceptionInfo"
            }
          },
          "404": {
            "description": "No such Station found",
            "schema": {
              "$ref": "#/definitions/ResponseBodyExceptionInfo"
            }
          }
        },
        "summary": "Get Station Data"
      }
    }
  },
  "swagger": "2.0"
}
