/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RadarImageSettingRestDto
    /// </summary>
    [DataContract]
        public partial class RadarImageSettingRestDto :  IEquatable<RadarImageSettingRestDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RadarImageSettingRestDto" /> class.
        /// </summary>
        /// <param name="center">center (required).</param>
        /// <param name="id">the resource identifier; the radar image id (as returned in the POST radarImage request).&lt;br&gt;This field is used in a response; it is not settable by the client.</param>
        /// <param name="imageAging">[&#x27;none&#x27;, &#x27;continuous&#x27; or a numeric range from 1 to 3600]: defines whether to use image aging, and if a number is supplied it specifies the seconds to use for image aging.&lt;br&gt;Defaults to 15.</param>
        /// <param name="imageUrl">URL by which the image can be retrieved.&lt;br&gt;This field is used in a response; it is not settable by the client (required).</param>
        /// <param name="links">*method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;rel/radarImage&#x27; link references the Radar Image data of this resource.</param>
        /// <param name="lowerLeft">lowerLeft (required).</param>
        /// <param name="metersPerPixel">specifies the meters per pixel - - the granularity of the image. This along with the windowDimension width and height determines the geographic coverage of the image.&lt;br&gt;Minimum allowed value is 0.1.&lt;br&gt;Defaults to 3.0 (required).</param>
        /// <param name="radars">radar(s) to use to generate the image.&lt;br&gt;Note that at least one of the given radars must be generating the data needed for the Radar Image else a HTTP error response will be returned (required).</param>
        /// <param name="upperRight">upperRight (required).</param>
        /// <param name="windowDimension">windowDimension.</param>
        public RadarImageSettingRestDto(GeoReferenceRestDto center = default(GeoReferenceRestDto), int? id = default(int?), string imageAging = default(string), string imageUrl = default(string), List<Link> links = default(List<Link>), GeoReferenceRestDto lowerLeft = default(GeoReferenceRestDto), float? metersPerPixel = default(float?), List<RIRadarRestDto> radars = default(List<RIRadarRestDto>), GeoReferenceRestDto upperRight = default(GeoReferenceRestDto), RIWindowRestDto windowDimension = default(RIWindowRestDto))
        {
            // to ensure "center" is required (not null)
            if (center == null)
            {
                throw new InvalidDataException("center is a required property for RadarImageSettingRestDto and cannot be null");
            }
            else
            {
                this.Center = center;
            }
            // to ensure "imageUrl" is required (not null)
            if (imageUrl == null)
            {
                throw new InvalidDataException("imageUrl is a required property for RadarImageSettingRestDto and cannot be null");
            }
            else
            {
                this.ImageUrl = imageUrl;
            }
            // to ensure "lowerLeft" is required (not null)
            if (lowerLeft == null)
            {
                throw new InvalidDataException("lowerLeft is a required property for RadarImageSettingRestDto and cannot be null");
            }
            else
            {
                this.LowerLeft = lowerLeft;
            }
            // to ensure "metersPerPixel" is required (not null)
            if (metersPerPixel == null)
            {
                throw new InvalidDataException("metersPerPixel is a required property for RadarImageSettingRestDto and cannot be null");
            }
            else
            {
                this.MetersPerPixel = metersPerPixel;
            }
            // to ensure "radars" is required (not null)
            if (radars == null)
            {
                throw new InvalidDataException("radars is a required property for RadarImageSettingRestDto and cannot be null");
            }
            else
            {
                this.Radars = radars;
            }
            // to ensure "upperRight" is required (not null)
            if (upperRight == null)
            {
                throw new InvalidDataException("upperRight is a required property for RadarImageSettingRestDto and cannot be null");
            }
            else
            {
                this.UpperRight = upperRight;
            }
            this.Id = id;
            this.ImageAging = imageAging;
            this.Links = links;
            this.WindowDimension = windowDimension;
        }
        
        /// <summary>
        /// Gets or Sets Center
        /// </summary>
        [DataMember(Name="center", EmitDefaultValue=false)]
        public GeoReferenceRestDto Center { get; set; }

        /// <summary>
        /// the resource identifier; the radar image id (as returned in the POST radarImage request).&lt;br&gt;This field is used in a response; it is not settable by the client
        /// </summary>
        /// <value>the resource identifier; the radar image id (as returned in the POST radarImage request).&lt;br&gt;This field is used in a response; it is not settable by the client</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// [&#x27;none&#x27;, &#x27;continuous&#x27; or a numeric range from 1 to 3600]: defines whether to use image aging, and if a number is supplied it specifies the seconds to use for image aging.&lt;br&gt;Defaults to 15
        /// </summary>
        /// <value>[&#x27;none&#x27;, &#x27;continuous&#x27; or a numeric range from 1 to 3600]: defines whether to use image aging, and if a number is supplied it specifies the seconds to use for image aging.&lt;br&gt;Defaults to 15</value>
        [DataMember(Name="imageAging", EmitDefaultValue=false)]
        public string ImageAging { get; set; }

        /// <summary>
        /// URL by which the image can be retrieved.&lt;br&gt;This field is used in a response; it is not settable by the client
        /// </summary>
        /// <value>URL by which the image can be retrieved.&lt;br&gt;This field is used in a response; it is not settable by the client</value>
        [DataMember(Name="imageUrl", EmitDefaultValue=false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// *method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;rel/radarImage&#x27; link references the Radar Image data of this resource
        /// </summary>
        /// <value>*method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;rel/radarImage&#x27; link references the Radar Image data of this resource</value>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Gets or Sets LowerLeft
        /// </summary>
        [DataMember(Name="lowerLeft", EmitDefaultValue=false)]
        public GeoReferenceRestDto LowerLeft { get; set; }

        /// <summary>
        /// specifies the meters per pixel - - the granularity of the image. This along with the windowDimension width and height determines the geographic coverage of the image.&lt;br&gt;Minimum allowed value is 0.1.&lt;br&gt;Defaults to 3.0
        /// </summary>
        /// <value>specifies the meters per pixel - - the granularity of the image. This along with the windowDimension width and height determines the geographic coverage of the image.&lt;br&gt;Minimum allowed value is 0.1.&lt;br&gt;Defaults to 3.0</value>
        [DataMember(Name="metersPerPixel", EmitDefaultValue=false)]
        public float? MetersPerPixel { get; set; }

        /// <summary>
        /// radar(s) to use to generate the image.&lt;br&gt;Note that at least one of the given radars must be generating the data needed for the Radar Image else a HTTP error response will be returned
        /// </summary>
        /// <value>radar(s) to use to generate the image.&lt;br&gt;Note that at least one of the given radars must be generating the data needed for the Radar Image else a HTTP error response will be returned</value>
        [DataMember(Name="radars", EmitDefaultValue=false)]
        public List<RIRadarRestDto> Radars { get; set; }

        /// <summary>
        /// Gets or Sets UpperRight
        /// </summary>
        [DataMember(Name="upperRight", EmitDefaultValue=false)]
        public GeoReferenceRestDto UpperRight { get; set; }

        /// <summary>
        /// Gets or Sets WindowDimension
        /// </summary>
        [DataMember(Name="windowDimension", EmitDefaultValue=false)]
        public RIWindowRestDto WindowDimension { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RadarImageSettingRestDto {\n");
            sb.Append("  Center: ").Append(Center).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImageAging: ").Append(ImageAging).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  LowerLeft: ").Append(LowerLeft).Append("\n");
            sb.Append("  MetersPerPixel: ").Append(MetersPerPixel).Append("\n");
            sb.Append("  Radars: ").Append(Radars).Append("\n");
            sb.Append("  UpperRight: ").Append(UpperRight).Append("\n");
            sb.Append("  WindowDimension: ").Append(WindowDimension).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RadarImageSettingRestDto);
        }

        /// <summary>
        /// Returns true if RadarImageSettingRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of RadarImageSettingRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RadarImageSettingRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Center == input.Center ||
                    (this.Center != null &&
                    this.Center.Equals(input.Center))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ImageAging == input.ImageAging ||
                    (this.ImageAging != null &&
                    this.ImageAging.Equals(input.ImageAging))
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.LowerLeft == input.LowerLeft ||
                    (this.LowerLeft != null &&
                    this.LowerLeft.Equals(input.LowerLeft))
                ) && 
                (
                    this.MetersPerPixel == input.MetersPerPixel ||
                    (this.MetersPerPixel != null &&
                    this.MetersPerPixel.Equals(input.MetersPerPixel))
                ) && 
                (
                    this.Radars == input.Radars ||
                    this.Radars != null &&
                    input.Radars != null &&
                    this.Radars.SequenceEqual(input.Radars)
                ) && 
                (
                    this.UpperRight == input.UpperRight ||
                    (this.UpperRight != null &&
                    this.UpperRight.Equals(input.UpperRight))
                ) && 
                (
                    this.WindowDimension == input.WindowDimension ||
                    (this.WindowDimension != null &&
                    this.WindowDimension.Equals(input.WindowDimension))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Center != null)
                    hashCode = hashCode * 59 + this.Center.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ImageAging != null)
                    hashCode = hashCode * 59 + this.ImageAging.GetHashCode();
                if (this.ImageUrl != null)
                    hashCode = hashCode * 59 + this.ImageUrl.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.LowerLeft != null)
                    hashCode = hashCode * 59 + this.LowerLeft.GetHashCode();
                if (this.MetersPerPixel != null)
                    hashCode = hashCode * 59 + this.MetersPerPixel.GetHashCode();
                if (this.Radars != null)
                    hashCode = hashCode * 59 + this.Radars.GetHashCode();
                if (this.UpperRight != null)
                    hashCode = hashCode * 59 + this.UpperRight.GetHashCode();
                if (this.WindowDimension != null)
                    hashCode = hashCode * 59 + this.WindowDimension.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
