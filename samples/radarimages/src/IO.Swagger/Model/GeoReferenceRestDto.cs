/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Geophysical location
    /// </summary>
    [DataContract]
        public partial class GeoReferenceRestDto :  IEquatable<GeoReferenceRestDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GeoReferenceRestDto" /> class.
        /// </summary>
        /// <param name="latitude">[-89.0 to +89.0]: latitude (Decimal Degrees, North Positive/South Negative) (required).</param>
        /// <param name="longitude">[-180.0 to +180.0]: longitude (Decimal Degrees, East Positive/West Negative) (required).</param>
        public GeoReferenceRestDto(double? latitude = default(double?), double? longitude = default(double?))
        {
            // to ensure "latitude" is required (not null)
            if (latitude == null)
            {
                throw new InvalidDataException("latitude is a required property for GeoReferenceRestDto and cannot be null");
            }
            else
            {
                this.Latitude = latitude;
            }
            // to ensure "longitude" is required (not null)
            if (longitude == null)
            {
                throw new InvalidDataException("longitude is a required property for GeoReferenceRestDto and cannot be null");
            }
            else
            {
                this.Longitude = longitude;
            }
        }
        
        /// <summary>
        /// [-89.0 to +89.0]: latitude (Decimal Degrees, North Positive/South Negative)
        /// </summary>
        /// <value>[-89.0 to +89.0]: latitude (Decimal Degrees, North Positive/South Negative)</value>
        [DataMember(Name="latitude", EmitDefaultValue=false)]
        public double? Latitude { get; set; }

        /// <summary>
        /// [-180.0 to +180.0]: longitude (Decimal Degrees, East Positive/West Negative)
        /// </summary>
        /// <value>[-180.0 to +180.0]: longitude (Decimal Degrees, East Positive/West Negative)</value>
        [DataMember(Name="longitude", EmitDefaultValue=false)]
        public double? Longitude { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GeoReferenceRestDto {\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GeoReferenceRestDto);
        }

        /// <summary>
        /// Returns true if GeoReferenceRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of GeoReferenceRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GeoReferenceRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Latitude != null)
                    hashCode = hashCode * 59 + this.Latitude.GetHashCode();
                if (this.Longitude != null)
                    hashCode = hashCode * 59 + this.Longitude.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
