/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// per Radar information
    /// </summary>
    [DataContract]
        public partial class RIRadarRestDto :  IEquatable<RIRadarRestDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RIRadarRestDto" /> class.
        /// </summary>
        /// <param name="color">[heatmap, red, green, magenta, orange, yellow]: Color to apply to the Radar Image for this Radar.&lt;br&gt;The intensity of the presented color at each pixel is according to the intensity of the Radar signal it represents.&lt;br&gt;Defaults to green.</param>
        /// <param name="rpNum">[1-64]: RP Number of the radar contributing to the image.&lt;br&gt;There is no default value; this value must be supplied (required).</param>
        public RIRadarRestDto(string color = default(string), int? rpNum = default(int?))
        {
            // to ensure "rpNum" is required (not null)
            if (rpNum == null)
            {
                throw new InvalidDataException("rpNum is a required property for RIRadarRestDto and cannot be null");
            }
            else
            {
                this.RpNum = rpNum;
            }
            this.Color = color;
        }
        
        /// <summary>
        /// [heatmap, red, green, magenta, orange, yellow]: Color to apply to the Radar Image for this Radar.&lt;br&gt;The intensity of the presented color at each pixel is according to the intensity of the Radar signal it represents.&lt;br&gt;Defaults to green
        /// </summary>
        /// <value>[heatmap, red, green, magenta, orange, yellow]: Color to apply to the Radar Image for this Radar.&lt;br&gt;The intensity of the presented color at each pixel is according to the intensity of the Radar signal it represents.&lt;br&gt;Defaults to green</value>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public string Color { get; set; }

        /// <summary>
        /// [1-64]: RP Number of the radar contributing to the image.&lt;br&gt;There is no default value; this value must be supplied
        /// </summary>
        /// <value>[1-64]: RP Number of the radar contributing to the image.&lt;br&gt;There is no default value; this value must be supplied</value>
        [DataMember(Name="rpNum", EmitDefaultValue=false)]
        public int? RpNum { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RIRadarRestDto {\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  RpNum: ").Append(RpNum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RIRadarRestDto);
        }

        /// <summary>
        /// Returns true if RIRadarRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of RIRadarRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RIRadarRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.RpNum == input.RpNum ||
                    (this.RpNum != null &&
                    this.RpNum.Equals(input.RpNum))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                if (this.RpNum != null)
                    hashCode = hashCode * 59 + this.RpNum.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
