/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Radar Image
        /// </summary>
        /// <remarks>
        /// Retrieves the current Radar Image as a .png based on the latest settings.&lt;br/&gt;&lt;br&gt;Please Note:&lt;br&gt;&lt;ul&gt;&lt;li&gt;- A new image is available every 0.5 seconds.&lt;li&gt;- An empty image results when the &#x27;window&#x27; area given in the POST does not find sufficient Radar return. Try expanding or moving the &#x27;window&#x27; accordingly.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar image id (as returned in the POST radarImage request)</param>
        /// <returns>List&lt;int?&gt;</returns>
        List<int?> GetRadarImage (int? id);

        /// <summary>
        /// Get Radar Image
        /// </summary>
        /// <remarks>
        /// Retrieves the current Radar Image as a .png based on the latest settings.&lt;br/&gt;&lt;br&gt;Please Note:&lt;br&gt;&lt;ul&gt;&lt;li&gt;- A new image is available every 0.5 seconds.&lt;li&gt;- An empty image results when the &#x27;window&#x27; area given in the POST does not find sufficient Radar return. Try expanding or moving the &#x27;window&#x27; accordingly.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar image id (as returned in the POST radarImage request)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        ApiResponse<List<int?>> GetRadarImageWithHttpInfo (int? id);
        /// <summary>
        /// Get Radar Image settings
        /// </summary>
        /// <remarks>
        /// Retrieve the settings used for processing a Radar Image.&lt;br&gt;Note that only the operator who created the Radar Image (via POST) can perform this GET.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar image id (as returned in the POST radarImage request)</param>
        /// <returns>RadarImageSettingRestDto</returns>
        RadarImageSettingRestDto GetRadarImageSetting (int? id);

        /// <summary>
        /// Get Radar Image settings
        /// </summary>
        /// <remarks>
        /// Retrieve the settings used for processing a Radar Image.&lt;br&gt;Note that only the operator who created the Radar Image (via POST) can perform this GET.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar image id (as returned in the POST radarImage request)</param>
        /// <returns>ApiResponse of RadarImageSettingRestDto</returns>
        ApiResponse<RadarImageSettingRestDto> GetRadarImageSettingWithHttpInfo (int? id);
        /// <summary>
        /// Create Radar Image resource
        /// </summary>
        /// <remarks>
        /// Create a Radar Image resource with custom settings.&lt;br&gt;This API call is the first of two steps needed for retrieving Radar Images. (The second step being the &#x27;GET /radarImages&#x27; API.)&lt;br&gt;This sets up the resource for later GETs of a Radar Image, and whose settings can be retrieved or changed via the GET or PATCH of the Radar Image settings.&lt;br&gt;&lt;br&gt;Please Note:&lt;br&gt;&lt;ul&gt;&lt;li&gt;- The resource is automatically removed from the system once no rest requests (GET or PATCH) for this resource have been made for a minute.&lt;/li&gt;&lt;li&gt;- A limited number of Radar Image resources can exist in the system simultaneously; exceeding that amount will result in failure and require a later retry.&lt;/li&gt;&lt;li&gt;- Only a few fields need to be provided; the rest will be set to a reasonable default. See the \&quot;Parameters\&quot; section, \&quot;Description\&quot; column for further details.&lt;/li&gt;&lt;li&gt;- The rpNum(s) field, which represents the Radar(s), require at least one to be active for an image to result at &#x27;GET /radarImages&#x27; request time. If none are active, this will result with a 4xx status at &#x27;GET /radarImages&#x27; request time. (Hint: see the &#x27;GET /radars&#x27; API for currently active radars.)&lt;/li&gt;&lt;li&gt;- The request class and the response class are the same. However not all fields are used in the request. See the \&quot;Parameters\&quot; section, \&quot;Data Type\&quot; column, \&quot;Model\&quot; for those fields available.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">There are reasonable default settings for all fields except the rpNum(s) and center.&lt;br&gt;Hint: Valid rpNum values can be discovered via the &#x27;GET /radars&#x27; API.&lt;br&gt;A copy and paste-able example of settings are:&lt;br&gt;{ &quot;radars&quot;: [ { &quot;rpNum&quot;: 22 } ],&lt;br&gt;&quot;center&quot;: {&lt;br&gt;   &quot;latitude&quot;: 33.74,&lt;br&gt;   &quot;longitude&quot;: -118.16&lt;br&gt;  }&lt;br&gt;} (optional)</param>
        /// <returns>RadarImageSettingRestDto</returns>
        RadarImageSettingRestDto PostRadarImageSetting (RadarImageSettingRestDto body = null);

        /// <summary>
        /// Create Radar Image resource
        /// </summary>
        /// <remarks>
        /// Create a Radar Image resource with custom settings.&lt;br&gt;This API call is the first of two steps needed for retrieving Radar Images. (The second step being the &#x27;GET /radarImages&#x27; API.)&lt;br&gt;This sets up the resource for later GETs of a Radar Image, and whose settings can be retrieved or changed via the GET or PATCH of the Radar Image settings.&lt;br&gt;&lt;br&gt;Please Note:&lt;br&gt;&lt;ul&gt;&lt;li&gt;- The resource is automatically removed from the system once no rest requests (GET or PATCH) for this resource have been made for a minute.&lt;/li&gt;&lt;li&gt;- A limited number of Radar Image resources can exist in the system simultaneously; exceeding that amount will result in failure and require a later retry.&lt;/li&gt;&lt;li&gt;- Only a few fields need to be provided; the rest will be set to a reasonable default. See the \&quot;Parameters\&quot; section, \&quot;Description\&quot; column for further details.&lt;/li&gt;&lt;li&gt;- The rpNum(s) field, which represents the Radar(s), require at least one to be active for an image to result at &#x27;GET /radarImages&#x27; request time. If none are active, this will result with a 4xx status at &#x27;GET /radarImages&#x27; request time. (Hint: see the &#x27;GET /radars&#x27; API for currently active radars.)&lt;/li&gt;&lt;li&gt;- The request class and the response class are the same. However not all fields are used in the request. See the \&quot;Parameters\&quot; section, \&quot;Data Type\&quot; column, \&quot;Model\&quot; for those fields available.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">There are reasonable default settings for all fields except the rpNum(s) and center.&lt;br&gt;Hint: Valid rpNum values can be discovered via the &#x27;GET /radars&#x27; API.&lt;br&gt;A copy and paste-able example of settings are:&lt;br&gt;{ &quot;radars&quot;: [ { &quot;rpNum&quot;: 22 } ],&lt;br&gt;&quot;center&quot;: {&lt;br&gt;   &quot;latitude&quot;: 33.74,&lt;br&gt;   &quot;longitude&quot;: -118.16&lt;br&gt;  }&lt;br&gt;} (optional)</param>
        /// <returns>ApiResponse of RadarImageSettingRestDto</returns>
        ApiResponse<RadarImageSettingRestDto> PostRadarImageSettingWithHttpInfo (RadarImageSettingRestDto body = null);
        /// <summary>
        /// Update Radar Image settings
        /// </summary>
        /// <remarks>
        /// Update the settings used for processing a Radar Image. &lt;br&gt;Note that fields not provided will remain unchanged, and that only the operator who created the Radar Image (via POST) can perform this PATCH.&lt;br&gt;See the POST operation, \&quot;Implementation Notes\&quot; section, for further usage notes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar image id (as returned in the POST radarImage request)</param>
        /// <param name="body">Specify the Radar Image settings to be changed (optional)</param>
        /// <returns>RadarImageSettingRestDto</returns>
        RadarImageSettingRestDto UpdateRadarImageSetting (int? id, RadarImageSettingRestDto body = null);

        /// <summary>
        /// Update Radar Image settings
        /// </summary>
        /// <remarks>
        /// Update the settings used for processing a Radar Image. &lt;br&gt;Note that fields not provided will remain unchanged, and that only the operator who created the Radar Image (via POST) can perform this PATCH.&lt;br&gt;See the POST operation, \&quot;Implementation Notes\&quot; section, for further usage notes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar image id (as returned in the POST radarImage request)</param>
        /// <param name="body">Specify the Radar Image settings to be changed (optional)</param>
        /// <returns>ApiResponse of RadarImageSettingRestDto</returns>
        ApiResponse<RadarImageSettingRestDto> UpdateRadarImageSettingWithHttpInfo (int? id, RadarImageSettingRestDto body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Radar Image
        /// </summary>
        /// <remarks>
        /// Retrieves the current Radar Image as a .png based on the latest settings.&lt;br/&gt;&lt;br&gt;Please Note:&lt;br&gt;&lt;ul&gt;&lt;li&gt;- A new image is available every 0.5 seconds.&lt;li&gt;- An empty image results when the &#x27;window&#x27; area given in the POST does not find sufficient Radar return. Try expanding or moving the &#x27;window&#x27; accordingly.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar image id (as returned in the POST radarImage request)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        System.Threading.Tasks.Task<List<int?>> GetRadarImageAsync (int? id);

        /// <summary>
        /// Get Radar Image
        /// </summary>
        /// <remarks>
        /// Retrieves the current Radar Image as a .png based on the latest settings.&lt;br/&gt;&lt;br&gt;Please Note:&lt;br&gt;&lt;ul&gt;&lt;li&gt;- A new image is available every 0.5 seconds.&lt;li&gt;- An empty image results when the &#x27;window&#x27; area given in the POST does not find sufficient Radar return. Try expanding or moving the &#x27;window&#x27; accordingly.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar image id (as returned in the POST radarImage request)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetRadarImageAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get Radar Image settings
        /// </summary>
        /// <remarks>
        /// Retrieve the settings used for processing a Radar Image.&lt;br&gt;Note that only the operator who created the Radar Image (via POST) can perform this GET.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar image id (as returned in the POST radarImage request)</param>
        /// <returns>Task of RadarImageSettingRestDto</returns>
        System.Threading.Tasks.Task<RadarImageSettingRestDto> GetRadarImageSettingAsync (int? id);

        /// <summary>
        /// Get Radar Image settings
        /// </summary>
        /// <remarks>
        /// Retrieve the settings used for processing a Radar Image.&lt;br&gt;Note that only the operator who created the Radar Image (via POST) can perform this GET.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar image id (as returned in the POST radarImage request)</param>
        /// <returns>Task of ApiResponse (RadarImageSettingRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RadarImageSettingRestDto>> GetRadarImageSettingAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Create Radar Image resource
        /// </summary>
        /// <remarks>
        /// Create a Radar Image resource with custom settings.&lt;br&gt;This API call is the first of two steps needed for retrieving Radar Images. (The second step being the &#x27;GET /radarImages&#x27; API.)&lt;br&gt;This sets up the resource for later GETs of a Radar Image, and whose settings can be retrieved or changed via the GET or PATCH of the Radar Image settings.&lt;br&gt;&lt;br&gt;Please Note:&lt;br&gt;&lt;ul&gt;&lt;li&gt;- The resource is automatically removed from the system once no rest requests (GET or PATCH) for this resource have been made for a minute.&lt;/li&gt;&lt;li&gt;- A limited number of Radar Image resources can exist in the system simultaneously; exceeding that amount will result in failure and require a later retry.&lt;/li&gt;&lt;li&gt;- Only a few fields need to be provided; the rest will be set to a reasonable default. See the \&quot;Parameters\&quot; section, \&quot;Description\&quot; column for further details.&lt;/li&gt;&lt;li&gt;- The rpNum(s) field, which represents the Radar(s), require at least one to be active for an image to result at &#x27;GET /radarImages&#x27; request time. If none are active, this will result with a 4xx status at &#x27;GET /radarImages&#x27; request time. (Hint: see the &#x27;GET /radars&#x27; API for currently active radars.)&lt;/li&gt;&lt;li&gt;- The request class and the response class are the same. However not all fields are used in the request. See the \&quot;Parameters\&quot; section, \&quot;Data Type\&quot; column, \&quot;Model\&quot; for those fields available.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">There are reasonable default settings for all fields except the rpNum(s) and center.&lt;br&gt;Hint: Valid rpNum values can be discovered via the &#x27;GET /radars&#x27; API.&lt;br&gt;A copy and paste-able example of settings are:&lt;br&gt;{ &quot;radars&quot;: [ { &quot;rpNum&quot;: 22 } ],&lt;br&gt;&quot;center&quot;: {&lt;br&gt;   &quot;latitude&quot;: 33.74,&lt;br&gt;   &quot;longitude&quot;: -118.16&lt;br&gt;  }&lt;br&gt;} (optional)</param>
        /// <returns>Task of RadarImageSettingRestDto</returns>
        System.Threading.Tasks.Task<RadarImageSettingRestDto> PostRadarImageSettingAsync (RadarImageSettingRestDto body = null);

        /// <summary>
        /// Create Radar Image resource
        /// </summary>
        /// <remarks>
        /// Create a Radar Image resource with custom settings.&lt;br&gt;This API call is the first of two steps needed for retrieving Radar Images. (The second step being the &#x27;GET /radarImages&#x27; API.)&lt;br&gt;This sets up the resource for later GETs of a Radar Image, and whose settings can be retrieved or changed via the GET or PATCH of the Radar Image settings.&lt;br&gt;&lt;br&gt;Please Note:&lt;br&gt;&lt;ul&gt;&lt;li&gt;- The resource is automatically removed from the system once no rest requests (GET or PATCH) for this resource have been made for a minute.&lt;/li&gt;&lt;li&gt;- A limited number of Radar Image resources can exist in the system simultaneously; exceeding that amount will result in failure and require a later retry.&lt;/li&gt;&lt;li&gt;- Only a few fields need to be provided; the rest will be set to a reasonable default. See the \&quot;Parameters\&quot; section, \&quot;Description\&quot; column for further details.&lt;/li&gt;&lt;li&gt;- The rpNum(s) field, which represents the Radar(s), require at least one to be active for an image to result at &#x27;GET /radarImages&#x27; request time. If none are active, this will result with a 4xx status at &#x27;GET /radarImages&#x27; request time. (Hint: see the &#x27;GET /radars&#x27; API for currently active radars.)&lt;/li&gt;&lt;li&gt;- The request class and the response class are the same. However not all fields are used in the request. See the \&quot;Parameters\&quot; section, \&quot;Data Type\&quot; column, \&quot;Model\&quot; for those fields available.&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">There are reasonable default settings for all fields except the rpNum(s) and center.&lt;br&gt;Hint: Valid rpNum values can be discovered via the &#x27;GET /radars&#x27; API.&lt;br&gt;A copy and paste-able example of settings are:&lt;br&gt;{ &quot;radars&quot;: [ { &quot;rpNum&quot;: 22 } ],&lt;br&gt;&quot;center&quot;: {&lt;br&gt;   &quot;latitude&quot;: 33.74,&lt;br&gt;   &quot;longitude&quot;: -118.16&lt;br&gt;  }&lt;br&gt;} (optional)</param>
        /// <returns>Task of ApiResponse (RadarImageSettingRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RadarImageSettingRestDto>> PostRadarImageSettingAsyncWithHttpInfo (RadarImageSettingRestDto body = null);
        /// <summary>
        /// Update Radar Image settings
        /// </summary>
        /// <remarks>
        /// Update the settings used for processing a Radar Image. &lt;br&gt;Note that fields not provided will remain unchanged, and that only the operator who created the Radar Image (via POST) can perform this PATCH.&lt;br&gt;See the POST operation, \&quot;Implementation Notes\&quot; section, for further usage notes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar image id (as returned in the POST radarImage request)</param>
        /// <param name="body">Specify the Radar Image settings to be changed (optional)</param>
        /// <returns>Task of RadarImageSettingRestDto</returns>
        System.Threading.Tasks.Task<RadarImageSettingRestDto> UpdateRadarImageSettingAsync (int? id, RadarImageSettingRestDto body = null);

        /// <summary>
        /// Update Radar Image settings
        /// </summary>
        /// <remarks>
        /// Update the settings used for processing a Radar Image. &lt;br&gt;Note that fields not provided will remain unchanged, and that only the operator who created the Radar Image (via POST) can perform this PATCH.&lt;br&gt;See the POST operation, \&quot;Implementation Notes\&quot; section, for further usage notes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar image id (as returned in the POST radarImage request)</param>
        /// <param name="body">Specify the Radar Image settings to be changed (optional)</param>
        /// <returns>Task of ApiResponse (RadarImageSettingRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RadarImageSettingRestDto>> UpdateRadarImageSettingAsyncWithHttpInfo (int? id, RadarImageSettingRestDto body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Radar Image Retrieves the current Radar Image as a .png based on the latest settings.&lt;br/&gt;&lt;br&gt;Please Note:&lt;br&gt;&lt;ul&gt;&lt;li&gt;- A new image is available every 0.5 seconds.&lt;li&gt;- An empty image results when the &#x27;window&#x27; area given in the POST does not find sufficient Radar return. Try expanding or moving the &#x27;window&#x27; accordingly.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar image id (as returned in the POST radarImage request)</param>
        /// <returns>List&lt;int?&gt;</returns>
        public List<int?> GetRadarImage (int? id)
        {
             ApiResponse<List<int?>> localVarResponse = GetRadarImageWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Radar Image Retrieves the current Radar Image as a .png based on the latest settings.&lt;br/&gt;&lt;br&gt;Please Note:&lt;br&gt;&lt;ul&gt;&lt;li&gt;- A new image is available every 0.5 seconds.&lt;li&gt;- An empty image results when the &#x27;window&#x27; area given in the POST does not find sufficient Radar return. Try expanding or moving the &#x27;window&#x27; accordingly.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar image id (as returned in the POST radarImage request)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        public ApiResponse< List<int?> > GetRadarImageWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetRadarImage");

            var localVarPath = "/radarImages/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRadarImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// Get Radar Image Retrieves the current Radar Image as a .png based on the latest settings.&lt;br/&gt;&lt;br&gt;Please Note:&lt;br&gt;&lt;ul&gt;&lt;li&gt;- A new image is available every 0.5 seconds.&lt;li&gt;- An empty image results when the &#x27;window&#x27; area given in the POST does not find sufficient Radar return. Try expanding or moving the &#x27;window&#x27; accordingly.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar image id (as returned in the POST radarImage request)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        public async System.Threading.Tasks.Task<List<int?>> GetRadarImageAsync (int? id)
        {
             ApiResponse<List<int?>> localVarResponse = await GetRadarImageAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Radar Image Retrieves the current Radar Image as a .png based on the latest settings.&lt;br/&gt;&lt;br&gt;Please Note:&lt;br&gt;&lt;ul&gt;&lt;li&gt;- A new image is available every 0.5 seconds.&lt;li&gt;- An empty image results when the &#x27;window&#x27; area given in the POST does not find sufficient Radar return. Try expanding or moving the &#x27;window&#x27; accordingly.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar image id (as returned in the POST radarImage request)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetRadarImageAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetRadarImage");

            var localVarPath = "/radarImages/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRadarImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// Get Radar Image settings Retrieve the settings used for processing a Radar Image.&lt;br&gt;Note that only the operator who created the Radar Image (via POST) can perform this GET.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar image id (as returned in the POST radarImage request)</param>
        /// <returns>RadarImageSettingRestDto</returns>
        public RadarImageSettingRestDto GetRadarImageSetting (int? id)
        {
             ApiResponse<RadarImageSettingRestDto> localVarResponse = GetRadarImageSettingWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Radar Image settings Retrieve the settings used for processing a Radar Image.&lt;br&gt;Note that only the operator who created the Radar Image (via POST) can perform this GET.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar image id (as returned in the POST radarImage request)</param>
        /// <returns>ApiResponse of RadarImageSettingRestDto</returns>
        public ApiResponse< RadarImageSettingRestDto > GetRadarImageSettingWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetRadarImageSetting");

            var localVarPath = "/radarImages/{id}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRadarImageSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RadarImageSettingRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RadarImageSettingRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RadarImageSettingRestDto)));
        }

        /// <summary>
        /// Get Radar Image settings Retrieve the settings used for processing a Radar Image.&lt;br&gt;Note that only the operator who created the Radar Image (via POST) can perform this GET.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar image id (as returned in the POST radarImage request)</param>
        /// <returns>Task of RadarImageSettingRestDto</returns>
        public async System.Threading.Tasks.Task<RadarImageSettingRestDto> GetRadarImageSettingAsync (int? id)
        {
             ApiResponse<RadarImageSettingRestDto> localVarResponse = await GetRadarImageSettingAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Radar Image settings Retrieve the settings used for processing a Radar Image.&lt;br&gt;Note that only the operator who created the Radar Image (via POST) can perform this GET.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar image id (as returned in the POST radarImage request)</param>
        /// <returns>Task of ApiResponse (RadarImageSettingRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RadarImageSettingRestDto>> GetRadarImageSettingAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetRadarImageSetting");

            var localVarPath = "/radarImages/{id}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRadarImageSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RadarImageSettingRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RadarImageSettingRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RadarImageSettingRestDto)));
        }

        /// <summary>
        /// Create Radar Image resource Create a Radar Image resource with custom settings.&lt;br&gt;This API call is the first of two steps needed for retrieving Radar Images. (The second step being the &#x27;GET /radarImages&#x27; API.)&lt;br&gt;This sets up the resource for later GETs of a Radar Image, and whose settings can be retrieved or changed via the GET or PATCH of the Radar Image settings.&lt;br&gt;&lt;br&gt;Please Note:&lt;br&gt;&lt;ul&gt;&lt;li&gt;- The resource is automatically removed from the system once no rest requests (GET or PATCH) for this resource have been made for a minute.&lt;/li&gt;&lt;li&gt;- A limited number of Radar Image resources can exist in the system simultaneously; exceeding that amount will result in failure and require a later retry.&lt;/li&gt;&lt;li&gt;- Only a few fields need to be provided; the rest will be set to a reasonable default. See the \&quot;Parameters\&quot; section, \&quot;Description\&quot; column for further details.&lt;/li&gt;&lt;li&gt;- The rpNum(s) field, which represents the Radar(s), require at least one to be active for an image to result at &#x27;GET /radarImages&#x27; request time. If none are active, this will result with a 4xx status at &#x27;GET /radarImages&#x27; request time. (Hint: see the &#x27;GET /radars&#x27; API for currently active radars.)&lt;/li&gt;&lt;li&gt;- The request class and the response class are the same. However not all fields are used in the request. See the \&quot;Parameters\&quot; section, \&quot;Data Type\&quot; column, \&quot;Model\&quot; for those fields available.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">There are reasonable default settings for all fields except the rpNum(s) and center.&lt;br&gt;Hint: Valid rpNum values can be discovered via the &#x27;GET /radars&#x27; API.&lt;br&gt;A copy and paste-able example of settings are:&lt;br&gt;{ &quot;radars&quot;: [ { &quot;rpNum&quot;: 22 } ],&lt;br&gt;&quot;center&quot;: {&lt;br&gt;   &quot;latitude&quot;: 33.74,&lt;br&gt;   &quot;longitude&quot;: -118.16&lt;br&gt;  }&lt;br&gt;} (optional)</param>
        /// <returns>RadarImageSettingRestDto</returns>
        public RadarImageSettingRestDto PostRadarImageSetting (RadarImageSettingRestDto body = null)
        {
             ApiResponse<RadarImageSettingRestDto> localVarResponse = PostRadarImageSettingWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Radar Image resource Create a Radar Image resource with custom settings.&lt;br&gt;This API call is the first of two steps needed for retrieving Radar Images. (The second step being the &#x27;GET /radarImages&#x27; API.)&lt;br&gt;This sets up the resource for later GETs of a Radar Image, and whose settings can be retrieved or changed via the GET or PATCH of the Radar Image settings.&lt;br&gt;&lt;br&gt;Please Note:&lt;br&gt;&lt;ul&gt;&lt;li&gt;- The resource is automatically removed from the system once no rest requests (GET or PATCH) for this resource have been made for a minute.&lt;/li&gt;&lt;li&gt;- A limited number of Radar Image resources can exist in the system simultaneously; exceeding that amount will result in failure and require a later retry.&lt;/li&gt;&lt;li&gt;- Only a few fields need to be provided; the rest will be set to a reasonable default. See the \&quot;Parameters\&quot; section, \&quot;Description\&quot; column for further details.&lt;/li&gt;&lt;li&gt;- The rpNum(s) field, which represents the Radar(s), require at least one to be active for an image to result at &#x27;GET /radarImages&#x27; request time. If none are active, this will result with a 4xx status at &#x27;GET /radarImages&#x27; request time. (Hint: see the &#x27;GET /radars&#x27; API for currently active radars.)&lt;/li&gt;&lt;li&gt;- The request class and the response class are the same. However not all fields are used in the request. See the \&quot;Parameters\&quot; section, \&quot;Data Type\&quot; column, \&quot;Model\&quot; for those fields available.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">There are reasonable default settings for all fields except the rpNum(s) and center.&lt;br&gt;Hint: Valid rpNum values can be discovered via the &#x27;GET /radars&#x27; API.&lt;br&gt;A copy and paste-able example of settings are:&lt;br&gt;{ &quot;radars&quot;: [ { &quot;rpNum&quot;: 22 } ],&lt;br&gt;&quot;center&quot;: {&lt;br&gt;   &quot;latitude&quot;: 33.74,&lt;br&gt;   &quot;longitude&quot;: -118.16&lt;br&gt;  }&lt;br&gt;} (optional)</param>
        /// <returns>ApiResponse of RadarImageSettingRestDto</returns>
        public ApiResponse< RadarImageSettingRestDto > PostRadarImageSettingWithHttpInfo (RadarImageSettingRestDto body = null)
        {

            var localVarPath = "/radarImages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostRadarImageSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RadarImageSettingRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RadarImageSettingRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RadarImageSettingRestDto)));
        }

        /// <summary>
        /// Create Radar Image resource Create a Radar Image resource with custom settings.&lt;br&gt;This API call is the first of two steps needed for retrieving Radar Images. (The second step being the &#x27;GET /radarImages&#x27; API.)&lt;br&gt;This sets up the resource for later GETs of a Radar Image, and whose settings can be retrieved or changed via the GET or PATCH of the Radar Image settings.&lt;br&gt;&lt;br&gt;Please Note:&lt;br&gt;&lt;ul&gt;&lt;li&gt;- The resource is automatically removed from the system once no rest requests (GET or PATCH) for this resource have been made for a minute.&lt;/li&gt;&lt;li&gt;- A limited number of Radar Image resources can exist in the system simultaneously; exceeding that amount will result in failure and require a later retry.&lt;/li&gt;&lt;li&gt;- Only a few fields need to be provided; the rest will be set to a reasonable default. See the \&quot;Parameters\&quot; section, \&quot;Description\&quot; column for further details.&lt;/li&gt;&lt;li&gt;- The rpNum(s) field, which represents the Radar(s), require at least one to be active for an image to result at &#x27;GET /radarImages&#x27; request time. If none are active, this will result with a 4xx status at &#x27;GET /radarImages&#x27; request time. (Hint: see the &#x27;GET /radars&#x27; API for currently active radars.)&lt;/li&gt;&lt;li&gt;- The request class and the response class are the same. However not all fields are used in the request. See the \&quot;Parameters\&quot; section, \&quot;Data Type\&quot; column, \&quot;Model\&quot; for those fields available.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">There are reasonable default settings for all fields except the rpNum(s) and center.&lt;br&gt;Hint: Valid rpNum values can be discovered via the &#x27;GET /radars&#x27; API.&lt;br&gt;A copy and paste-able example of settings are:&lt;br&gt;{ &quot;radars&quot;: [ { &quot;rpNum&quot;: 22 } ],&lt;br&gt;&quot;center&quot;: {&lt;br&gt;   &quot;latitude&quot;: 33.74,&lt;br&gt;   &quot;longitude&quot;: -118.16&lt;br&gt;  }&lt;br&gt;} (optional)</param>
        /// <returns>Task of RadarImageSettingRestDto</returns>
        public async System.Threading.Tasks.Task<RadarImageSettingRestDto> PostRadarImageSettingAsync (RadarImageSettingRestDto body = null)
        {
             ApiResponse<RadarImageSettingRestDto> localVarResponse = await PostRadarImageSettingAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Radar Image resource Create a Radar Image resource with custom settings.&lt;br&gt;This API call is the first of two steps needed for retrieving Radar Images. (The second step being the &#x27;GET /radarImages&#x27; API.)&lt;br&gt;This sets up the resource for later GETs of a Radar Image, and whose settings can be retrieved or changed via the GET or PATCH of the Radar Image settings.&lt;br&gt;&lt;br&gt;Please Note:&lt;br&gt;&lt;ul&gt;&lt;li&gt;- The resource is automatically removed from the system once no rest requests (GET or PATCH) for this resource have been made for a minute.&lt;/li&gt;&lt;li&gt;- A limited number of Radar Image resources can exist in the system simultaneously; exceeding that amount will result in failure and require a later retry.&lt;/li&gt;&lt;li&gt;- Only a few fields need to be provided; the rest will be set to a reasonable default. See the \&quot;Parameters\&quot; section, \&quot;Description\&quot; column for further details.&lt;/li&gt;&lt;li&gt;- The rpNum(s) field, which represents the Radar(s), require at least one to be active for an image to result at &#x27;GET /radarImages&#x27; request time. If none are active, this will result with a 4xx status at &#x27;GET /radarImages&#x27; request time. (Hint: see the &#x27;GET /radars&#x27; API for currently active radars.)&lt;/li&gt;&lt;li&gt;- The request class and the response class are the same. However not all fields are used in the request. See the \&quot;Parameters\&quot; section, \&quot;Data Type\&quot; column, \&quot;Model\&quot; for those fields available.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">There are reasonable default settings for all fields except the rpNum(s) and center.&lt;br&gt;Hint: Valid rpNum values can be discovered via the &#x27;GET /radars&#x27; API.&lt;br&gt;A copy and paste-able example of settings are:&lt;br&gt;{ &quot;radars&quot;: [ { &quot;rpNum&quot;: 22 } ],&lt;br&gt;&quot;center&quot;: {&lt;br&gt;   &quot;latitude&quot;: 33.74,&lt;br&gt;   &quot;longitude&quot;: -118.16&lt;br&gt;  }&lt;br&gt;} (optional)</param>
        /// <returns>Task of ApiResponse (RadarImageSettingRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RadarImageSettingRestDto>> PostRadarImageSettingAsyncWithHttpInfo (RadarImageSettingRestDto body = null)
        {

            var localVarPath = "/radarImages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostRadarImageSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RadarImageSettingRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RadarImageSettingRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RadarImageSettingRestDto)));
        }

        /// <summary>
        /// Update Radar Image settings Update the settings used for processing a Radar Image. &lt;br&gt;Note that fields not provided will remain unchanged, and that only the operator who created the Radar Image (via POST) can perform this PATCH.&lt;br&gt;See the POST operation, \&quot;Implementation Notes\&quot; section, for further usage notes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar image id (as returned in the POST radarImage request)</param>
        /// <param name="body">Specify the Radar Image settings to be changed (optional)</param>
        /// <returns>RadarImageSettingRestDto</returns>
        public RadarImageSettingRestDto UpdateRadarImageSetting (int? id, RadarImageSettingRestDto body = null)
        {
             ApiResponse<RadarImageSettingRestDto> localVarResponse = UpdateRadarImageSettingWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Radar Image settings Update the settings used for processing a Radar Image. &lt;br&gt;Note that fields not provided will remain unchanged, and that only the operator who created the Radar Image (via POST) can perform this PATCH.&lt;br&gt;See the POST operation, \&quot;Implementation Notes\&quot; section, for further usage notes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar image id (as returned in the POST radarImage request)</param>
        /// <param name="body">Specify the Radar Image settings to be changed (optional)</param>
        /// <returns>ApiResponse of RadarImageSettingRestDto</returns>
        public ApiResponse< RadarImageSettingRestDto > UpdateRadarImageSettingWithHttpInfo (int? id, RadarImageSettingRestDto body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->UpdateRadarImageSetting");

            var localVarPath = "/radarImages/{id}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRadarImageSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RadarImageSettingRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RadarImageSettingRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RadarImageSettingRestDto)));
        }

        /// <summary>
        /// Update Radar Image settings Update the settings used for processing a Radar Image. &lt;br&gt;Note that fields not provided will remain unchanged, and that only the operator who created the Radar Image (via POST) can perform this PATCH.&lt;br&gt;See the POST operation, \&quot;Implementation Notes\&quot; section, for further usage notes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar image id (as returned in the POST radarImage request)</param>
        /// <param name="body">Specify the Radar Image settings to be changed (optional)</param>
        /// <returns>Task of RadarImageSettingRestDto</returns>
        public async System.Threading.Tasks.Task<RadarImageSettingRestDto> UpdateRadarImageSettingAsync (int? id, RadarImageSettingRestDto body = null)
        {
             ApiResponse<RadarImageSettingRestDto> localVarResponse = await UpdateRadarImageSettingAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Radar Image settings Update the settings used for processing a Radar Image. &lt;br&gt;Note that fields not provided will remain unchanged, and that only the operator who created the Radar Image (via POST) can perform this PATCH.&lt;br&gt;See the POST operation, \&quot;Implementation Notes\&quot; section, for further usage notes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar image id (as returned in the POST radarImage request)</param>
        /// <param name="body">Specify the Radar Image settings to be changed (optional)</param>
        /// <returns>Task of ApiResponse (RadarImageSettingRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RadarImageSettingRestDto>> UpdateRadarImageSettingAsyncWithHttpInfo (int? id, RadarImageSettingRestDto body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->UpdateRadarImageSetting");

            var localVarPath = "/radarImages/{id}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRadarImageSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RadarImageSettingRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RadarImageSettingRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RadarImageSettingRestDto)));
        }

    }
}
