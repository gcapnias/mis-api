/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CameraServiceRestDto
    /// </summary>
    [DataContract]
        public partial class CameraServiceRestDto :  IEquatable<CameraServiceRestDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CameraServiceRestDto" /> class.
        /// </summary>
        /// <param name="cameraId">ID of the Camera (required).</param>
        /// <param name="isPowerOn">Specifies whether the Camera power is on (required).</param>
        /// <param name="isServerOffline">Specifies if the the Camera server is offline. Presented only if camera server is offline.</param>
        /// <param name="links">*method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;rel/camera&#x27; link references the associated camera and can be used to access further information via the REST Cameras Endpoint (required).</param>
        /// <param name="name">Name of the Camera (required).</param>
        /// <param name="position">position.</param>
        /// <param name="reportedTime">reportedTime.</param>
        public CameraServiceRestDto(byte[] cameraId = default(byte[]), bool? isPowerOn = default(bool?), bool? isServerOffline = default(bool?), List<Link> links = default(List<Link>), string name = default(string), GeoPosRestDto position = default(GeoPosRestDto), ReportedTimeRestDto reportedTime = default(ReportedTimeRestDto))
        {
            // to ensure "cameraId" is required (not null)
            if (cameraId == null)
            {
                throw new InvalidDataException("cameraId is a required property for CameraServiceRestDto and cannot be null");
            }
            else
            {
                this.CameraId = cameraId;
            }
            // to ensure "isPowerOn" is required (not null)
            if (isPowerOn == null)
            {
                throw new InvalidDataException("isPowerOn is a required property for CameraServiceRestDto and cannot be null");
            }
            else
            {
                this.IsPowerOn = isPowerOn;
            }
            // to ensure "links" is required (not null)
            if (links == null)
            {
                throw new InvalidDataException("links is a required property for CameraServiceRestDto and cannot be null");
            }
            else
            {
                this.Links = links;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for CameraServiceRestDto and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.IsServerOffline = isServerOffline;
            this.Position = position;
            this.ReportedTime = reportedTime;
        }
        
        /// <summary>
        /// ID of the Camera
        /// </summary>
        /// <value>ID of the Camera</value>
        [DataMember(Name="cameraId", EmitDefaultValue=false)]
        public byte[] CameraId { get; set; }

        /// <summary>
        /// Specifies whether the Camera power is on
        /// </summary>
        /// <value>Specifies whether the Camera power is on</value>
        [DataMember(Name="isPowerOn", EmitDefaultValue=false)]
        public bool? IsPowerOn { get; set; }

        /// <summary>
        /// Specifies if the the Camera server is offline. Presented only if camera server is offline
        /// </summary>
        /// <value>Specifies if the the Camera server is offline. Presented only if camera server is offline</value>
        [DataMember(Name="isServerOffline", EmitDefaultValue=false)]
        public bool? IsServerOffline { get; set; }

        /// <summary>
        /// *method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;rel/camera&#x27; link references the associated camera and can be used to access further information via the REST Cameras Endpoint
        /// </summary>
        /// <value>*method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;rel/camera&#x27; link references the associated camera and can be used to access further information via the REST Cameras Endpoint</value>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Name of the Camera
        /// </summary>
        /// <value>Name of the Camera</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public GeoPosRestDto Position { get; set; }

        /// <summary>
        /// Gets or Sets ReportedTime
        /// </summary>
        [DataMember(Name="reportedTime", EmitDefaultValue=false)]
        public ReportedTimeRestDto ReportedTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CameraServiceRestDto {\n");
            sb.Append("  CameraId: ").Append(CameraId).Append("\n");
            sb.Append("  IsPowerOn: ").Append(IsPowerOn).Append("\n");
            sb.Append("  IsServerOffline: ").Append(IsServerOffline).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  ReportedTime: ").Append(ReportedTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CameraServiceRestDto);
        }

        /// <summary>
        /// Returns true if CameraServiceRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CameraServiceRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CameraServiceRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CameraId == input.CameraId ||
                    (this.CameraId != null &&
                    this.CameraId.Equals(input.CameraId))
                ) && 
                (
                    this.IsPowerOn == input.IsPowerOn ||
                    (this.IsPowerOn != null &&
                    this.IsPowerOn.Equals(input.IsPowerOn))
                ) && 
                (
                    this.IsServerOffline == input.IsServerOffline ||
                    (this.IsServerOffline != null &&
                    this.IsServerOffline.Equals(input.IsServerOffline))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.ReportedTime == input.ReportedTime ||
                    (this.ReportedTime != null &&
                    this.ReportedTime.Equals(input.ReportedTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CameraId != null)
                    hashCode = hashCode * 59 + this.CameraId.GetHashCode();
                if (this.IsPowerOn != null)
                    hashCode = hashCode * 59 + this.IsPowerOn.GetHashCode();
                if (this.IsServerOffline != null)
                    hashCode = hashCode * 59 + this.IsServerOffline.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.ReportedTime != null)
                    hashCode = hashCode * 59 + this.ReportedTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
