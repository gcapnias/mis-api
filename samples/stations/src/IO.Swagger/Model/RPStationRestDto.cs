/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RPStationRestDto
    /// </summary>
    [DataContract]
        public partial class RPStationRestDto :  IEquatable<RPStationRestDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RPStationRestDto" /> class.
        /// </summary>
        /// <param name="count">Running sequence counter of heartbeat messages received for the RP Station. Available with expand&#x3D;detail.</param>
        /// <param name="navService">navService.</param>
        /// <param name="position">position.</param>
        /// <param name="radarService">radarService.</param>
        /// <param name="reportedTime">reportedTime.</param>
        /// <param name="rpNum">Radar Processing Number. Used for identification of the Radar (required).</param>
        /// <param name="stationName">Name of the Station (required).</param>
        /// <param name="trackerService">trackerService.</param>
        public RPStationRestDto(int? count = default(int?), NavOrTrackerServiceRestDto navService = default(NavOrTrackerServiceRestDto), GeoPosRestDto position = default(GeoPosRestDto), RadarServiceRestDto radarService = default(RadarServiceRestDto), ReportedTimeRestDto reportedTime = default(ReportedTimeRestDto), int? rpNum = default(int?), string stationName = default(string), NavOrTrackerServiceRestDto trackerService = default(NavOrTrackerServiceRestDto))
        {
            // to ensure "rpNum" is required (not null)
            if (rpNum == null)
            {
                throw new InvalidDataException("rpNum is a required property for RPStationRestDto and cannot be null");
            }
            else
            {
                this.RpNum = rpNum;
            }
            // to ensure "stationName" is required (not null)
            if (stationName == null)
            {
                throw new InvalidDataException("stationName is a required property for RPStationRestDto and cannot be null");
            }
            else
            {
                this.StationName = stationName;
            }
            this.Count = count;
            this.NavService = navService;
            this.Position = position;
            this.RadarService = radarService;
            this.ReportedTime = reportedTime;
            this.TrackerService = trackerService;
        }
        
        /// <summary>
        /// Running sequence counter of heartbeat messages received for the RP Station. Available with expand&#x3D;detail
        /// </summary>
        /// <value>Running sequence counter of heartbeat messages received for the RP Station. Available with expand&#x3D;detail</value>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int? Count { get; set; }

        /// <summary>
        /// Gets or Sets NavService
        /// </summary>
        [DataMember(Name="navService", EmitDefaultValue=false)]
        public NavOrTrackerServiceRestDto NavService { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public GeoPosRestDto Position { get; set; }

        /// <summary>
        /// Gets or Sets RadarService
        /// </summary>
        [DataMember(Name="radarService", EmitDefaultValue=false)]
        public RadarServiceRestDto RadarService { get; set; }

        /// <summary>
        /// Gets or Sets ReportedTime
        /// </summary>
        [DataMember(Name="reportedTime", EmitDefaultValue=false)]
        public ReportedTimeRestDto ReportedTime { get; set; }

        /// <summary>
        /// Radar Processing Number. Used for identification of the Radar
        /// </summary>
        /// <value>Radar Processing Number. Used for identification of the Radar</value>
        [DataMember(Name="rpNum", EmitDefaultValue=false)]
        public int? RpNum { get; set; }

        /// <summary>
        /// Name of the Station
        /// </summary>
        /// <value>Name of the Station</value>
        [DataMember(Name="stationName", EmitDefaultValue=false)]
        public string StationName { get; set; }

        /// <summary>
        /// Gets or Sets TrackerService
        /// </summary>
        [DataMember(Name="trackerService", EmitDefaultValue=false)]
        public NavOrTrackerServiceRestDto TrackerService { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RPStationRestDto {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  NavService: ").Append(NavService).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  RadarService: ").Append(RadarService).Append("\n");
            sb.Append("  ReportedTime: ").Append(ReportedTime).Append("\n");
            sb.Append("  RpNum: ").Append(RpNum).Append("\n");
            sb.Append("  StationName: ").Append(StationName).Append("\n");
            sb.Append("  TrackerService: ").Append(TrackerService).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RPStationRestDto);
        }

        /// <summary>
        /// Returns true if RPStationRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of RPStationRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RPStationRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.NavService == input.NavService ||
                    (this.NavService != null &&
                    this.NavService.Equals(input.NavService))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.RadarService == input.RadarService ||
                    (this.RadarService != null &&
                    this.RadarService.Equals(input.RadarService))
                ) && 
                (
                    this.ReportedTime == input.ReportedTime ||
                    (this.ReportedTime != null &&
                    this.ReportedTime.Equals(input.ReportedTime))
                ) && 
                (
                    this.RpNum == input.RpNum ||
                    (this.RpNum != null &&
                    this.RpNum.Equals(input.RpNum))
                ) && 
                (
                    this.StationName == input.StationName ||
                    (this.StationName != null &&
                    this.StationName.Equals(input.StationName))
                ) && 
                (
                    this.TrackerService == input.TrackerService ||
                    (this.TrackerService != null &&
                    this.TrackerService.Equals(input.TrackerService))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.NavService != null)
                    hashCode = hashCode * 59 + this.NavService.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.RadarService != null)
                    hashCode = hashCode * 59 + this.RadarService.GetHashCode();
                if (this.ReportedTime != null)
                    hashCode = hashCode * 59 + this.ReportedTime.GetHashCode();
                if (this.RpNum != null)
                    hashCode = hashCode * 59 + this.RpNum.GetHashCode();
                if (this.StationName != null)
                    hashCode = hashCode * 59 + this.StationName.GetHashCode();
                if (this.TrackerService != null)
                    hashCode = hashCode * 59 + this.TrackerService.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
