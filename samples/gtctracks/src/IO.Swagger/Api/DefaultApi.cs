/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get GTC Track
        /// </summary>
        /// <remarks>
        /// Specifies a real-time GTC (Global Track Correlator) track. The caller requests the track of interest via track id, and &#x27;expand&#x27; settings for track fields of interest (none for default).&lt;br&gt;&lt;br&gt;Please note:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;maxDelayInterval  (6/2021):&lt;br&gt;Added due to a recent change to the GTC Tracker&#x27;s behavior in that it now has the potential to send out track&#x27;s less frequently. (Slower moving tracks are sent out less frequently.) 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;R1S3_100&#x27;).&lt;br&gt;Format is R&amp;lt;region&amp;gt;S&amp;lt;Tracker Source unit number&amp;gt;_&amp;lt;track id&amp;gt;&lt;br&gt;Example value of R1S3_100 represents Region 1, Tracker Source unit number 3, track id 100.&lt;br&gt;&lt;br&gt;</param>
        /// <param name="expand">Expands data seen by using any combination of &#x27;detail&#x27; or &#x27;sources&#x27;. Eg, &#x27;expand&#x3D;detail,sources&#x27;. (See the above Response Class section, Model breakout for a detailed list of the &#x27;detail&#x27; (TrackGtcDetail) and &#x27;sources&#x27; (TrackGtcSource) data (optional)</param>
        /// <returns>TrackGtcRestDto</returns>
        TrackGtcRestDto GetGtcTrack (string id, string expand = null);

        /// <summary>
        /// Get GTC Track
        /// </summary>
        /// <remarks>
        /// Specifies a real-time GTC (Global Track Correlator) track. The caller requests the track of interest via track id, and &#x27;expand&#x27; settings for track fields of interest (none for default).&lt;br&gt;&lt;br&gt;Please note:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;maxDelayInterval  (6/2021):&lt;br&gt;Added due to a recent change to the GTC Tracker&#x27;s behavior in that it now has the potential to send out track&#x27;s less frequently. (Slower moving tracks are sent out less frequently.) 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;R1S3_100&#x27;).&lt;br&gt;Format is R&amp;lt;region&amp;gt;S&amp;lt;Tracker Source unit number&amp;gt;_&amp;lt;track id&amp;gt;&lt;br&gt;Example value of R1S3_100 represents Region 1, Tracker Source unit number 3, track id 100.&lt;br&gt;&lt;br&gt;</param>
        /// <param name="expand">Expands data seen by using any combination of &#x27;detail&#x27; or &#x27;sources&#x27;. Eg, &#x27;expand&#x3D;detail,sources&#x27;. (See the above Response Class section, Model breakout for a detailed list of the &#x27;detail&#x27; (TrackGtcDetail) and &#x27;sources&#x27; (TrackGtcSource) data (optional)</param>
        /// <returns>ApiResponse of TrackGtcRestDto</returns>
        ApiResponse<TrackGtcRestDto> GetGtcTrackWithHttpInfo (string id, string expand = null);
        /// <summary>
        /// Get multiple GTC tracks
        /// </summary>
        /// <remarks>
        /// Specifies real-time GTC (Global Track Correlator) tracks. The caller requests the tracks of interest via specifying search criteria (none for all tracks), &#x27;expand&#x27; settings for track fields of interest (none for default), and page settings to specify the page of interest (none for default).&lt;br&gt;&lt;br&gt;This data is available via both REST and WebSockets.&lt;br&gt;&lt;br&gt;Please note:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Multiple query types (see &#x27;Parameter&#x27;) can be applied.&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Links are given as an aid for further API queries.&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;maxDelayInterval  (6/2021):&lt;br&gt;Added due to a recent change to the GTC Tracker&#x27;s behavior in that it now has the potential to send out track&#x27;s less frequently. (Slower moving tracks are sent out less frequently.) 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boundingRect">Filters tracks to a bounding rectangular region whose sides parallel the latitude and longitude axes.&lt;br&gt;(Decimal Degrees, North Positive / East Positive)&lt;/br&gt; Format is &amp;lt;upper lat&amp;gt;, &amp;lt;left lon&amp;gt;, &amp;lt;lower lat&amp;gt;, &amp;lt;right lon&amp;gt;&lt;br&gt;Example Value: 33.75,-118.50,33.25,-118.19 (optional)</param>
        /// <param name="expand">Expands data seen by using any combination of &#x27;detail&#x27; or &#x27;sources&#x27;. Eg, &#x27;expand&#x3D;detail,sources&#x27;. (See the above Response Class section, Model breakout for a detailed list of the &#x27;detail&#x27; (TrackGtcDetail) and &#x27;sources&#x27; (TrackGtcSource) data (optional)</param>
        /// <param name="name">Returns tracks that have a complete or partial name match. (optional)</param>
        /// <param name="updateSince">Returns tracks that have been updated since (greater than) a specific time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00Z specifies a year-month-day followed by 24-hour hours:minutes:seconds in GMT time&lt;br&gt;&lt;br&gt;Note that to support usability the pagination query is ignored with this argument; all matched items will be returned. (optional)</param>
        /// <param name="trackSources">Returns tracks which have contributions from the given track sources which are not necessarly the preferred track source. Track sources are put together from a combination of Radar,AIS,Generic,NRT,Pending,Unknown,Other.&lt;br&gt; The 4 acceptable combinations:&lt;br&gt; (1) trackSource:  where the given trackSource contributes,  (2) OR(trackSource1, trackSource2, optional-trackSource3)  where any given trackSource contributes,  (3) AND(trackSource1, trackSource2, optional-trackSource3)  where all given trackSources contribute,  (4) ONLY(trackSource1, optional-trackSource2, optional-trackSource3)  where only (and all of) the given trackSource(s) contribute,  (5) NOT(trackSource1, optional-trackSource2, optional-trackSource3)  where none of the given trackSource(s) contribute.&lt;br&gt; Example 1: Generic - returns those tracks which have a Generic type providing one of the sources&lt;br&gt; Example 2: AND(AIS,Radar) - returns those tracks which have both AIS and Radar providing sources&lt;br&gt; Example 3: ONLY(Radar) - returns those tracks which ONLY have Radar providing the sources (optional)</param>
        /// <param name="preferredTrackSource">Returns tracks based on the &#x27;preferred&#x27; (or &#x27;primary&#x27;) specified track source.  The track source is one of Radar,AIS,Generic,NRT,Pending,Unknown,Other (optional)</param>
        /// <param name="hideSingleLinks">If &#x27;true&#x27;, hide the links for the enclosed single track entries in order to reduce use of the network bandwidth. It defaults to &#x27;false&#x27; (ie, show the links). It is suggested to set this to &#x27;true&#x27; if the links are not referenced. (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>TrackGtcsRestDto</returns>
        TrackGtcsRestDto GetGtcTracks (string boundingRect = null, string expand = null, string name = null, string updateSince = null, string trackSources = null, string preferredTrackSource = null, bool? hideSingleLinks = null, int? page = null, int? size = null);

        /// <summary>
        /// Get multiple GTC tracks
        /// </summary>
        /// <remarks>
        /// Specifies real-time GTC (Global Track Correlator) tracks. The caller requests the tracks of interest via specifying search criteria (none for all tracks), &#x27;expand&#x27; settings for track fields of interest (none for default), and page settings to specify the page of interest (none for default).&lt;br&gt;&lt;br&gt;This data is available via both REST and WebSockets.&lt;br&gt;&lt;br&gt;Please note:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Multiple query types (see &#x27;Parameter&#x27;) can be applied.&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Links are given as an aid for further API queries.&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;maxDelayInterval  (6/2021):&lt;br&gt;Added due to a recent change to the GTC Tracker&#x27;s behavior in that it now has the potential to send out track&#x27;s less frequently. (Slower moving tracks are sent out less frequently.) 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boundingRect">Filters tracks to a bounding rectangular region whose sides parallel the latitude and longitude axes.&lt;br&gt;(Decimal Degrees, North Positive / East Positive)&lt;/br&gt; Format is &amp;lt;upper lat&amp;gt;, &amp;lt;left lon&amp;gt;, &amp;lt;lower lat&amp;gt;, &amp;lt;right lon&amp;gt;&lt;br&gt;Example Value: 33.75,-118.50,33.25,-118.19 (optional)</param>
        /// <param name="expand">Expands data seen by using any combination of &#x27;detail&#x27; or &#x27;sources&#x27;. Eg, &#x27;expand&#x3D;detail,sources&#x27;. (See the above Response Class section, Model breakout for a detailed list of the &#x27;detail&#x27; (TrackGtcDetail) and &#x27;sources&#x27; (TrackGtcSource) data (optional)</param>
        /// <param name="name">Returns tracks that have a complete or partial name match. (optional)</param>
        /// <param name="updateSince">Returns tracks that have been updated since (greater than) a specific time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00Z specifies a year-month-day followed by 24-hour hours:minutes:seconds in GMT time&lt;br&gt;&lt;br&gt;Note that to support usability the pagination query is ignored with this argument; all matched items will be returned. (optional)</param>
        /// <param name="trackSources">Returns tracks which have contributions from the given track sources which are not necessarly the preferred track source. Track sources are put together from a combination of Radar,AIS,Generic,NRT,Pending,Unknown,Other.&lt;br&gt; The 4 acceptable combinations:&lt;br&gt; (1) trackSource:  where the given trackSource contributes,  (2) OR(trackSource1, trackSource2, optional-trackSource3)  where any given trackSource contributes,  (3) AND(trackSource1, trackSource2, optional-trackSource3)  where all given trackSources contribute,  (4) ONLY(trackSource1, optional-trackSource2, optional-trackSource3)  where only (and all of) the given trackSource(s) contribute,  (5) NOT(trackSource1, optional-trackSource2, optional-trackSource3)  where none of the given trackSource(s) contribute.&lt;br&gt; Example 1: Generic - returns those tracks which have a Generic type providing one of the sources&lt;br&gt; Example 2: AND(AIS,Radar) - returns those tracks which have both AIS and Radar providing sources&lt;br&gt; Example 3: ONLY(Radar) - returns those tracks which ONLY have Radar providing the sources (optional)</param>
        /// <param name="preferredTrackSource">Returns tracks based on the &#x27;preferred&#x27; (or &#x27;primary&#x27;) specified track source.  The track source is one of Radar,AIS,Generic,NRT,Pending,Unknown,Other (optional)</param>
        /// <param name="hideSingleLinks">If &#x27;true&#x27;, hide the links for the enclosed single track entries in order to reduce use of the network bandwidth. It defaults to &#x27;false&#x27; (ie, show the links). It is suggested to set this to &#x27;true&#x27; if the links are not referenced. (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>ApiResponse of TrackGtcsRestDto</returns>
        ApiResponse<TrackGtcsRestDto> GetGtcTracksWithHttpInfo (string boundingRect = null, string expand = null, string name = null, string updateSince = null, string trackSources = null, string preferredTrackSource = null, bool? hideSingleLinks = null, int? page = null, int? size = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get GTC Track
        /// </summary>
        /// <remarks>
        /// Specifies a real-time GTC (Global Track Correlator) track. The caller requests the track of interest via track id, and &#x27;expand&#x27; settings for track fields of interest (none for default).&lt;br&gt;&lt;br&gt;Please note:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;maxDelayInterval  (6/2021):&lt;br&gt;Added due to a recent change to the GTC Tracker&#x27;s behavior in that it now has the potential to send out track&#x27;s less frequently. (Slower moving tracks are sent out less frequently.) 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;R1S3_100&#x27;).&lt;br&gt;Format is R&amp;lt;region&amp;gt;S&amp;lt;Tracker Source unit number&amp;gt;_&amp;lt;track id&amp;gt;&lt;br&gt;Example value of R1S3_100 represents Region 1, Tracker Source unit number 3, track id 100.&lt;br&gt;&lt;br&gt;</param>
        /// <param name="expand">Expands data seen by using any combination of &#x27;detail&#x27; or &#x27;sources&#x27;. Eg, &#x27;expand&#x3D;detail,sources&#x27;. (See the above Response Class section, Model breakout for a detailed list of the &#x27;detail&#x27; (TrackGtcDetail) and &#x27;sources&#x27; (TrackGtcSource) data (optional)</param>
        /// <returns>Task of TrackGtcRestDto</returns>
        System.Threading.Tasks.Task<TrackGtcRestDto> GetGtcTrackAsync (string id, string expand = null);

        /// <summary>
        /// Get GTC Track
        /// </summary>
        /// <remarks>
        /// Specifies a real-time GTC (Global Track Correlator) track. The caller requests the track of interest via track id, and &#x27;expand&#x27; settings for track fields of interest (none for default).&lt;br&gt;&lt;br&gt;Please note:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;maxDelayInterval  (6/2021):&lt;br&gt;Added due to a recent change to the GTC Tracker&#x27;s behavior in that it now has the potential to send out track&#x27;s less frequently. (Slower moving tracks are sent out less frequently.) 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;R1S3_100&#x27;).&lt;br&gt;Format is R&amp;lt;region&amp;gt;S&amp;lt;Tracker Source unit number&amp;gt;_&amp;lt;track id&amp;gt;&lt;br&gt;Example value of R1S3_100 represents Region 1, Tracker Source unit number 3, track id 100.&lt;br&gt;&lt;br&gt;</param>
        /// <param name="expand">Expands data seen by using any combination of &#x27;detail&#x27; or &#x27;sources&#x27;. Eg, &#x27;expand&#x3D;detail,sources&#x27;. (See the above Response Class section, Model breakout for a detailed list of the &#x27;detail&#x27; (TrackGtcDetail) and &#x27;sources&#x27; (TrackGtcSource) data (optional)</param>
        /// <returns>Task of ApiResponse (TrackGtcRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackGtcRestDto>> GetGtcTrackAsyncWithHttpInfo (string id, string expand = null);
        /// <summary>
        /// Get multiple GTC tracks
        /// </summary>
        /// <remarks>
        /// Specifies real-time GTC (Global Track Correlator) tracks. The caller requests the tracks of interest via specifying search criteria (none for all tracks), &#x27;expand&#x27; settings for track fields of interest (none for default), and page settings to specify the page of interest (none for default).&lt;br&gt;&lt;br&gt;This data is available via both REST and WebSockets.&lt;br&gt;&lt;br&gt;Please note:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Multiple query types (see &#x27;Parameter&#x27;) can be applied.&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Links are given as an aid for further API queries.&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;maxDelayInterval  (6/2021):&lt;br&gt;Added due to a recent change to the GTC Tracker&#x27;s behavior in that it now has the potential to send out track&#x27;s less frequently. (Slower moving tracks are sent out less frequently.) 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boundingRect">Filters tracks to a bounding rectangular region whose sides parallel the latitude and longitude axes.&lt;br&gt;(Decimal Degrees, North Positive / East Positive)&lt;/br&gt; Format is &amp;lt;upper lat&amp;gt;, &amp;lt;left lon&amp;gt;, &amp;lt;lower lat&amp;gt;, &amp;lt;right lon&amp;gt;&lt;br&gt;Example Value: 33.75,-118.50,33.25,-118.19 (optional)</param>
        /// <param name="expand">Expands data seen by using any combination of &#x27;detail&#x27; or &#x27;sources&#x27;. Eg, &#x27;expand&#x3D;detail,sources&#x27;. (See the above Response Class section, Model breakout for a detailed list of the &#x27;detail&#x27; (TrackGtcDetail) and &#x27;sources&#x27; (TrackGtcSource) data (optional)</param>
        /// <param name="name">Returns tracks that have a complete or partial name match. (optional)</param>
        /// <param name="updateSince">Returns tracks that have been updated since (greater than) a specific time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00Z specifies a year-month-day followed by 24-hour hours:minutes:seconds in GMT time&lt;br&gt;&lt;br&gt;Note that to support usability the pagination query is ignored with this argument; all matched items will be returned. (optional)</param>
        /// <param name="trackSources">Returns tracks which have contributions from the given track sources which are not necessarly the preferred track source. Track sources are put together from a combination of Radar,AIS,Generic,NRT,Pending,Unknown,Other.&lt;br&gt; The 4 acceptable combinations:&lt;br&gt; (1) trackSource:  where the given trackSource contributes,  (2) OR(trackSource1, trackSource2, optional-trackSource3)  where any given trackSource contributes,  (3) AND(trackSource1, trackSource2, optional-trackSource3)  where all given trackSources contribute,  (4) ONLY(trackSource1, optional-trackSource2, optional-trackSource3)  where only (and all of) the given trackSource(s) contribute,  (5) NOT(trackSource1, optional-trackSource2, optional-trackSource3)  where none of the given trackSource(s) contribute.&lt;br&gt; Example 1: Generic - returns those tracks which have a Generic type providing one of the sources&lt;br&gt; Example 2: AND(AIS,Radar) - returns those tracks which have both AIS and Radar providing sources&lt;br&gt; Example 3: ONLY(Radar) - returns those tracks which ONLY have Radar providing the sources (optional)</param>
        /// <param name="preferredTrackSource">Returns tracks based on the &#x27;preferred&#x27; (or &#x27;primary&#x27;) specified track source.  The track source is one of Radar,AIS,Generic,NRT,Pending,Unknown,Other (optional)</param>
        /// <param name="hideSingleLinks">If &#x27;true&#x27;, hide the links for the enclosed single track entries in order to reduce use of the network bandwidth. It defaults to &#x27;false&#x27; (ie, show the links). It is suggested to set this to &#x27;true&#x27; if the links are not referenced. (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of TrackGtcsRestDto</returns>
        System.Threading.Tasks.Task<TrackGtcsRestDto> GetGtcTracksAsync (string boundingRect = null, string expand = null, string name = null, string updateSince = null, string trackSources = null, string preferredTrackSource = null, bool? hideSingleLinks = null, int? page = null, int? size = null);

        /// <summary>
        /// Get multiple GTC tracks
        /// </summary>
        /// <remarks>
        /// Specifies real-time GTC (Global Track Correlator) tracks. The caller requests the tracks of interest via specifying search criteria (none for all tracks), &#x27;expand&#x27; settings for track fields of interest (none for default), and page settings to specify the page of interest (none for default).&lt;br&gt;&lt;br&gt;This data is available via both REST and WebSockets.&lt;br&gt;&lt;br&gt;Please note:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Multiple query types (see &#x27;Parameter&#x27;) can be applied.&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Links are given as an aid for further API queries.&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;maxDelayInterval  (6/2021):&lt;br&gt;Added due to a recent change to the GTC Tracker&#x27;s behavior in that it now has the potential to send out track&#x27;s less frequently. (Slower moving tracks are sent out less frequently.) 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boundingRect">Filters tracks to a bounding rectangular region whose sides parallel the latitude and longitude axes.&lt;br&gt;(Decimal Degrees, North Positive / East Positive)&lt;/br&gt; Format is &amp;lt;upper lat&amp;gt;, &amp;lt;left lon&amp;gt;, &amp;lt;lower lat&amp;gt;, &amp;lt;right lon&amp;gt;&lt;br&gt;Example Value: 33.75,-118.50,33.25,-118.19 (optional)</param>
        /// <param name="expand">Expands data seen by using any combination of &#x27;detail&#x27; or &#x27;sources&#x27;. Eg, &#x27;expand&#x3D;detail,sources&#x27;. (See the above Response Class section, Model breakout for a detailed list of the &#x27;detail&#x27; (TrackGtcDetail) and &#x27;sources&#x27; (TrackGtcSource) data (optional)</param>
        /// <param name="name">Returns tracks that have a complete or partial name match. (optional)</param>
        /// <param name="updateSince">Returns tracks that have been updated since (greater than) a specific time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00Z specifies a year-month-day followed by 24-hour hours:minutes:seconds in GMT time&lt;br&gt;&lt;br&gt;Note that to support usability the pagination query is ignored with this argument; all matched items will be returned. (optional)</param>
        /// <param name="trackSources">Returns tracks which have contributions from the given track sources which are not necessarly the preferred track source. Track sources are put together from a combination of Radar,AIS,Generic,NRT,Pending,Unknown,Other.&lt;br&gt; The 4 acceptable combinations:&lt;br&gt; (1) trackSource:  where the given trackSource contributes,  (2) OR(trackSource1, trackSource2, optional-trackSource3)  where any given trackSource contributes,  (3) AND(trackSource1, trackSource2, optional-trackSource3)  where all given trackSources contribute,  (4) ONLY(trackSource1, optional-trackSource2, optional-trackSource3)  where only (and all of) the given trackSource(s) contribute,  (5) NOT(trackSource1, optional-trackSource2, optional-trackSource3)  where none of the given trackSource(s) contribute.&lt;br&gt; Example 1: Generic - returns those tracks which have a Generic type providing one of the sources&lt;br&gt; Example 2: AND(AIS,Radar) - returns those tracks which have both AIS and Radar providing sources&lt;br&gt; Example 3: ONLY(Radar) - returns those tracks which ONLY have Radar providing the sources (optional)</param>
        /// <param name="preferredTrackSource">Returns tracks based on the &#x27;preferred&#x27; (or &#x27;primary&#x27;) specified track source.  The track source is one of Radar,AIS,Generic,NRT,Pending,Unknown,Other (optional)</param>
        /// <param name="hideSingleLinks">If &#x27;true&#x27;, hide the links for the enclosed single track entries in order to reduce use of the network bandwidth. It defaults to &#x27;false&#x27; (ie, show the links). It is suggested to set this to &#x27;true&#x27; if the links are not referenced. (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (TrackGtcsRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackGtcsRestDto>> GetGtcTracksAsyncWithHttpInfo (string boundingRect = null, string expand = null, string name = null, string updateSince = null, string trackSources = null, string preferredTrackSource = null, bool? hideSingleLinks = null, int? page = null, int? size = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get GTC Track Specifies a real-time GTC (Global Track Correlator) track. The caller requests the track of interest via track id, and &#x27;expand&#x27; settings for track fields of interest (none for default).&lt;br&gt;&lt;br&gt;Please note:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;maxDelayInterval  (6/2021):&lt;br&gt;Added due to a recent change to the GTC Tracker&#x27;s behavior in that it now has the potential to send out track&#x27;s less frequently. (Slower moving tracks are sent out less frequently.) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;R1S3_100&#x27;).&lt;br&gt;Format is R&amp;lt;region&amp;gt;S&amp;lt;Tracker Source unit number&amp;gt;_&amp;lt;track id&amp;gt;&lt;br&gt;Example value of R1S3_100 represents Region 1, Tracker Source unit number 3, track id 100.&lt;br&gt;&lt;br&gt;</param>
        /// <param name="expand">Expands data seen by using any combination of &#x27;detail&#x27; or &#x27;sources&#x27;. Eg, &#x27;expand&#x3D;detail,sources&#x27;. (See the above Response Class section, Model breakout for a detailed list of the &#x27;detail&#x27; (TrackGtcDetail) and &#x27;sources&#x27; (TrackGtcSource) data (optional)</param>
        /// <returns>TrackGtcRestDto</returns>
        public TrackGtcRestDto GetGtcTrack (string id, string expand = null)
        {
             ApiResponse<TrackGtcRestDto> localVarResponse = GetGtcTrackWithHttpInfo(id, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get GTC Track Specifies a real-time GTC (Global Track Correlator) track. The caller requests the track of interest via track id, and &#x27;expand&#x27; settings for track fields of interest (none for default).&lt;br&gt;&lt;br&gt;Please note:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;maxDelayInterval  (6/2021):&lt;br&gt;Added due to a recent change to the GTC Tracker&#x27;s behavior in that it now has the potential to send out track&#x27;s less frequently. (Slower moving tracks are sent out less frequently.) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;R1S3_100&#x27;).&lt;br&gt;Format is R&amp;lt;region&amp;gt;S&amp;lt;Tracker Source unit number&amp;gt;_&amp;lt;track id&amp;gt;&lt;br&gt;Example value of R1S3_100 represents Region 1, Tracker Source unit number 3, track id 100.&lt;br&gt;&lt;br&gt;</param>
        /// <param name="expand">Expands data seen by using any combination of &#x27;detail&#x27; or &#x27;sources&#x27;. Eg, &#x27;expand&#x3D;detail,sources&#x27;. (See the above Response Class section, Model breakout for a detailed list of the &#x27;detail&#x27; (TrackGtcDetail) and &#x27;sources&#x27; (TrackGtcSource) data (optional)</param>
        /// <returns>ApiResponse of TrackGtcRestDto</returns>
        public ApiResponse< TrackGtcRestDto > GetGtcTrackWithHttpInfo (string id, string expand = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetGtcTrack");

            var localVarPath = "/gtctracks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGtcTrack", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackGtcRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TrackGtcRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackGtcRestDto)));
        }

        /// <summary>
        /// Get GTC Track Specifies a real-time GTC (Global Track Correlator) track. The caller requests the track of interest via track id, and &#x27;expand&#x27; settings for track fields of interest (none for default).&lt;br&gt;&lt;br&gt;Please note:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;maxDelayInterval  (6/2021):&lt;br&gt;Added due to a recent change to the GTC Tracker&#x27;s behavior in that it now has the potential to send out track&#x27;s less frequently. (Slower moving tracks are sent out less frequently.) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;R1S3_100&#x27;).&lt;br&gt;Format is R&amp;lt;region&amp;gt;S&amp;lt;Tracker Source unit number&amp;gt;_&amp;lt;track id&amp;gt;&lt;br&gt;Example value of R1S3_100 represents Region 1, Tracker Source unit number 3, track id 100.&lt;br&gt;&lt;br&gt;</param>
        /// <param name="expand">Expands data seen by using any combination of &#x27;detail&#x27; or &#x27;sources&#x27;. Eg, &#x27;expand&#x3D;detail,sources&#x27;. (See the above Response Class section, Model breakout for a detailed list of the &#x27;detail&#x27; (TrackGtcDetail) and &#x27;sources&#x27; (TrackGtcSource) data (optional)</param>
        /// <returns>Task of TrackGtcRestDto</returns>
        public async System.Threading.Tasks.Task<TrackGtcRestDto> GetGtcTrackAsync (string id, string expand = null)
        {
             ApiResponse<TrackGtcRestDto> localVarResponse = await GetGtcTrackAsyncWithHttpInfo(id, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get GTC Track Specifies a real-time GTC (Global Track Correlator) track. The caller requests the track of interest via track id, and &#x27;expand&#x27; settings for track fields of interest (none for default).&lt;br&gt;&lt;br&gt;Please note:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;maxDelayInterval  (6/2021):&lt;br&gt;Added due to a recent change to the GTC Tracker&#x27;s behavior in that it now has the potential to send out track&#x27;s less frequently. (Slower moving tracks are sent out less frequently.) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;R1S3_100&#x27;).&lt;br&gt;Format is R&amp;lt;region&amp;gt;S&amp;lt;Tracker Source unit number&amp;gt;_&amp;lt;track id&amp;gt;&lt;br&gt;Example value of R1S3_100 represents Region 1, Tracker Source unit number 3, track id 100.&lt;br&gt;&lt;br&gt;</param>
        /// <param name="expand">Expands data seen by using any combination of &#x27;detail&#x27; or &#x27;sources&#x27;. Eg, &#x27;expand&#x3D;detail,sources&#x27;. (See the above Response Class section, Model breakout for a detailed list of the &#x27;detail&#x27; (TrackGtcDetail) and &#x27;sources&#x27; (TrackGtcSource) data (optional)</param>
        /// <returns>Task of ApiResponse (TrackGtcRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrackGtcRestDto>> GetGtcTrackAsyncWithHttpInfo (string id, string expand = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetGtcTrack");

            var localVarPath = "/gtctracks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGtcTrack", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackGtcRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TrackGtcRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackGtcRestDto)));
        }

        /// <summary>
        /// Get multiple GTC tracks Specifies real-time GTC (Global Track Correlator) tracks. The caller requests the tracks of interest via specifying search criteria (none for all tracks), &#x27;expand&#x27; settings for track fields of interest (none for default), and page settings to specify the page of interest (none for default).&lt;br&gt;&lt;br&gt;This data is available via both REST and WebSockets.&lt;br&gt;&lt;br&gt;Please note:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Multiple query types (see &#x27;Parameter&#x27;) can be applied.&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Links are given as an aid for further API queries.&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;maxDelayInterval  (6/2021):&lt;br&gt;Added due to a recent change to the GTC Tracker&#x27;s behavior in that it now has the potential to send out track&#x27;s less frequently. (Slower moving tracks are sent out less frequently.) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boundingRect">Filters tracks to a bounding rectangular region whose sides parallel the latitude and longitude axes.&lt;br&gt;(Decimal Degrees, North Positive / East Positive)&lt;/br&gt; Format is &amp;lt;upper lat&amp;gt;, &amp;lt;left lon&amp;gt;, &amp;lt;lower lat&amp;gt;, &amp;lt;right lon&amp;gt;&lt;br&gt;Example Value: 33.75,-118.50,33.25,-118.19 (optional)</param>
        /// <param name="expand">Expands data seen by using any combination of &#x27;detail&#x27; or &#x27;sources&#x27;. Eg, &#x27;expand&#x3D;detail,sources&#x27;. (See the above Response Class section, Model breakout for a detailed list of the &#x27;detail&#x27; (TrackGtcDetail) and &#x27;sources&#x27; (TrackGtcSource) data (optional)</param>
        /// <param name="name">Returns tracks that have a complete or partial name match. (optional)</param>
        /// <param name="updateSince">Returns tracks that have been updated since (greater than) a specific time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00Z specifies a year-month-day followed by 24-hour hours:minutes:seconds in GMT time&lt;br&gt;&lt;br&gt;Note that to support usability the pagination query is ignored with this argument; all matched items will be returned. (optional)</param>
        /// <param name="trackSources">Returns tracks which have contributions from the given track sources which are not necessarly the preferred track source. Track sources are put together from a combination of Radar,AIS,Generic,NRT,Pending,Unknown,Other.&lt;br&gt; The 4 acceptable combinations:&lt;br&gt; (1) trackSource:  where the given trackSource contributes,  (2) OR(trackSource1, trackSource2, optional-trackSource3)  where any given trackSource contributes,  (3) AND(trackSource1, trackSource2, optional-trackSource3)  where all given trackSources contribute,  (4) ONLY(trackSource1, optional-trackSource2, optional-trackSource3)  where only (and all of) the given trackSource(s) contribute,  (5) NOT(trackSource1, optional-trackSource2, optional-trackSource3)  where none of the given trackSource(s) contribute.&lt;br&gt; Example 1: Generic - returns those tracks which have a Generic type providing one of the sources&lt;br&gt; Example 2: AND(AIS,Radar) - returns those tracks which have both AIS and Radar providing sources&lt;br&gt; Example 3: ONLY(Radar) - returns those tracks which ONLY have Radar providing the sources (optional)</param>
        /// <param name="preferredTrackSource">Returns tracks based on the &#x27;preferred&#x27; (or &#x27;primary&#x27;) specified track source.  The track source is one of Radar,AIS,Generic,NRT,Pending,Unknown,Other (optional)</param>
        /// <param name="hideSingleLinks">If &#x27;true&#x27;, hide the links for the enclosed single track entries in order to reduce use of the network bandwidth. It defaults to &#x27;false&#x27; (ie, show the links). It is suggested to set this to &#x27;true&#x27; if the links are not referenced. (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>TrackGtcsRestDto</returns>
        public TrackGtcsRestDto GetGtcTracks (string boundingRect = null, string expand = null, string name = null, string updateSince = null, string trackSources = null, string preferredTrackSource = null, bool? hideSingleLinks = null, int? page = null, int? size = null)
        {
             ApiResponse<TrackGtcsRestDto> localVarResponse = GetGtcTracksWithHttpInfo(boundingRect, expand, name, updateSince, trackSources, preferredTrackSource, hideSingleLinks, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get multiple GTC tracks Specifies real-time GTC (Global Track Correlator) tracks. The caller requests the tracks of interest via specifying search criteria (none for all tracks), &#x27;expand&#x27; settings for track fields of interest (none for default), and page settings to specify the page of interest (none for default).&lt;br&gt;&lt;br&gt;This data is available via both REST and WebSockets.&lt;br&gt;&lt;br&gt;Please note:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Multiple query types (see &#x27;Parameter&#x27;) can be applied.&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Links are given as an aid for further API queries.&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;maxDelayInterval  (6/2021):&lt;br&gt;Added due to a recent change to the GTC Tracker&#x27;s behavior in that it now has the potential to send out track&#x27;s less frequently. (Slower moving tracks are sent out less frequently.) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boundingRect">Filters tracks to a bounding rectangular region whose sides parallel the latitude and longitude axes.&lt;br&gt;(Decimal Degrees, North Positive / East Positive)&lt;/br&gt; Format is &amp;lt;upper lat&amp;gt;, &amp;lt;left lon&amp;gt;, &amp;lt;lower lat&amp;gt;, &amp;lt;right lon&amp;gt;&lt;br&gt;Example Value: 33.75,-118.50,33.25,-118.19 (optional)</param>
        /// <param name="expand">Expands data seen by using any combination of &#x27;detail&#x27; or &#x27;sources&#x27;. Eg, &#x27;expand&#x3D;detail,sources&#x27;. (See the above Response Class section, Model breakout for a detailed list of the &#x27;detail&#x27; (TrackGtcDetail) and &#x27;sources&#x27; (TrackGtcSource) data (optional)</param>
        /// <param name="name">Returns tracks that have a complete or partial name match. (optional)</param>
        /// <param name="updateSince">Returns tracks that have been updated since (greater than) a specific time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00Z specifies a year-month-day followed by 24-hour hours:minutes:seconds in GMT time&lt;br&gt;&lt;br&gt;Note that to support usability the pagination query is ignored with this argument; all matched items will be returned. (optional)</param>
        /// <param name="trackSources">Returns tracks which have contributions from the given track sources which are not necessarly the preferred track source. Track sources are put together from a combination of Radar,AIS,Generic,NRT,Pending,Unknown,Other.&lt;br&gt; The 4 acceptable combinations:&lt;br&gt; (1) trackSource:  where the given trackSource contributes,  (2) OR(trackSource1, trackSource2, optional-trackSource3)  where any given trackSource contributes,  (3) AND(trackSource1, trackSource2, optional-trackSource3)  where all given trackSources contribute,  (4) ONLY(trackSource1, optional-trackSource2, optional-trackSource3)  where only (and all of) the given trackSource(s) contribute,  (5) NOT(trackSource1, optional-trackSource2, optional-trackSource3)  where none of the given trackSource(s) contribute.&lt;br&gt; Example 1: Generic - returns those tracks which have a Generic type providing one of the sources&lt;br&gt; Example 2: AND(AIS,Radar) - returns those tracks which have both AIS and Radar providing sources&lt;br&gt; Example 3: ONLY(Radar) - returns those tracks which ONLY have Radar providing the sources (optional)</param>
        /// <param name="preferredTrackSource">Returns tracks based on the &#x27;preferred&#x27; (or &#x27;primary&#x27;) specified track source.  The track source is one of Radar,AIS,Generic,NRT,Pending,Unknown,Other (optional)</param>
        /// <param name="hideSingleLinks">If &#x27;true&#x27;, hide the links for the enclosed single track entries in order to reduce use of the network bandwidth. It defaults to &#x27;false&#x27; (ie, show the links). It is suggested to set this to &#x27;true&#x27; if the links are not referenced. (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>ApiResponse of TrackGtcsRestDto</returns>
        public ApiResponse< TrackGtcsRestDto > GetGtcTracksWithHttpInfo (string boundingRect = null, string expand = null, string name = null, string updateSince = null, string trackSources = null, string preferredTrackSource = null, bool? hideSingleLinks = null, int? page = null, int? size = null)
        {

            var localVarPath = "/gtctracks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boundingRect != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "boundingRect", boundingRect)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (updateSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateSince", updateSince)); // query parameter
            if (trackSources != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "trackSources", trackSources)); // query parameter
            if (preferredTrackSource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "preferredTrackSource", preferredTrackSource)); // query parameter
            if (hideSingleLinks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hideSingleLinks", hideSingleLinks)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGtcTracks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackGtcsRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TrackGtcsRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackGtcsRestDto)));
        }

        /// <summary>
        /// Get multiple GTC tracks Specifies real-time GTC (Global Track Correlator) tracks. The caller requests the tracks of interest via specifying search criteria (none for all tracks), &#x27;expand&#x27; settings for track fields of interest (none for default), and page settings to specify the page of interest (none for default).&lt;br&gt;&lt;br&gt;This data is available via both REST and WebSockets.&lt;br&gt;&lt;br&gt;Please note:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Multiple query types (see &#x27;Parameter&#x27;) can be applied.&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Links are given as an aid for further API queries.&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;maxDelayInterval  (6/2021):&lt;br&gt;Added due to a recent change to the GTC Tracker&#x27;s behavior in that it now has the potential to send out track&#x27;s less frequently. (Slower moving tracks are sent out less frequently.) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boundingRect">Filters tracks to a bounding rectangular region whose sides parallel the latitude and longitude axes.&lt;br&gt;(Decimal Degrees, North Positive / East Positive)&lt;/br&gt; Format is &amp;lt;upper lat&amp;gt;, &amp;lt;left lon&amp;gt;, &amp;lt;lower lat&amp;gt;, &amp;lt;right lon&amp;gt;&lt;br&gt;Example Value: 33.75,-118.50,33.25,-118.19 (optional)</param>
        /// <param name="expand">Expands data seen by using any combination of &#x27;detail&#x27; or &#x27;sources&#x27;. Eg, &#x27;expand&#x3D;detail,sources&#x27;. (See the above Response Class section, Model breakout for a detailed list of the &#x27;detail&#x27; (TrackGtcDetail) and &#x27;sources&#x27; (TrackGtcSource) data (optional)</param>
        /// <param name="name">Returns tracks that have a complete or partial name match. (optional)</param>
        /// <param name="updateSince">Returns tracks that have been updated since (greater than) a specific time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00Z specifies a year-month-day followed by 24-hour hours:minutes:seconds in GMT time&lt;br&gt;&lt;br&gt;Note that to support usability the pagination query is ignored with this argument; all matched items will be returned. (optional)</param>
        /// <param name="trackSources">Returns tracks which have contributions from the given track sources which are not necessarly the preferred track source. Track sources are put together from a combination of Radar,AIS,Generic,NRT,Pending,Unknown,Other.&lt;br&gt; The 4 acceptable combinations:&lt;br&gt; (1) trackSource:  where the given trackSource contributes,  (2) OR(trackSource1, trackSource2, optional-trackSource3)  where any given trackSource contributes,  (3) AND(trackSource1, trackSource2, optional-trackSource3)  where all given trackSources contribute,  (4) ONLY(trackSource1, optional-trackSource2, optional-trackSource3)  where only (and all of) the given trackSource(s) contribute,  (5) NOT(trackSource1, optional-trackSource2, optional-trackSource3)  where none of the given trackSource(s) contribute.&lt;br&gt; Example 1: Generic - returns those tracks which have a Generic type providing one of the sources&lt;br&gt; Example 2: AND(AIS,Radar) - returns those tracks which have both AIS and Radar providing sources&lt;br&gt; Example 3: ONLY(Radar) - returns those tracks which ONLY have Radar providing the sources (optional)</param>
        /// <param name="preferredTrackSource">Returns tracks based on the &#x27;preferred&#x27; (or &#x27;primary&#x27;) specified track source.  The track source is one of Radar,AIS,Generic,NRT,Pending,Unknown,Other (optional)</param>
        /// <param name="hideSingleLinks">If &#x27;true&#x27;, hide the links for the enclosed single track entries in order to reduce use of the network bandwidth. It defaults to &#x27;false&#x27; (ie, show the links). It is suggested to set this to &#x27;true&#x27; if the links are not referenced. (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of TrackGtcsRestDto</returns>
        public async System.Threading.Tasks.Task<TrackGtcsRestDto> GetGtcTracksAsync (string boundingRect = null, string expand = null, string name = null, string updateSince = null, string trackSources = null, string preferredTrackSource = null, bool? hideSingleLinks = null, int? page = null, int? size = null)
        {
             ApiResponse<TrackGtcsRestDto> localVarResponse = await GetGtcTracksAsyncWithHttpInfo(boundingRect, expand, name, updateSince, trackSources, preferredTrackSource, hideSingleLinks, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get multiple GTC tracks Specifies real-time GTC (Global Track Correlator) tracks. The caller requests the tracks of interest via specifying search criteria (none for all tracks), &#x27;expand&#x27; settings for track fields of interest (none for default), and page settings to specify the page of interest (none for default).&lt;br&gt;&lt;br&gt;This data is available via both REST and WebSockets.&lt;br&gt;&lt;br&gt;Please note:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Multiple query types (see &#x27;Parameter&#x27;) can be applied.&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Links are given as an aid for further API queries.&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;maxDelayInterval  (6/2021):&lt;br&gt;Added due to a recent change to the GTC Tracker&#x27;s behavior in that it now has the potential to send out track&#x27;s less frequently. (Slower moving tracks are sent out less frequently.) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boundingRect">Filters tracks to a bounding rectangular region whose sides parallel the latitude and longitude axes.&lt;br&gt;(Decimal Degrees, North Positive / East Positive)&lt;/br&gt; Format is &amp;lt;upper lat&amp;gt;, &amp;lt;left lon&amp;gt;, &amp;lt;lower lat&amp;gt;, &amp;lt;right lon&amp;gt;&lt;br&gt;Example Value: 33.75,-118.50,33.25,-118.19 (optional)</param>
        /// <param name="expand">Expands data seen by using any combination of &#x27;detail&#x27; or &#x27;sources&#x27;. Eg, &#x27;expand&#x3D;detail,sources&#x27;. (See the above Response Class section, Model breakout for a detailed list of the &#x27;detail&#x27; (TrackGtcDetail) and &#x27;sources&#x27; (TrackGtcSource) data (optional)</param>
        /// <param name="name">Returns tracks that have a complete or partial name match. (optional)</param>
        /// <param name="updateSince">Returns tracks that have been updated since (greater than) a specific time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00Z specifies a year-month-day followed by 24-hour hours:minutes:seconds in GMT time&lt;br&gt;&lt;br&gt;Note that to support usability the pagination query is ignored with this argument; all matched items will be returned. (optional)</param>
        /// <param name="trackSources">Returns tracks which have contributions from the given track sources which are not necessarly the preferred track source. Track sources are put together from a combination of Radar,AIS,Generic,NRT,Pending,Unknown,Other.&lt;br&gt; The 4 acceptable combinations:&lt;br&gt; (1) trackSource:  where the given trackSource contributes,  (2) OR(trackSource1, trackSource2, optional-trackSource3)  where any given trackSource contributes,  (3) AND(trackSource1, trackSource2, optional-trackSource3)  where all given trackSources contribute,  (4) ONLY(trackSource1, optional-trackSource2, optional-trackSource3)  where only (and all of) the given trackSource(s) contribute,  (5) NOT(trackSource1, optional-trackSource2, optional-trackSource3)  where none of the given trackSource(s) contribute.&lt;br&gt; Example 1: Generic - returns those tracks which have a Generic type providing one of the sources&lt;br&gt; Example 2: AND(AIS,Radar) - returns those tracks which have both AIS and Radar providing sources&lt;br&gt; Example 3: ONLY(Radar) - returns those tracks which ONLY have Radar providing the sources (optional)</param>
        /// <param name="preferredTrackSource">Returns tracks based on the &#x27;preferred&#x27; (or &#x27;primary&#x27;) specified track source.  The track source is one of Radar,AIS,Generic,NRT,Pending,Unknown,Other (optional)</param>
        /// <param name="hideSingleLinks">If &#x27;true&#x27;, hide the links for the enclosed single track entries in order to reduce use of the network bandwidth. It defaults to &#x27;false&#x27; (ie, show the links). It is suggested to set this to &#x27;true&#x27; if the links are not referenced. (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (TrackGtcsRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrackGtcsRestDto>> GetGtcTracksAsyncWithHttpInfo (string boundingRect = null, string expand = null, string name = null, string updateSince = null, string trackSources = null, string preferredTrackSource = null, bool? hideSingleLinks = null, int? page = null, int? size = null)
        {

            var localVarPath = "/gtctracks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boundingRect != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "boundingRect", boundingRect)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (updateSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateSince", updateSince)); // query parameter
            if (trackSources != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "trackSources", trackSources)); // query parameter
            if (preferredTrackSource != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "preferredTrackSource", preferredTrackSource)); // query parameter
            if (hideSingleLinks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hideSingleLinks", hideSingleLinks)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGtcTracks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackGtcsRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TrackGtcsRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackGtcsRestDto)));
        }

    }
}
