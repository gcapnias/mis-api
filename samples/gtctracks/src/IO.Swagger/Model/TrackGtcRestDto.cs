/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Real-time gtc track object
    /// </summary>
    [DataContract]
        public partial class TrackGtcRestDto :  IEquatable<TrackGtcRestDto>, IValidatableObject
    {
        /// <summary>
        /// Affiliation of this track (Not shown if &#x27;Unknown&#x27;) {Source AIS Transponder}
        /// </summary>
        /// <value>Affiliation of this track (Not shown if &#x27;Unknown&#x27;) {Source AIS Transponder}</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum AffiliationEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,
            /// <summary>
            /// Enum Friendly for value: Friendly
            /// </summary>
            [EnumMember(Value = "Friendly")]
            Friendly = 2,
            /// <summary>
            /// Enum Hostile for value: Hostile
            /// </summary>
            [EnumMember(Value = "Hostile")]
            Hostile = 3,
            /// <summary>
            /// Enum Neutral for value: Neutral
            /// </summary>
            [EnumMember(Value = "Neutral")]
            Neutral = 4,
            /// <summary>
            /// Enum Ownship for value: Ownship
            /// </summary>
            [EnumMember(Value = "Ownship")]
            Ownship = 5,
            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending = 6,
            /// <summary>
            /// Enum FriendlyAssumed for value: FriendlyAssumed
            /// </summary>
            [EnumMember(Value = "FriendlyAssumed")]
            FriendlyAssumed = 7,
            /// <summary>
            /// Enum HostileSuspected for value: HostileSuspected
            /// </summary>
            [EnumMember(Value = "HostileSuspected")]
            HostileSuspected = 8,
            /// <summary>
            /// Enum HostileJoker for value: HostileJoker
            /// </summary>
            [EnumMember(Value = "HostileJoker")]
            HostileJoker = 9,
            /// <summary>
            /// Enum HostileFaker for value: HostileFaker
            /// </summary>
            [EnumMember(Value = "HostileFaker")]
            HostileFaker = 10,
            /// <summary>
            /// Enum TrackOfInterest for value: TrackOfInterest
            /// </summary>
            [EnumMember(Value = "TrackOfInterest")]
            TrackOfInterest = 11        }
        /// <summary>
        /// Affiliation of this track (Not shown if &#x27;Unknown&#x27;) {Source AIS Transponder}
        /// </summary>
        /// <value>Affiliation of this track (Not shown if &#x27;Unknown&#x27;) {Source AIS Transponder}</value>
        [DataMember(Name="affiliation", EmitDefaultValue=false)]
        public AffiliationEnum? Affiliation { get; set; }
        /// <summary>
        /// Current boarding status of this track, used for Boarding Operations. (Not shown for &#x27;NoInterest&#x27; boarding status)
        /// </summary>
        /// <value>Current boarding status of this track, used for Boarding Operations. (Not shown for &#x27;NoInterest&#x27; boarding status)</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum BoardingEnum
        {
            /// <summary>
            /// Enum NoInterest for value: NoInterest
            /// </summary>
            [EnumMember(Value = "NoInterest")]
            NoInterest = 1,
            /// <summary>
            /// Enum Interest for value: Interest
            /// </summary>
            [EnumMember(Value = "Interest")]
            Interest = 2,
            /// <summary>
            /// Enum OnBoard for value: OnBoard
            /// </summary>
            [EnumMember(Value = "OnBoard")]
            OnBoard = 3,
            /// <summary>
            /// Enum Boarded for value: Boarded
            /// </summary>
            [EnumMember(Value = "Boarded")]
            Boarded = 4        }
        /// <summary>
        /// Current boarding status of this track, used for Boarding Operations. (Not shown for &#x27;NoInterest&#x27; boarding status)
        /// </summary>
        /// <value>Current boarding status of this track, used for Boarding Operations. (Not shown for &#x27;NoInterest&#x27; boarding status)</value>
        [DataMember(Name="boarding", EmitDefaultValue=false)]
        public BoardingEnum? Boarding { get; set; }
        /// <summary>
        /// Classification of this track (Not shown if &#x27;Unknown&#x27;) {Source AIS Transponder}
        /// </summary>
        /// <value>Classification of this track (Not shown if &#x27;Unknown&#x27;) {Source AIS Transponder}</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ClassificationEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,
            /// <summary>
            /// Enum SurfaceUnknown for value: SurfaceUnknown
            /// </summary>
            [EnumMember(Value = "SurfaceUnknown")]
            SurfaceUnknown = 2,
            /// <summary>
            /// Enum Merchant for value: Merchant
            /// </summary>
            [EnumMember(Value = "Merchant")]
            Merchant = 3,
            /// <summary>
            /// Enum Cargo for value: Cargo
            /// </summary>
            [EnumMember(Value = "Cargo")]
            Cargo = 4,
            /// <summary>
            /// Enum SearchCenter for value: SearchCenter
            /// </summary>
            [EnumMember(Value = "SearchCenter")]
            SearchCenter = 5,
            /// <summary>
            /// Enum Navy for value: Navy
            /// </summary>
            [EnumMember(Value = "Navy")]
            Navy = 6,
            /// <summary>
            /// Enum Tug for value: Tug
            /// </summary>
            [EnumMember(Value = "Tug")]
            Tug = 7,
            /// <summary>
            /// Enum Ferry for value: Ferry
            /// </summary>
            [EnumMember(Value = "Ferry")]
            Ferry = 8,
            /// <summary>
            /// Enum Passenger for value: Passenger
            /// </summary>
            [EnumMember(Value = "Passenger")]
            Passenger = 9,
            /// <summary>
            /// Enum CoastGuard for value: CoastGuard
            /// </summary>
            [EnumMember(Value = "CoastGuard")]
            CoastGuard = 10,
            /// <summary>
            /// Enum Hazmat for value: Hazmat
            /// </summary>
            [EnumMember(Value = "Hazmat")]
            Hazmat = 11,
            /// <summary>
            /// Enum Towing for value: Towing
            /// </summary>
            [EnumMember(Value = "Towing")]
            Towing = 12,
            /// <summary>
            /// Enum Fishing for value: Fishing
            /// </summary>
            [EnumMember(Value = "Fishing")]
            Fishing = 13,
            /// <summary>
            /// Enum Drifter for value: Drifter
            /// </summary>
            [EnumMember(Value = "Drifter")]
            Drifter = 14,
            /// <summary>
            /// Enum Dredge for value: Dredge
            /// </summary>
            [EnumMember(Value = "Dredge")]
            Dredge = 15,
            /// <summary>
            /// Enum Trawler for value: Trawler
            /// </summary>
            [EnumMember(Value = "Trawler")]
            Trawler = 16,
            /// <summary>
            /// Enum Leisure for value: Leisure
            /// </summary>
            [EnumMember(Value = "Leisure")]
            Leisure = 17,
            /// <summary>
            /// Enum Hovercraft for value: Hovercraft
            /// </summary>
            [EnumMember(Value = "Hovercraft")]
            Hovercraft = 18,
            /// <summary>
            /// Enum MarineLife for value: MarineLife
            /// </summary>
            [EnumMember(Value = "MarineLife")]
            MarineLife = 19,
            /// <summary>
            /// Enum Iceberg for value: Iceberg
            /// </summary>
            [EnumMember(Value = "Iceberg")]
            Iceberg = 20,
            /// <summary>
            /// Enum DitchedAircraft for value: DitchedAircraft
            /// </summary>
            [EnumMember(Value = "DitchedAircraft")]
            DitchedAircraft = 21,
            /// <summary>
            /// Enum ManInWater for value: ManInWater
            /// </summary>
            [EnumMember(Value = "ManInWater")]
            ManInWater = 22,
            /// <summary>
            /// Enum DistressedVessel for value: DistressedVessel
            /// </summary>
            [EnumMember(Value = "DistressedVessel")]
            DistressedVessel = 23,
            /// <summary>
            /// Enum OilPlatform for value: OilPlatform
            /// </summary>
            [EnumMember(Value = "OilPlatform")]
            OilPlatform = 24,
            /// <summary>
            /// Enum AirHelo for value: AirHelo
            /// </summary>
            [EnumMember(Value = "AirHelo")]
            AirHelo = 25,
            /// <summary>
            /// Enum AirFixedWing for value: AirFixedWing
            /// </summary>
            [EnumMember(Value = "AirFixedWing")]
            AirFixedWing = 26,
            /// <summary>
            /// Enum SubsurfaceUnknown for value: SubsurfaceUnknown
            /// </summary>
            [EnumMember(Value = "SubsurfaceUnknown")]
            SubsurfaceUnknown = 27,
            /// <summary>
            /// Enum AirUnknown for value: AirUnknown
            /// </summary>
            [EnumMember(Value = "AirUnknown")]
            AirUnknown = 28,
            /// <summary>
            /// Enum Ownship for value: Ownship
            /// </summary>
            [EnumMember(Value = "Ownship")]
            Ownship = 29,
            /// <summary>
            /// Enum Land for value: Land
            /// </summary>
            [EnumMember(Value = "Land")]
            Land = 30,
            /// <summary>
            /// Enum Buoy for value: Buoy
            /// </summary>
            [EnumMember(Value = "Buoy")]
            Buoy = 31,
            /// <summary>
            /// Enum AirUAV for value: AirUAV
            /// </summary>
            [EnumMember(Value = "AirUAV")]
            AirUAV = 32,
            /// <summary>
            /// Enum RigidHullInflatable for value: RigidHullInflatable
            /// </summary>
            [EnumMember(Value = "RigidHullInflatable")]
            RigidHullInflatable = 33,
            /// <summary>
            /// Enum Speedboat for value: Speedboat
            /// </summary>
            [EnumMember(Value = "Speedboat")]
            Speedboat = 34,
            /// <summary>
            /// Enum OilTanker for value: OilTanker
            /// </summary>
            [EnumMember(Value = "OilTanker")]
            OilTanker = 35        }
        /// <summary>
        /// Classification of this track (Not shown if &#x27;Unknown&#x27;) {Source AIS Transponder}
        /// </summary>
        /// <value>Classification of this track (Not shown if &#x27;Unknown&#x27;) {Source AIS Transponder}</value>
        [DataMember(Name="classification", EmitDefaultValue=false)]
        public ClassificationEnum? Classification { get; set; }
        /// <summary>
        /// current state of this track (&#x27;Dropped&#x27; means track has either been specifically dropped or has not been updated by the tracker and will be removed from the system). Not shown if &#x27;Steady&#x27;
        /// </summary>
        /// <value>current state of this track (&#x27;Dropped&#x27; means track has either been specifically dropped or has not been updated by the tracker and will be removed from the system). Not shown if &#x27;Steady&#x27;</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StateEnum
        {
            /// <summary>
            /// Enum NonSteady for value: NonSteady
            /// </summary>
            [EnumMember(Value = "NonSteady")]
            NonSteady = 1,
            /// <summary>
            /// Enum Steady for value: Steady
            /// </summary>
            [EnumMember(Value = "Steady")]
            Steady = 2,
            /// <summary>
            /// Enum SteadyCoasted for value: SteadyCoasted
            /// </summary>
            [EnumMember(Value = "SteadyCoasted")]
            SteadyCoasted = 3,
            /// <summary>
            /// Enum Parked for value: Parked
            /// </summary>
            [EnumMember(Value = "Parked")]
            Parked = 4,
            /// <summary>
            /// Enum Dropped for value: Dropped
            /// </summary>
            [EnumMember(Value = "Dropped")]
            Dropped = 5        }
        /// <summary>
        /// current state of this track (&#x27;Dropped&#x27; means track has either been specifically dropped or has not been updated by the tracker and will be removed from the system). Not shown if &#x27;Steady&#x27;
        /// </summary>
        /// <value>current state of this track (&#x27;Dropped&#x27; means track has either been specifically dropped or has not been updated by the tracker and will be removed from the system). Not shown if &#x27;Steady&#x27;</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackGtcRestDto" /> class.
        /// </summary>
        /// <param name="affiliation">Affiliation of this track (Not shown if &#x27;Unknown&#x27;) {Source AIS Transponder}.</param>
        /// <param name="aisClass">Class of AIS. &#x27;B&#x27; for Class B, not shown for class A {source AIS Transponder}.</param>
        /// <param name="aisHeading">Heading of this track (degrees true) {Source AIS Transponder}.</param>
        /// <param name="aisIndicators">AIS indicator flags. Not shown if none.{source AIS Transponder}.</param>
        /// <param name="aisNavStatus">aisNavStatus.</param>
        /// <param name="boarding">Current boarding status of this track, used for Boarding Operations. (Not shown for &#x27;NoInterest&#x27; boarding status).</param>
        /// <param name="classification">Classification of this track (Not shown if &#x27;Unknown&#x27;) {Source AIS Transponder}.</param>
        /// <param name="detail">detail.</param>
        /// <param name="kinematics">kinematics.</param>
        /// <param name="links">*method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria.</param>
        /// <param name="maxDelayInterval">Maximum delayed interval (in seconds) that a track can be reported from the Tracker. The delay interval of tracks will vary from no delay (if no delay this field is absent) to this given reported interval. (The delay is based on speed; the slower the speed the greater the delay.) The track update time field matches the reported time even if the track is delayed (and the &#x27;updateSince&#x27; query results work accordingly.) This is reported at the top-level enclosing object; ie, it is not reported for each single track if it&#x27;s a multi-track lookup.</param>
        /// <param name="name">name of the track as set by AIS or user (required).</param>
        /// <param name="posUncertainty">area of positional uncertainty around this track (meters) (required).</param>
        /// <param name="position">position (required).</param>
        /// <param name="preferredTrackSource">preferredTrackSource.</param>
        /// <param name="quality">[0-15]: quality of this track (required).</param>
        /// <param name="sources">ranked order of the various sources available to the Track Correlator tracker for this track. Available if the expand parameter includes &#x27;sources&#x27;.</param>
        /// <param name="state">current state of this track (&#x27;Dropped&#x27; means track has either been specifically dropped or has not been updated by the tracker and will be removed from the system). Not shown if &#x27;Steady&#x27; (required).</param>
        /// <param name="time">time this track was updated by the Tracker (required).</param>
        /// <param name="trackIDsResetTime">this value is used to communicate if the Track Ids are reset and no longer related to their past Ids. This value gets changed if the Tracker is restarted or all tracks are dropped. Compare this with the previous track id reset time to know if the IDs represent the same track. This is reported at the top-level enclosing object; ie, it is not reported for each single track if it&#x27;s a multi-track lookup.</param>
        /// <param name="trackId">the track id (eg &#x27;R1S3_17).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Represents a Global Track Correlator track starting with &#x27;R&#x27; for region and then the region number,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;followed by &#x27;S&#x27; for source and then the &#x27;TSI&#x27; (Track Source Id),&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;followed by &#x27;_&#x27; and then the id within this Region and Source.</param>
        /// <param name="turnRate">[-12.0 to 12.0]: Turn rate of this track (degrees per second) {Source AIS Transponder or Radar}.</param>
        /// <param name="updateDelta">[0 to 255]: delta time since the track was last seen (seconds)  {Source AIS Transponder or Radar}.</param>
        public TrackGtcRestDto(AffiliationEnum? affiliation = default(AffiliationEnum?), string aisClass = default(string), float? aisHeading = default(float?), List<string> aisIndicators = default(List<string>), AisNavStatusRestDto aisNavStatus = default(AisNavStatusRestDto), BoardingEnum? boarding = default(BoardingEnum?), ClassificationEnum? classification = default(ClassificationEnum?), TrackGtcDetailRestDto detail = default(TrackGtcDetailRestDto), KinematicsRestDto kinematics = default(KinematicsRestDto), List<Link> links = default(List<Link>), int? maxDelayInterval = default(int?), string name = default(string), int? posUncertainty = default(int?), GeoPosRestDto position = default(GeoPosRestDto), TrackGtcSourceRestDto preferredTrackSource = default(TrackGtcSourceRestDto), byte[] quality = default(byte[]), List<TrackGtcSourceDataRestDto> sources = default(List<TrackGtcSourceDataRestDto>), StateEnum state = default(StateEnum), string time = default(string), int? trackIDsResetTime = default(int?), string trackId = default(string), float? turnRate = default(float?), int? updateDelta = default(int?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for TrackGtcRestDto and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "posUncertainty" is required (not null)
            if (posUncertainty == null)
            {
                throw new InvalidDataException("posUncertainty is a required property for TrackGtcRestDto and cannot be null");
            }
            else
            {
                this.PosUncertainty = posUncertainty;
            }
            // to ensure "position" is required (not null)
            if (position == null)
            {
                throw new InvalidDataException("position is a required property for TrackGtcRestDto and cannot be null");
            }
            else
            {
                this.Position = position;
            }
            // to ensure "quality" is required (not null)
            if (quality == null)
            {
                throw new InvalidDataException("quality is a required property for TrackGtcRestDto and cannot be null");
            }
            else
            {
                this.Quality = quality;
            }
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new InvalidDataException("state is a required property for TrackGtcRestDto and cannot be null");
            }
            else
            {
                this.State = state;
            }
            // to ensure "time" is required (not null)
            if (time == null)
            {
                throw new InvalidDataException("time is a required property for TrackGtcRestDto and cannot be null");
            }
            else
            {
                this.Time = time;
            }
            this.Affiliation = affiliation;
            this.AisClass = aisClass;
            this.AisHeading = aisHeading;
            this.AisIndicators = aisIndicators;
            this.AisNavStatus = aisNavStatus;
            this.Boarding = boarding;
            this.Classification = classification;
            this.Detail = detail;
            this.Kinematics = kinematics;
            this.Links = links;
            this.MaxDelayInterval = maxDelayInterval;
            this.PreferredTrackSource = preferredTrackSource;
            this.Sources = sources;
            this.TrackIDsResetTime = trackIDsResetTime;
            this.TrackId = trackId;
            this.TurnRate = turnRate;
            this.UpdateDelta = updateDelta;
        }
        

        /// <summary>
        /// Class of AIS. &#x27;B&#x27; for Class B, not shown for class A {source AIS Transponder}
        /// </summary>
        /// <value>Class of AIS. &#x27;B&#x27; for Class B, not shown for class A {source AIS Transponder}</value>
        [DataMember(Name="aisClass", EmitDefaultValue=false)]
        public string AisClass { get; set; }

        /// <summary>
        /// Heading of this track (degrees true) {Source AIS Transponder}
        /// </summary>
        /// <value>Heading of this track (degrees true) {Source AIS Transponder}</value>
        [DataMember(Name="aisHeading", EmitDefaultValue=false)]
        public float? AisHeading { get; set; }

        /// <summary>
        /// AIS indicator flags. Not shown if none.{source AIS Transponder}
        /// </summary>
        /// <value>AIS indicator flags. Not shown if none.{source AIS Transponder}</value>
        [DataMember(Name="aisIndicators", EmitDefaultValue=false)]
        public List<string> AisIndicators { get; set; }

        /// <summary>
        /// Gets or Sets AisNavStatus
        /// </summary>
        [DataMember(Name="aisNavStatus", EmitDefaultValue=false)]
        public AisNavStatusRestDto AisNavStatus { get; set; }



        /// <summary>
        /// Gets or Sets Detail
        /// </summary>
        [DataMember(Name="detail", EmitDefaultValue=false)]
        public TrackGtcDetailRestDto Detail { get; set; }

        /// <summary>
        /// Gets or Sets Kinematics
        /// </summary>
        [DataMember(Name="kinematics", EmitDefaultValue=false)]
        public KinematicsRestDto Kinematics { get; set; }

        /// <summary>
        /// *method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria
        /// </summary>
        /// <value>*method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria</value>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Maximum delayed interval (in seconds) that a track can be reported from the Tracker. The delay interval of tracks will vary from no delay (if no delay this field is absent) to this given reported interval. (The delay is based on speed; the slower the speed the greater the delay.) The track update time field matches the reported time even if the track is delayed (and the &#x27;updateSince&#x27; query results work accordingly.) This is reported at the top-level enclosing object; ie, it is not reported for each single track if it&#x27;s a multi-track lookup
        /// </summary>
        /// <value>Maximum delayed interval (in seconds) that a track can be reported from the Tracker. The delay interval of tracks will vary from no delay (if no delay this field is absent) to this given reported interval. (The delay is based on speed; the slower the speed the greater the delay.) The track update time field matches the reported time even if the track is delayed (and the &#x27;updateSince&#x27; query results work accordingly.) This is reported at the top-level enclosing object; ie, it is not reported for each single track if it&#x27;s a multi-track lookup</value>
        [DataMember(Name="maxDelayInterval", EmitDefaultValue=false)]
        public int? MaxDelayInterval { get; set; }

        /// <summary>
        /// name of the track as set by AIS or user
        /// </summary>
        /// <value>name of the track as set by AIS or user</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// area of positional uncertainty around this track (meters)
        /// </summary>
        /// <value>area of positional uncertainty around this track (meters)</value>
        [DataMember(Name="posUncertainty", EmitDefaultValue=false)]
        public int? PosUncertainty { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public GeoPosRestDto Position { get; set; }

        /// <summary>
        /// Gets or Sets PreferredTrackSource
        /// </summary>
        [DataMember(Name="preferredTrackSource", EmitDefaultValue=false)]
        public TrackGtcSourceRestDto PreferredTrackSource { get; set; }

        /// <summary>
        /// [0-15]: quality of this track
        /// </summary>
        /// <value>[0-15]: quality of this track</value>
        [DataMember(Name="quality", EmitDefaultValue=false)]
        public byte[] Quality { get; set; }

        /// <summary>
        /// ranked order of the various sources available to the Track Correlator tracker for this track. Available if the expand parameter includes &#x27;sources&#x27;
        /// </summary>
        /// <value>ranked order of the various sources available to the Track Correlator tracker for this track. Available if the expand parameter includes &#x27;sources&#x27;</value>
        [DataMember(Name="sources", EmitDefaultValue=false)]
        public List<TrackGtcSourceDataRestDto> Sources { get; set; }


        /// <summary>
        /// time this track was updated by the Tracker
        /// </summary>
        /// <value>time this track was updated by the Tracker</value>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public string Time { get; set; }

        /// <summary>
        /// this value is used to communicate if the Track Ids are reset and no longer related to their past Ids. This value gets changed if the Tracker is restarted or all tracks are dropped. Compare this with the previous track id reset time to know if the IDs represent the same track. This is reported at the top-level enclosing object; ie, it is not reported for each single track if it&#x27;s a multi-track lookup
        /// </summary>
        /// <value>this value is used to communicate if the Track Ids are reset and no longer related to their past Ids. This value gets changed if the Tracker is restarted or all tracks are dropped. Compare this with the previous track id reset time to know if the IDs represent the same track. This is reported at the top-level enclosing object; ie, it is not reported for each single track if it&#x27;s a multi-track lookup</value>
        [DataMember(Name="trackIDsResetTime", EmitDefaultValue=false)]
        public int? TrackIDsResetTime { get; set; }

        /// <summary>
        /// the track id (eg &#x27;R1S3_17).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Represents a Global Track Correlator track starting with &#x27;R&#x27; for region and then the region number,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;followed by &#x27;S&#x27; for source and then the &#x27;TSI&#x27; (Track Source Id),&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;followed by &#x27;_&#x27; and then the id within this Region and Source
        /// </summary>
        /// <value>the track id (eg &#x27;R1S3_17).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Represents a Global Track Correlator track starting with &#x27;R&#x27; for region and then the region number,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;followed by &#x27;S&#x27; for source and then the &#x27;TSI&#x27; (Track Source Id),&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;followed by &#x27;_&#x27; and then the id within this Region and Source</value>
        [DataMember(Name="trackId", EmitDefaultValue=false)]
        public string TrackId { get; set; }

        /// <summary>
        /// [-12.0 to 12.0]: Turn rate of this track (degrees per second) {Source AIS Transponder or Radar}
        /// </summary>
        /// <value>[-12.0 to 12.0]: Turn rate of this track (degrees per second) {Source AIS Transponder or Radar}</value>
        [DataMember(Name="turnRate", EmitDefaultValue=false)]
        public float? TurnRate { get; set; }

        /// <summary>
        /// [0 to 255]: delta time since the track was last seen (seconds)  {Source AIS Transponder or Radar}
        /// </summary>
        /// <value>[0 to 255]: delta time since the track was last seen (seconds)  {Source AIS Transponder or Radar}</value>
        [DataMember(Name="updateDelta", EmitDefaultValue=false)]
        public int? UpdateDelta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrackGtcRestDto {\n");
            sb.Append("  Affiliation: ").Append(Affiliation).Append("\n");
            sb.Append("  AisClass: ").Append(AisClass).Append("\n");
            sb.Append("  AisHeading: ").Append(AisHeading).Append("\n");
            sb.Append("  AisIndicators: ").Append(AisIndicators).Append("\n");
            sb.Append("  AisNavStatus: ").Append(AisNavStatus).Append("\n");
            sb.Append("  Boarding: ").Append(Boarding).Append("\n");
            sb.Append("  Classification: ").Append(Classification).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("  Kinematics: ").Append(Kinematics).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  MaxDelayInterval: ").Append(MaxDelayInterval).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PosUncertainty: ").Append(PosUncertainty).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  PreferredTrackSource: ").Append(PreferredTrackSource).Append("\n");
            sb.Append("  Quality: ").Append(Quality).Append("\n");
            sb.Append("  Sources: ").Append(Sources).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  TrackIDsResetTime: ").Append(TrackIDsResetTime).Append("\n");
            sb.Append("  TrackId: ").Append(TrackId).Append("\n");
            sb.Append("  TurnRate: ").Append(TurnRate).Append("\n");
            sb.Append("  UpdateDelta: ").Append(UpdateDelta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrackGtcRestDto);
        }

        /// <summary>
        /// Returns true if TrackGtcRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of TrackGtcRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrackGtcRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Affiliation == input.Affiliation ||
                    (this.Affiliation != null &&
                    this.Affiliation.Equals(input.Affiliation))
                ) && 
                (
                    this.AisClass == input.AisClass ||
                    (this.AisClass != null &&
                    this.AisClass.Equals(input.AisClass))
                ) && 
                (
                    this.AisHeading == input.AisHeading ||
                    (this.AisHeading != null &&
                    this.AisHeading.Equals(input.AisHeading))
                ) && 
                (
                    this.AisIndicators == input.AisIndicators ||
                    this.AisIndicators != null &&
                    input.AisIndicators != null &&
                    this.AisIndicators.SequenceEqual(input.AisIndicators)
                ) && 
                (
                    this.AisNavStatus == input.AisNavStatus ||
                    (this.AisNavStatus != null &&
                    this.AisNavStatus.Equals(input.AisNavStatus))
                ) && 
                (
                    this.Boarding == input.Boarding ||
                    (this.Boarding != null &&
                    this.Boarding.Equals(input.Boarding))
                ) && 
                (
                    this.Classification == input.Classification ||
                    (this.Classification != null &&
                    this.Classification.Equals(input.Classification))
                ) && 
                (
                    this.Detail == input.Detail ||
                    (this.Detail != null &&
                    this.Detail.Equals(input.Detail))
                ) && 
                (
                    this.Kinematics == input.Kinematics ||
                    (this.Kinematics != null &&
                    this.Kinematics.Equals(input.Kinematics))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.MaxDelayInterval == input.MaxDelayInterval ||
                    (this.MaxDelayInterval != null &&
                    this.MaxDelayInterval.Equals(input.MaxDelayInterval))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PosUncertainty == input.PosUncertainty ||
                    (this.PosUncertainty != null &&
                    this.PosUncertainty.Equals(input.PosUncertainty))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.PreferredTrackSource == input.PreferredTrackSource ||
                    (this.PreferredTrackSource != null &&
                    this.PreferredTrackSource.Equals(input.PreferredTrackSource))
                ) && 
                (
                    this.Quality == input.Quality ||
                    (this.Quality != null &&
                    this.Quality.Equals(input.Quality))
                ) && 
                (
                    this.Sources == input.Sources ||
                    this.Sources != null &&
                    input.Sources != null &&
                    this.Sources.SequenceEqual(input.Sources)
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.TrackIDsResetTime == input.TrackIDsResetTime ||
                    (this.TrackIDsResetTime != null &&
                    this.TrackIDsResetTime.Equals(input.TrackIDsResetTime))
                ) && 
                (
                    this.TrackId == input.TrackId ||
                    (this.TrackId != null &&
                    this.TrackId.Equals(input.TrackId))
                ) && 
                (
                    this.TurnRate == input.TurnRate ||
                    (this.TurnRate != null &&
                    this.TurnRate.Equals(input.TurnRate))
                ) && 
                (
                    this.UpdateDelta == input.UpdateDelta ||
                    (this.UpdateDelta != null &&
                    this.UpdateDelta.Equals(input.UpdateDelta))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Affiliation != null)
                    hashCode = hashCode * 59 + this.Affiliation.GetHashCode();
                if (this.AisClass != null)
                    hashCode = hashCode * 59 + this.AisClass.GetHashCode();
                if (this.AisHeading != null)
                    hashCode = hashCode * 59 + this.AisHeading.GetHashCode();
                if (this.AisIndicators != null)
                    hashCode = hashCode * 59 + this.AisIndicators.GetHashCode();
                if (this.AisNavStatus != null)
                    hashCode = hashCode * 59 + this.AisNavStatus.GetHashCode();
                if (this.Boarding != null)
                    hashCode = hashCode * 59 + this.Boarding.GetHashCode();
                if (this.Classification != null)
                    hashCode = hashCode * 59 + this.Classification.GetHashCode();
                if (this.Detail != null)
                    hashCode = hashCode * 59 + this.Detail.GetHashCode();
                if (this.Kinematics != null)
                    hashCode = hashCode * 59 + this.Kinematics.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.MaxDelayInterval != null)
                    hashCode = hashCode * 59 + this.MaxDelayInterval.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PosUncertainty != null)
                    hashCode = hashCode * 59 + this.PosUncertainty.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.PreferredTrackSource != null)
                    hashCode = hashCode * 59 + this.PreferredTrackSource.GetHashCode();
                if (this.Quality != null)
                    hashCode = hashCode * 59 + this.Quality.GetHashCode();
                if (this.Sources != null)
                    hashCode = hashCode * 59 + this.Sources.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                if (this.TrackIDsResetTime != null)
                    hashCode = hashCode * 59 + this.TrackIDsResetTime.GetHashCode();
                if (this.TrackId != null)
                    hashCode = hashCode * 59 + this.TrackId.GetHashCode();
                if (this.TurnRate != null)
                    hashCode = hashCode * 59 + this.TurnRate.GetHashCode();
                if (this.UpdateDelta != null)
                    hashCode = hashCode * 59 + this.UpdateDelta.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
