/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TrackGtcSourceDataRestDto
    /// </summary>
    [DataContract]
        public partial class TrackGtcSourceDataRestDto :  IEquatable<TrackGtcSourceDataRestDto>, IValidatableObject
    {
        /// <summary>
        /// Affiliation of this track (Not shown if &#x27;Unknown&#x27;)
        /// </summary>
        /// <value>Affiliation of this track (Not shown if &#x27;Unknown&#x27;)</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum AffiliationEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,
            /// <summary>
            /// Enum Friendly for value: Friendly
            /// </summary>
            [EnumMember(Value = "Friendly")]
            Friendly = 2,
            /// <summary>
            /// Enum Hostile for value: Hostile
            /// </summary>
            [EnumMember(Value = "Hostile")]
            Hostile = 3,
            /// <summary>
            /// Enum Neutral for value: Neutral
            /// </summary>
            [EnumMember(Value = "Neutral")]
            Neutral = 4,
            /// <summary>
            /// Enum Ownship for value: Ownship
            /// </summary>
            [EnumMember(Value = "Ownship")]
            Ownship = 5,
            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending = 6,
            /// <summary>
            /// Enum FriendlyAssumed for value: FriendlyAssumed
            /// </summary>
            [EnumMember(Value = "FriendlyAssumed")]
            FriendlyAssumed = 7,
            /// <summary>
            /// Enum HostileSuspected for value: HostileSuspected
            /// </summary>
            [EnumMember(Value = "HostileSuspected")]
            HostileSuspected = 8,
            /// <summary>
            /// Enum HostileJoker for value: HostileJoker
            /// </summary>
            [EnumMember(Value = "HostileJoker")]
            HostileJoker = 9,
            /// <summary>
            /// Enum HostileFaker for value: HostileFaker
            /// </summary>
            [EnumMember(Value = "HostileFaker")]
            HostileFaker = 10,
            /// <summary>
            /// Enum TrackOfInterest for value: TrackOfInterest
            /// </summary>
            [EnumMember(Value = "TrackOfInterest")]
            TrackOfInterest = 11        }
        /// <summary>
        /// Affiliation of this track (Not shown if &#x27;Unknown&#x27;)
        /// </summary>
        /// <value>Affiliation of this track (Not shown if &#x27;Unknown&#x27;)</value>
        [DataMember(Name="affiliation", EmitDefaultValue=false)]
        public AffiliationEnum? Affiliation { get; set; }
        /// <summary>
        /// Classification of this track (Not shown if &#x27;Unknown&#x27;)
        /// </summary>
        /// <value>Classification of this track (Not shown if &#x27;Unknown&#x27;)</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ClassificationEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,
            /// <summary>
            /// Enum SurfaceUnknown for value: SurfaceUnknown
            /// </summary>
            [EnumMember(Value = "SurfaceUnknown")]
            SurfaceUnknown = 2,
            /// <summary>
            /// Enum Merchant for value: Merchant
            /// </summary>
            [EnumMember(Value = "Merchant")]
            Merchant = 3,
            /// <summary>
            /// Enum Cargo for value: Cargo
            /// </summary>
            [EnumMember(Value = "Cargo")]
            Cargo = 4,
            /// <summary>
            /// Enum SearchCenter for value: SearchCenter
            /// </summary>
            [EnumMember(Value = "SearchCenter")]
            SearchCenter = 5,
            /// <summary>
            /// Enum Navy for value: Navy
            /// </summary>
            [EnumMember(Value = "Navy")]
            Navy = 6,
            /// <summary>
            /// Enum Tug for value: Tug
            /// </summary>
            [EnumMember(Value = "Tug")]
            Tug = 7,
            /// <summary>
            /// Enum Ferry for value: Ferry
            /// </summary>
            [EnumMember(Value = "Ferry")]
            Ferry = 8,
            /// <summary>
            /// Enum Passenger for value: Passenger
            /// </summary>
            [EnumMember(Value = "Passenger")]
            Passenger = 9,
            /// <summary>
            /// Enum CoastGuard for value: CoastGuard
            /// </summary>
            [EnumMember(Value = "CoastGuard")]
            CoastGuard = 10,
            /// <summary>
            /// Enum Hazmat for value: Hazmat
            /// </summary>
            [EnumMember(Value = "Hazmat")]
            Hazmat = 11,
            /// <summary>
            /// Enum Towing for value: Towing
            /// </summary>
            [EnumMember(Value = "Towing")]
            Towing = 12,
            /// <summary>
            /// Enum Fishing for value: Fishing
            /// </summary>
            [EnumMember(Value = "Fishing")]
            Fishing = 13,
            /// <summary>
            /// Enum Drifter for value: Drifter
            /// </summary>
            [EnumMember(Value = "Drifter")]
            Drifter = 14,
            /// <summary>
            /// Enum Dredge for value: Dredge
            /// </summary>
            [EnumMember(Value = "Dredge")]
            Dredge = 15,
            /// <summary>
            /// Enum Trawler for value: Trawler
            /// </summary>
            [EnumMember(Value = "Trawler")]
            Trawler = 16,
            /// <summary>
            /// Enum Leisure for value: Leisure
            /// </summary>
            [EnumMember(Value = "Leisure")]
            Leisure = 17,
            /// <summary>
            /// Enum Hovercraft for value: Hovercraft
            /// </summary>
            [EnumMember(Value = "Hovercraft")]
            Hovercraft = 18,
            /// <summary>
            /// Enum MarineLife for value: MarineLife
            /// </summary>
            [EnumMember(Value = "MarineLife")]
            MarineLife = 19,
            /// <summary>
            /// Enum Iceberg for value: Iceberg
            /// </summary>
            [EnumMember(Value = "Iceberg")]
            Iceberg = 20,
            /// <summary>
            /// Enum DitchedAircraft for value: DitchedAircraft
            /// </summary>
            [EnumMember(Value = "DitchedAircraft")]
            DitchedAircraft = 21,
            /// <summary>
            /// Enum ManInWater for value: ManInWater
            /// </summary>
            [EnumMember(Value = "ManInWater")]
            ManInWater = 22,
            /// <summary>
            /// Enum DistressedVessel for value: DistressedVessel
            /// </summary>
            [EnumMember(Value = "DistressedVessel")]
            DistressedVessel = 23,
            /// <summary>
            /// Enum OilPlatform for value: OilPlatform
            /// </summary>
            [EnumMember(Value = "OilPlatform")]
            OilPlatform = 24,
            /// <summary>
            /// Enum AirHelo for value: AirHelo
            /// </summary>
            [EnumMember(Value = "AirHelo")]
            AirHelo = 25,
            /// <summary>
            /// Enum AirFixedWing for value: AirFixedWing
            /// </summary>
            [EnumMember(Value = "AirFixedWing")]
            AirFixedWing = 26,
            /// <summary>
            /// Enum SubsurfaceUnknown for value: SubsurfaceUnknown
            /// </summary>
            [EnumMember(Value = "SubsurfaceUnknown")]
            SubsurfaceUnknown = 27,
            /// <summary>
            /// Enum AirUnknown for value: AirUnknown
            /// </summary>
            [EnumMember(Value = "AirUnknown")]
            AirUnknown = 28,
            /// <summary>
            /// Enum Ownship for value: Ownship
            /// </summary>
            [EnumMember(Value = "Ownship")]
            Ownship = 29,
            /// <summary>
            /// Enum Land for value: Land
            /// </summary>
            [EnumMember(Value = "Land")]
            Land = 30,
            /// <summary>
            /// Enum Buoy for value: Buoy
            /// </summary>
            [EnumMember(Value = "Buoy")]
            Buoy = 31,
            /// <summary>
            /// Enum AirUAV for value: AirUAV
            /// </summary>
            [EnumMember(Value = "AirUAV")]
            AirUAV = 32,
            /// <summary>
            /// Enum RigidHullInflatable for value: RigidHullInflatable
            /// </summary>
            [EnumMember(Value = "RigidHullInflatable")]
            RigidHullInflatable = 33,
            /// <summary>
            /// Enum Speedboat for value: Speedboat
            /// </summary>
            [EnumMember(Value = "Speedboat")]
            Speedboat = 34,
            /// <summary>
            /// Enum OilTanker for value: OilTanker
            /// </summary>
            [EnumMember(Value = "OilTanker")]
            OilTanker = 35        }
        /// <summary>
        /// Classification of this track (Not shown if &#x27;Unknown&#x27;)
        /// </summary>
        /// <value>Classification of this track (Not shown if &#x27;Unknown&#x27;)</value>
        [DataMember(Name="classification", EmitDefaultValue=false)]
        public ClassificationEnum? Classification { get; set; }
        /// <summary>
        /// Represents whether the track is maneuvering or not.
        /// </summary>
        /// <value>Represents whether the track is maneuvering or not.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ManeuveringEnum
        {
            /// <summary>
            /// Enum Maneuvering for value: maneuvering
            /// </summary>
            [EnumMember(Value = "maneuvering")]
            Maneuvering = 1        }
        /// <summary>
        /// Represents whether the track is maneuvering or not.
        /// </summary>
        /// <value>Represents whether the track is maneuvering or not.</value>
        [DataMember(Name="maneuvering", EmitDefaultValue=false)]
        public ManeuveringEnum? Maneuvering { get; set; }
        /// <summary>
        /// current state of this track (&#x27;Dropped&#x27; means track has either been specifically dropped or has not been updated by the tracker and will be removed from the system)
        /// </summary>
        /// <value>current state of this track (&#x27;Dropped&#x27; means track has either been specifically dropped or has not been updated by the tracker and will be removed from the system)</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StateEnum
        {
            /// <summary>
            /// Enum NonSteady for value: NonSteady
            /// </summary>
            [EnumMember(Value = "NonSteady")]
            NonSteady = 1,
            /// <summary>
            /// Enum Steady for value: Steady
            /// </summary>
            [EnumMember(Value = "Steady")]
            Steady = 2,
            /// <summary>
            /// Enum SteadyCoasted for value: SteadyCoasted
            /// </summary>
            [EnumMember(Value = "SteadyCoasted")]
            SteadyCoasted = 3,
            /// <summary>
            /// Enum Parked for value: Parked
            /// </summary>
            [EnumMember(Value = "Parked")]
            Parked = 4,
            /// <summary>
            /// Enum Dropped for value: Dropped
            /// </summary>
            [EnumMember(Value = "Dropped")]
            Dropped = 5        }
        /// <summary>
        /// current state of this track (&#x27;Dropped&#x27; means track has either been specifically dropped or has not been updated by the tracker and will be removed from the system)
        /// </summary>
        /// <value>current state of this track (&#x27;Dropped&#x27; means track has either been specifically dropped or has not been updated by the tracker and will be removed from the system)</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Represents how the tracker handles this track for Radar Tracks. Set to &#x27;Manual&#x27; if tracking manually
        /// </summary>
        /// <value>Represents how the tracker handles this track for Radar Tracks. Set to &#x27;Manual&#x27; if tracking manually</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TrackingManualEnum
        {
            /// <summary>
            /// Enum Manual for value: manual
            /// </summary>
            [EnumMember(Value = "manual")]
            Manual = 1        }
        /// <summary>
        /// Represents how the tracker handles this track for Radar Tracks. Set to &#x27;Manual&#x27; if tracking manually
        /// </summary>
        /// <value>Represents how the tracker handles this track for Radar Tracks. Set to &#x27;Manual&#x27; if tracking manually</value>
        [DataMember(Name="trackingManual", EmitDefaultValue=false)]
        public TrackingManualEnum? TrackingManual { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackGtcSourceDataRestDto" /> class.
        /// </summary>
        /// <param name="affiliation">Affiliation of this track (Not shown if &#x27;Unknown&#x27;).</param>
        /// <param name="classification">Classification of this track (Not shown if &#x27;Unknown&#x27;).</param>
        /// <param name="kinematics">kinematics.</param>
        /// <param name="localId">the local track id (required).</param>
        /// <param name="mOfn">Number of times this track seen in last 10 consecutive radar scans. (Applicable only for Radar Tracks).</param>
        /// <param name="maneuvering">Represents whether the track is maneuvering or not..</param>
        /// <param name="name">name of the track as set by AIS or user. This field is DEPRECATED and may no longer be populated. Rely on the name field at the top level (under TrackGtc) (required).</param>
        /// <param name="posUncertainty">area of positional uncertainty around this track (meters) (required).</param>
        /// <param name="position">position (required).</param>
        /// <param name="quality">[0-15]: quality of this track (required).</param>
        /// <param name="state">current state of this track (&#x27;Dropped&#x27; means track has either been specifically dropped or has not been updated by the tracker and will be removed from the system) (required).</param>
        /// <param name="trackSource">trackSource.</param>
        /// <param name="trackingManual">Represents how the tracker handles this track for Radar Tracks. Set to &#x27;Manual&#x27; if tracking manually.</param>
        /// <param name="turnRate">[-12.0 to 12.0]: Turn rate of this track (degrees per second) {Source AIS Transponder or Radar}.</param>
        /// <param name="updateDelta">[0 to 255]: delta time since the track was last seen (seconds)  {Source AIS Transponder or Radar}.</param>
        public TrackGtcSourceDataRestDto(AffiliationEnum? affiliation = default(AffiliationEnum?), ClassificationEnum? classification = default(ClassificationEnum?), KinematicsRestDto kinematics = default(KinematicsRestDto), int? localId = default(int?), int? mOfn = default(int?), ManeuveringEnum? maneuvering = default(ManeuveringEnum?), string name = default(string), int? posUncertainty = default(int?), GeoPosRestDto position = default(GeoPosRestDto), byte[] quality = default(byte[]), StateEnum state = default(StateEnum), TrackGtcSourceRestDto trackSource = default(TrackGtcSourceRestDto), TrackingManualEnum? trackingManual = default(TrackingManualEnum?), float? turnRate = default(float?), int? updateDelta = default(int?))
        {
            // to ensure "localId" is required (not null)
            if (localId == null)
            {
                throw new InvalidDataException("localId is a required property for TrackGtcSourceDataRestDto and cannot be null");
            }
            else
            {
                this.LocalId = localId;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for TrackGtcSourceDataRestDto and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "posUncertainty" is required (not null)
            if (posUncertainty == null)
            {
                throw new InvalidDataException("posUncertainty is a required property for TrackGtcSourceDataRestDto and cannot be null");
            }
            else
            {
                this.PosUncertainty = posUncertainty;
            }
            // to ensure "position" is required (not null)
            if (position == null)
            {
                throw new InvalidDataException("position is a required property for TrackGtcSourceDataRestDto and cannot be null");
            }
            else
            {
                this.Position = position;
            }
            // to ensure "quality" is required (not null)
            if (quality == null)
            {
                throw new InvalidDataException("quality is a required property for TrackGtcSourceDataRestDto and cannot be null");
            }
            else
            {
                this.Quality = quality;
            }
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new InvalidDataException("state is a required property for TrackGtcSourceDataRestDto and cannot be null");
            }
            else
            {
                this.State = state;
            }
            this.Affiliation = affiliation;
            this.Classification = classification;
            this.Kinematics = kinematics;
            this.MOfn = mOfn;
            this.Maneuvering = maneuvering;
            this.TrackSource = trackSource;
            this.TrackingManual = trackingManual;
            this.TurnRate = turnRate;
            this.UpdateDelta = updateDelta;
        }
        


        /// <summary>
        /// Gets or Sets Kinematics
        /// </summary>
        [DataMember(Name="kinematics", EmitDefaultValue=false)]
        public KinematicsRestDto Kinematics { get; set; }

        /// <summary>
        /// the local track id
        /// </summary>
        /// <value>the local track id</value>
        [DataMember(Name="localId", EmitDefaultValue=false)]
        public int? LocalId { get; set; }

        /// <summary>
        /// Number of times this track seen in last 10 consecutive radar scans. (Applicable only for Radar Tracks)
        /// </summary>
        /// <value>Number of times this track seen in last 10 consecutive radar scans. (Applicable only for Radar Tracks)</value>
        [DataMember(Name="mOfn", EmitDefaultValue=false)]
        public int? MOfn { get; set; }


        /// <summary>
        /// name of the track as set by AIS or user. This field is DEPRECATED and may no longer be populated. Rely on the name field at the top level (under TrackGtc)
        /// </summary>
        /// <value>name of the track as set by AIS or user. This field is DEPRECATED and may no longer be populated. Rely on the name field at the top level (under TrackGtc)</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// area of positional uncertainty around this track (meters)
        /// </summary>
        /// <value>area of positional uncertainty around this track (meters)</value>
        [DataMember(Name="posUncertainty", EmitDefaultValue=false)]
        public int? PosUncertainty { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public GeoPosRestDto Position { get; set; }

        /// <summary>
        /// [0-15]: quality of this track
        /// </summary>
        /// <value>[0-15]: quality of this track</value>
        [DataMember(Name="quality", EmitDefaultValue=false)]
        public byte[] Quality { get; set; }


        /// <summary>
        /// Gets or Sets TrackSource
        /// </summary>
        [DataMember(Name="trackSource", EmitDefaultValue=false)]
        public TrackGtcSourceRestDto TrackSource { get; set; }


        /// <summary>
        /// [-12.0 to 12.0]: Turn rate of this track (degrees per second) {Source AIS Transponder or Radar}
        /// </summary>
        /// <value>[-12.0 to 12.0]: Turn rate of this track (degrees per second) {Source AIS Transponder or Radar}</value>
        [DataMember(Name="turnRate", EmitDefaultValue=false)]
        public float? TurnRate { get; set; }

        /// <summary>
        /// [0 to 255]: delta time since the track was last seen (seconds)  {Source AIS Transponder or Radar}
        /// </summary>
        /// <value>[0 to 255]: delta time since the track was last seen (seconds)  {Source AIS Transponder or Radar}</value>
        [DataMember(Name="updateDelta", EmitDefaultValue=false)]
        public int? UpdateDelta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrackGtcSourceDataRestDto {\n");
            sb.Append("  Affiliation: ").Append(Affiliation).Append("\n");
            sb.Append("  Classification: ").Append(Classification).Append("\n");
            sb.Append("  Kinematics: ").Append(Kinematics).Append("\n");
            sb.Append("  LocalId: ").Append(LocalId).Append("\n");
            sb.Append("  MOfn: ").Append(MOfn).Append("\n");
            sb.Append("  Maneuvering: ").Append(Maneuvering).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PosUncertainty: ").Append(PosUncertainty).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Quality: ").Append(Quality).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  TrackSource: ").Append(TrackSource).Append("\n");
            sb.Append("  TrackingManual: ").Append(TrackingManual).Append("\n");
            sb.Append("  TurnRate: ").Append(TurnRate).Append("\n");
            sb.Append("  UpdateDelta: ").Append(UpdateDelta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrackGtcSourceDataRestDto);
        }

        /// <summary>
        /// Returns true if TrackGtcSourceDataRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of TrackGtcSourceDataRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrackGtcSourceDataRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Affiliation == input.Affiliation ||
                    (this.Affiliation != null &&
                    this.Affiliation.Equals(input.Affiliation))
                ) && 
                (
                    this.Classification == input.Classification ||
                    (this.Classification != null &&
                    this.Classification.Equals(input.Classification))
                ) && 
                (
                    this.Kinematics == input.Kinematics ||
                    (this.Kinematics != null &&
                    this.Kinematics.Equals(input.Kinematics))
                ) && 
                (
                    this.LocalId == input.LocalId ||
                    (this.LocalId != null &&
                    this.LocalId.Equals(input.LocalId))
                ) && 
                (
                    this.MOfn == input.MOfn ||
                    (this.MOfn != null &&
                    this.MOfn.Equals(input.MOfn))
                ) && 
                (
                    this.Maneuvering == input.Maneuvering ||
                    (this.Maneuvering != null &&
                    this.Maneuvering.Equals(input.Maneuvering))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PosUncertainty == input.PosUncertainty ||
                    (this.PosUncertainty != null &&
                    this.PosUncertainty.Equals(input.PosUncertainty))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Quality == input.Quality ||
                    (this.Quality != null &&
                    this.Quality.Equals(input.Quality))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.TrackSource == input.TrackSource ||
                    (this.TrackSource != null &&
                    this.TrackSource.Equals(input.TrackSource))
                ) && 
                (
                    this.TrackingManual == input.TrackingManual ||
                    (this.TrackingManual != null &&
                    this.TrackingManual.Equals(input.TrackingManual))
                ) && 
                (
                    this.TurnRate == input.TurnRate ||
                    (this.TurnRate != null &&
                    this.TurnRate.Equals(input.TurnRate))
                ) && 
                (
                    this.UpdateDelta == input.UpdateDelta ||
                    (this.UpdateDelta != null &&
                    this.UpdateDelta.Equals(input.UpdateDelta))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Affiliation != null)
                    hashCode = hashCode * 59 + this.Affiliation.GetHashCode();
                if (this.Classification != null)
                    hashCode = hashCode * 59 + this.Classification.GetHashCode();
                if (this.Kinematics != null)
                    hashCode = hashCode * 59 + this.Kinematics.GetHashCode();
                if (this.LocalId != null)
                    hashCode = hashCode * 59 + this.LocalId.GetHashCode();
                if (this.MOfn != null)
                    hashCode = hashCode * 59 + this.MOfn.GetHashCode();
                if (this.Maneuvering != null)
                    hashCode = hashCode * 59 + this.Maneuvering.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PosUncertainty != null)
                    hashCode = hashCode * 59 + this.PosUncertainty.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Quality != null)
                    hashCode = hashCode * 59 + this.Quality.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.TrackSource != null)
                    hashCode = hashCode * 59 + this.TrackSource.GetHashCode();
                if (this.TrackingManual != null)
                    hashCode = hashCode * 59 + this.TrackingManual.GetHashCode();
                if (this.TurnRate != null)
                    hashCode = hashCode * 59 + this.TurnRate.GetHashCode();
                if (this.UpdateDelta != null)
                    hashCode = hashCode * 59 + this.UpdateDelta.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
