/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TrackGtcDetailRestDto
    /// </summary>
    [DataContract]
        public partial class TrackGtcDetailRestDto :  IEquatable<TrackGtcDetailRestDto>, IValidatableObject
    {
        /// <summary>
        /// Represents whether the track is maneuvering or not.
        /// </summary>
        /// <value>Represents whether the track is maneuvering or not.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ManeuveringEnum
        {
            /// <summary>
            /// Enum Maneuvering for value: maneuvering
            /// </summary>
            [EnumMember(Value = "maneuvering")]
            Maneuvering = 1        }
        /// <summary>
        /// Represents whether the track is maneuvering or not.
        /// </summary>
        /// <value>Represents whether the track is maneuvering or not.</value>
        [DataMember(Name="maneuvering", EmitDefaultValue=false)]
        public ManeuveringEnum? Maneuvering { get; set; }
        /// <summary>
        /// Represents how the tracker handles this track for Radar Tracks. Set to &#x27;Manual&#x27; if tracking manually
        /// </summary>
        /// <value>Represents how the tracker handles this track for Radar Tracks. Set to &#x27;Manual&#x27; if tracking manually</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TrackingManualEnum
        {
            /// <summary>
            /// Enum Manual for value: Manual
            /// </summary>
            [EnumMember(Value = "Manual")]
            Manual = 1        }
        /// <summary>
        /// Represents how the tracker handles this track for Radar Tracks. Set to &#x27;Manual&#x27; if tracking manually
        /// </summary>
        /// <value>Represents how the tracker handles this track for Radar Tracks. Set to &#x27;Manual&#x27; if tracking manually</value>
        [DataMember(Name="trackingManual", EmitDefaultValue=false)]
        public TrackingManualEnum? TrackingManual { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackGtcDetailRestDto" /> class.
        /// </summary>
        /// <param name="aisAntPos">aisAntPos.</param>
        /// <param name="aisEta">The Estimated Time of Arrival {Source AIS Transponder}.</param>
        /// <param name="aisFixingDevice">aisFixingDevice.</param>
        /// <param name="aisMaxDraft">[0 to 25.5]: Max draft (draught) of the track (meters) {Source AIS Transponder}.</param>
        /// <param name="aisMessageId">The AIS reported message id {Source AIS Transponder}.</param>
        /// <param name="aisSize">aisSize.</param>
        /// <param name="aisTypeOfShip">aisTypeOfShip.</param>
        /// <param name="callSign">Call Sign {Source AIS Transponder}.</param>
        /// <param name="destination">Destination {Source AIS Transponder}.</param>
        /// <param name="extTrkId">A track Id that was provided from an external source.</param>
        /// <param name="imo">IMO number {Source AIS Transponder}.</param>
        /// <param name="mOfn">Number of times this track seen in last 10 consecutive radar scans. (Applicable only for Radar Tracks).</param>
        /// <param name="maneuvering">Represents whether the track is maneuvering or not..</param>
        /// <param name="mmsi">MMSI number {Source AIS Transponder}.</param>
        /// <param name="specialIndicators">An array of strings representing special indicators about this track&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Interpretation:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BFT: Track is transmitting valid encrypted position reports&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;DscDistress: Track sent a DSC Distressed Vessel signal.</param>
        /// <param name="trackingManual">Represents how the tracker handles this track for Radar Tracks. Set to &#x27;Manual&#x27; if tracking manually.</param>
        public TrackGtcDetailRestDto(AisAntPosRestDto aisAntPos = default(AisAntPosRestDto), string aisEta = default(string), AisFixingDeviceRestDto aisFixingDevice = default(AisFixingDeviceRestDto), float? aisMaxDraft = default(float?), int? aisMessageId = default(int?), AisSizeRestDto aisSize = default(AisSizeRestDto), AisShipTypeRestDto aisTypeOfShip = default(AisShipTypeRestDto), string callSign = default(string), string destination = default(string), int? extTrkId = default(int?), int? imo = default(int?), int? mOfn = default(int?), ManeuveringEnum? maneuvering = default(ManeuveringEnum?), int? mmsi = default(int?), List<string> specialIndicators = default(List<string>), TrackingManualEnum? trackingManual = default(TrackingManualEnum?))
        {
            this.AisAntPos = aisAntPos;
            this.AisEta = aisEta;
            this.AisFixingDevice = aisFixingDevice;
            this.AisMaxDraft = aisMaxDraft;
            this.AisMessageId = aisMessageId;
            this.AisSize = aisSize;
            this.AisTypeOfShip = aisTypeOfShip;
            this.CallSign = callSign;
            this.Destination = destination;
            this.ExtTrkId = extTrkId;
            this.Imo = imo;
            this.MOfn = mOfn;
            this.Maneuvering = maneuvering;
            this.Mmsi = mmsi;
            this.SpecialIndicators = specialIndicators;
            this.TrackingManual = trackingManual;
        }
        
        /// <summary>
        /// Gets or Sets AisAntPos
        /// </summary>
        [DataMember(Name="aisAntPos", EmitDefaultValue=false)]
        public AisAntPosRestDto AisAntPos { get; set; }

        /// <summary>
        /// The Estimated Time of Arrival {Source AIS Transponder}
        /// </summary>
        /// <value>The Estimated Time of Arrival {Source AIS Transponder}</value>
        [DataMember(Name="aisEta", EmitDefaultValue=false)]
        public string AisEta { get; set; }

        /// <summary>
        /// Gets or Sets AisFixingDevice
        /// </summary>
        [DataMember(Name="aisFixingDevice", EmitDefaultValue=false)]
        public AisFixingDeviceRestDto AisFixingDevice { get; set; }

        /// <summary>
        /// [0 to 25.5]: Max draft (draught) of the track (meters) {Source AIS Transponder}
        /// </summary>
        /// <value>[0 to 25.5]: Max draft (draught) of the track (meters) {Source AIS Transponder}</value>
        [DataMember(Name="aisMaxDraft", EmitDefaultValue=false)]
        public float? AisMaxDraft { get; set; }

        /// <summary>
        /// The AIS reported message id {Source AIS Transponder}
        /// </summary>
        /// <value>The AIS reported message id {Source AIS Transponder}</value>
        [DataMember(Name="aisMessageId", EmitDefaultValue=false)]
        public int? AisMessageId { get; set; }

        /// <summary>
        /// Gets or Sets AisSize
        /// </summary>
        [DataMember(Name="aisSize", EmitDefaultValue=false)]
        public AisSizeRestDto AisSize { get; set; }

        /// <summary>
        /// Gets or Sets AisTypeOfShip
        /// </summary>
        [DataMember(Name="aisTypeOfShip", EmitDefaultValue=false)]
        public AisShipTypeRestDto AisTypeOfShip { get; set; }

        /// <summary>
        /// Call Sign {Source AIS Transponder}
        /// </summary>
        /// <value>Call Sign {Source AIS Transponder}</value>
        [DataMember(Name="callSign", EmitDefaultValue=false)]
        public string CallSign { get; set; }

        /// <summary>
        /// Destination {Source AIS Transponder}
        /// </summary>
        /// <value>Destination {Source AIS Transponder}</value>
        [DataMember(Name="destination", EmitDefaultValue=false)]
        public string Destination { get; set; }

        /// <summary>
        /// A track Id that was provided from an external source
        /// </summary>
        /// <value>A track Id that was provided from an external source</value>
        [DataMember(Name="extTrkId", EmitDefaultValue=false)]
        public int? ExtTrkId { get; set; }

        /// <summary>
        /// IMO number {Source AIS Transponder}
        /// </summary>
        /// <value>IMO number {Source AIS Transponder}</value>
        [DataMember(Name="imo", EmitDefaultValue=false)]
        public int? Imo { get; set; }

        /// <summary>
        /// Number of times this track seen in last 10 consecutive radar scans. (Applicable only for Radar Tracks)
        /// </summary>
        /// <value>Number of times this track seen in last 10 consecutive radar scans. (Applicable only for Radar Tracks)</value>
        [DataMember(Name="mOfn", EmitDefaultValue=false)]
        public int? MOfn { get; set; }


        /// <summary>
        /// MMSI number {Source AIS Transponder}
        /// </summary>
        /// <value>MMSI number {Source AIS Transponder}</value>
        [DataMember(Name="mmsi", EmitDefaultValue=false)]
        public int? Mmsi { get; set; }

        /// <summary>
        /// An array of strings representing special indicators about this track&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Interpretation:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BFT: Track is transmitting valid encrypted position reports&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;DscDistress: Track sent a DSC Distressed Vessel signal
        /// </summary>
        /// <value>An array of strings representing special indicators about this track&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Interpretation:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BFT: Track is transmitting valid encrypted position reports&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;DscDistress: Track sent a DSC Distressed Vessel signal</value>
        [DataMember(Name="specialIndicators", EmitDefaultValue=false)]
        public List<string> SpecialIndicators { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrackGtcDetailRestDto {\n");
            sb.Append("  AisAntPos: ").Append(AisAntPos).Append("\n");
            sb.Append("  AisEta: ").Append(AisEta).Append("\n");
            sb.Append("  AisFixingDevice: ").Append(AisFixingDevice).Append("\n");
            sb.Append("  AisMaxDraft: ").Append(AisMaxDraft).Append("\n");
            sb.Append("  AisMessageId: ").Append(AisMessageId).Append("\n");
            sb.Append("  AisSize: ").Append(AisSize).Append("\n");
            sb.Append("  AisTypeOfShip: ").Append(AisTypeOfShip).Append("\n");
            sb.Append("  CallSign: ").Append(CallSign).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  ExtTrkId: ").Append(ExtTrkId).Append("\n");
            sb.Append("  Imo: ").Append(Imo).Append("\n");
            sb.Append("  MOfn: ").Append(MOfn).Append("\n");
            sb.Append("  Maneuvering: ").Append(Maneuvering).Append("\n");
            sb.Append("  Mmsi: ").Append(Mmsi).Append("\n");
            sb.Append("  SpecialIndicators: ").Append(SpecialIndicators).Append("\n");
            sb.Append("  TrackingManual: ").Append(TrackingManual).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrackGtcDetailRestDto);
        }

        /// <summary>
        /// Returns true if TrackGtcDetailRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of TrackGtcDetailRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrackGtcDetailRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AisAntPos == input.AisAntPos ||
                    (this.AisAntPos != null &&
                    this.AisAntPos.Equals(input.AisAntPos))
                ) && 
                (
                    this.AisEta == input.AisEta ||
                    (this.AisEta != null &&
                    this.AisEta.Equals(input.AisEta))
                ) && 
                (
                    this.AisFixingDevice == input.AisFixingDevice ||
                    (this.AisFixingDevice != null &&
                    this.AisFixingDevice.Equals(input.AisFixingDevice))
                ) && 
                (
                    this.AisMaxDraft == input.AisMaxDraft ||
                    (this.AisMaxDraft != null &&
                    this.AisMaxDraft.Equals(input.AisMaxDraft))
                ) && 
                (
                    this.AisMessageId == input.AisMessageId ||
                    (this.AisMessageId != null &&
                    this.AisMessageId.Equals(input.AisMessageId))
                ) && 
                (
                    this.AisSize == input.AisSize ||
                    (this.AisSize != null &&
                    this.AisSize.Equals(input.AisSize))
                ) && 
                (
                    this.AisTypeOfShip == input.AisTypeOfShip ||
                    (this.AisTypeOfShip != null &&
                    this.AisTypeOfShip.Equals(input.AisTypeOfShip))
                ) && 
                (
                    this.CallSign == input.CallSign ||
                    (this.CallSign != null &&
                    this.CallSign.Equals(input.CallSign))
                ) && 
                (
                    this.Destination == input.Destination ||
                    (this.Destination != null &&
                    this.Destination.Equals(input.Destination))
                ) && 
                (
                    this.ExtTrkId == input.ExtTrkId ||
                    (this.ExtTrkId != null &&
                    this.ExtTrkId.Equals(input.ExtTrkId))
                ) && 
                (
                    this.Imo == input.Imo ||
                    (this.Imo != null &&
                    this.Imo.Equals(input.Imo))
                ) && 
                (
                    this.MOfn == input.MOfn ||
                    (this.MOfn != null &&
                    this.MOfn.Equals(input.MOfn))
                ) && 
                (
                    this.Maneuvering == input.Maneuvering ||
                    (this.Maneuvering != null &&
                    this.Maneuvering.Equals(input.Maneuvering))
                ) && 
                (
                    this.Mmsi == input.Mmsi ||
                    (this.Mmsi != null &&
                    this.Mmsi.Equals(input.Mmsi))
                ) && 
                (
                    this.SpecialIndicators == input.SpecialIndicators ||
                    this.SpecialIndicators != null &&
                    input.SpecialIndicators != null &&
                    this.SpecialIndicators.SequenceEqual(input.SpecialIndicators)
                ) && 
                (
                    this.TrackingManual == input.TrackingManual ||
                    (this.TrackingManual != null &&
                    this.TrackingManual.Equals(input.TrackingManual))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AisAntPos != null)
                    hashCode = hashCode * 59 + this.AisAntPos.GetHashCode();
                if (this.AisEta != null)
                    hashCode = hashCode * 59 + this.AisEta.GetHashCode();
                if (this.AisFixingDevice != null)
                    hashCode = hashCode * 59 + this.AisFixingDevice.GetHashCode();
                if (this.AisMaxDraft != null)
                    hashCode = hashCode * 59 + this.AisMaxDraft.GetHashCode();
                if (this.AisMessageId != null)
                    hashCode = hashCode * 59 + this.AisMessageId.GetHashCode();
                if (this.AisSize != null)
                    hashCode = hashCode * 59 + this.AisSize.GetHashCode();
                if (this.AisTypeOfShip != null)
                    hashCode = hashCode * 59 + this.AisTypeOfShip.GetHashCode();
                if (this.CallSign != null)
                    hashCode = hashCode * 59 + this.CallSign.GetHashCode();
                if (this.Destination != null)
                    hashCode = hashCode * 59 + this.Destination.GetHashCode();
                if (this.ExtTrkId != null)
                    hashCode = hashCode * 59 + this.ExtTrkId.GetHashCode();
                if (this.Imo != null)
                    hashCode = hashCode * 59 + this.Imo.GetHashCode();
                if (this.MOfn != null)
                    hashCode = hashCode * 59 + this.MOfn.GetHashCode();
                if (this.Maneuvering != null)
                    hashCode = hashCode * 59 + this.Maneuvering.GetHashCode();
                if (this.Mmsi != null)
                    hashCode = hashCode * 59 + this.Mmsi.GetHashCode();
                if (this.SpecialIndicators != null)
                    hashCode = hashCode * 59 + this.SpecialIndicators.GetHashCode();
                if (this.TrackingManual != null)
                    hashCode = hashCode * 59 + this.TrackingManual.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
