/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FilterRestDto
    /// </summary>
    [DataContract]
        public partial class FilterRestDto :  IEquatable<FilterRestDto>, IValidatableObject
    {
        /// <summary>
        /// clutter mode (typically Manual, Semi-Auto, or Full-Auto)
        /// </summary>
        /// <value>clutter mode (typically Manual, Semi-Auto, or Full-Auto)</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ClutterModeEnum
        {
            /// <summary>
            /// Enum Manual for value: Manual
            /// </summary>
            [EnumMember(Value = "Manual")]
            Manual = 1,
            /// <summary>
            /// Enum SemiAuto for value: Semi-Auto
            /// </summary>
            [EnumMember(Value = "Semi-Auto")]
            SemiAuto = 2,
            /// <summary>
            /// Enum FullAuto for value: Full-Auto
            /// </summary>
            [EnumMember(Value = "Full-Auto")]
            FullAuto = 3,
            /// <summary>
            /// Enum MTD for value: MTD
            /// </summary>
            [EnumMember(Value = "MTD")]
            MTD = 4,
            /// <summary>
            /// Enum Transceiver for value: Transceiver
            /// </summary>
            [EnumMember(Value = "Transceiver")]
            Transceiver = 5        }
        /// <summary>
        /// clutter mode (typically Manual, Semi-Auto, or Full-Auto)
        /// </summary>
        /// <value>clutter mode (typically Manual, Semi-Auto, or Full-Auto)</value>
        [DataMember(Name="clutterMode", EmitDefaultValue=false)]
        public ClutterModeEnum? ClutterMode { get; set; }
        /// <summary>
        /// interference rejection control
        /// </summary>
        /// <value>interference rejection control</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum IrControlEnum
        {
            /// <summary>
            /// Enum Off for value: Off
            /// </summary>
            [EnumMember(Value = "Off")]
            Off = 1,
            /// <summary>
            /// Enum Low for value: Low
            /// </summary>
            [EnumMember(Value = "Low")]
            Low = 2,
            /// <summary>
            /// Enum Medium for value: Medium
            /// </summary>
            [EnumMember(Value = "Medium")]
            Medium = 3,
            /// <summary>
            /// Enum High for value: High
            /// </summary>
            [EnumMember(Value = "High")]
            High = 4        }
        /// <summary>
        /// interference rejection control
        /// </summary>
        /// <value>interference rejection control</value>
        [DataMember(Name="irControl", EmitDefaultValue=false)]
        public IrControlEnum? IrControl { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterRestDto" /> class.
        /// </summary>
        /// <param name="clutterMode">clutter mode (typically Manual, Semi-Auto, or Full-Auto).</param>
        /// <param name="gainControl">[0-100]: gain control.</param>
        /// <param name="irControl">interference rejection control.</param>
        /// <param name="rainControl">[0-100]: control for rain clutter.</param>
        /// <param name="seaControl">[0-100]: control for sea clutter.</param>
        public FilterRestDto(ClutterModeEnum? clutterMode = default(ClutterModeEnum?), int? gainControl = default(int?), IrControlEnum? irControl = default(IrControlEnum?), int? rainControl = default(int?), int? seaControl = default(int?))
        {
            this.ClutterMode = clutterMode;
            this.GainControl = gainControl;
            this.IrControl = irControl;
            this.RainControl = rainControl;
            this.SeaControl = seaControl;
        }
        

        /// <summary>
        /// [0-100]: gain control
        /// </summary>
        /// <value>[0-100]: gain control</value>
        [DataMember(Name="gainControl", EmitDefaultValue=false)]
        public int? GainControl { get; set; }


        /// <summary>
        /// [0-100]: control for rain clutter
        /// </summary>
        /// <value>[0-100]: control for rain clutter</value>
        [DataMember(Name="rainControl", EmitDefaultValue=false)]
        public int? RainControl { get; set; }

        /// <summary>
        /// [0-100]: control for sea clutter
        /// </summary>
        /// <value>[0-100]: control for sea clutter</value>
        [DataMember(Name="seaControl", EmitDefaultValue=false)]
        public int? SeaControl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FilterRestDto {\n");
            sb.Append("  ClutterMode: ").Append(ClutterMode).Append("\n");
            sb.Append("  GainControl: ").Append(GainControl).Append("\n");
            sb.Append("  IrControl: ").Append(IrControl).Append("\n");
            sb.Append("  RainControl: ").Append(RainControl).Append("\n");
            sb.Append("  SeaControl: ").Append(SeaControl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FilterRestDto);
        }

        /// <summary>
        /// Returns true if FilterRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of FilterRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FilterRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClutterMode == input.ClutterMode ||
                    (this.ClutterMode != null &&
                    this.ClutterMode.Equals(input.ClutterMode))
                ) && 
                (
                    this.GainControl == input.GainControl ||
                    (this.GainControl != null &&
                    this.GainControl.Equals(input.GainControl))
                ) && 
                (
                    this.IrControl == input.IrControl ||
                    (this.IrControl != null &&
                    this.IrControl.Equals(input.IrControl))
                ) && 
                (
                    this.RainControl == input.RainControl ||
                    (this.RainControl != null &&
                    this.RainControl.Equals(input.RainControl))
                ) && 
                (
                    this.SeaControl == input.SeaControl ||
                    (this.SeaControl != null &&
                    this.SeaControl.Equals(input.SeaControl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClutterMode != null)
                    hashCode = hashCode * 59 + this.ClutterMode.GetHashCode();
                if (this.GainControl != null)
                    hashCode = hashCode * 59 + this.GainControl.GetHashCode();
                if (this.IrControl != null)
                    hashCode = hashCode * 59 + this.IrControl.GetHashCode();
                if (this.RainControl != null)
                    hashCode = hashCode * 59 + this.RainControl.GetHashCode();
                if (this.SeaControl != null)
                    hashCode = hashCode * 59 + this.SeaControl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
