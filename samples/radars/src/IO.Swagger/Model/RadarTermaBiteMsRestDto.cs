/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BITE Measurements for a Terma Radar
    /// </summary>
    [DataContract]
        public partial class RadarTermaBiteMsRestDto :  IEquatable<RadarTermaBiteMsRestDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RadarTermaBiteMsRestDto" /> class.
        /// </summary>
        /// <param name="id">[1-64]: the resource identifier; the radar id (the Radar Processor unit number).</param>
        /// <param name="items">BITE (Built In Test Measurements) data (required).</param>
        /// <param name="links">*method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria (required).</param>
        /// <param name="totalItems">Total number of elements matching the query filter and not limited by page size.</param>
        public RadarTermaBiteMsRestDto(int? id = default(int?), List<RadarTermaBiteMRestDto> items = default(List<RadarTermaBiteMRestDto>), List<Link> links = default(List<Link>), long? totalItems = default(long?))
        {
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new InvalidDataException("items is a required property for RadarTermaBiteMsRestDto and cannot be null");
            }
            else
            {
                this.Items = items;
            }
            // to ensure "links" is required (not null)
            if (links == null)
            {
                throw new InvalidDataException("links is a required property for RadarTermaBiteMsRestDto and cannot be null");
            }
            else
            {
                this.Links = links;
            }
            this.Id = id;
            this.TotalItems = totalItems;
        }
        
        /// <summary>
        /// [1-64]: the resource identifier; the radar id (the Radar Processor unit number)
        /// </summary>
        /// <value>[1-64]: the resource identifier; the radar id (the Radar Processor unit number)</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// BITE (Built In Test Measurements) data
        /// </summary>
        /// <value>BITE (Built In Test Measurements) data</value>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<RadarTermaBiteMRestDto> Items { get; set; }

        /// <summary>
        /// *method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria
        /// </summary>
        /// <value>*method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria</value>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Total number of elements matching the query filter and not limited by page size
        /// </summary>
        /// <value>Total number of elements matching the query filter and not limited by page size</value>
        [DataMember(Name="totalItems", EmitDefaultValue=false)]
        public long? TotalItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RadarTermaBiteMsRestDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  TotalItems: ").Append(TotalItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RadarTermaBiteMsRestDto);
        }

        /// <summary>
        /// Returns true if RadarTermaBiteMsRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of RadarTermaBiteMsRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RadarTermaBiteMsRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.TotalItems == input.TotalItems ||
                    (this.TotalItems != null &&
                    this.TotalItems.Equals(input.TotalItems))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.TotalItems != null)
                    hashCode = hashCode * 59 + this.TotalItems.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
