/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TermaProfileRestDto
    /// </summary>
    [DataContract]
        public partial class TermaProfileRestDto :  IEquatable<TermaProfileRestDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TermaProfileRestDto" /> class.
        /// </summary>
        /// <param name="termaProfile">[0-15]: Terma Profile setting for the radar. (Not shown if not a Terma Radar or if the profile is not set or if the SSR system does not know the profile).</param>
        public TermaProfileRestDto(int? termaProfile = default(int?))
        {
            this.TermaProfile = termaProfile;
        }
        
        /// <summary>
        /// [0-15]: Terma Profile setting for the radar. (Not shown if not a Terma Radar or if the profile is not set or if the SSR system does not know the profile)
        /// </summary>
        /// <value>[0-15]: Terma Profile setting for the radar. (Not shown if not a Terma Radar or if the profile is not set or if the SSR system does not know the profile)</value>
        [DataMember(Name="termaProfile", EmitDefaultValue=false)]
        public int? TermaProfile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TermaProfileRestDto {\n");
            sb.Append("  TermaProfile: ").Append(TermaProfile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TermaProfileRestDto);
        }

        /// <summary>
        /// Returns true if TermaProfileRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of TermaProfileRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TermaProfileRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TermaProfile == input.TermaProfile ||
                    (this.TermaProfile != null &&
                    this.TermaProfile.Equals(input.TermaProfile))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TermaProfile != null)
                    hashCode = hashCode * 59 + this.TermaProfile.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
