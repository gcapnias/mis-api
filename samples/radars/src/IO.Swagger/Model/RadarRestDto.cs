/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RadarRestDto
    /// </summary>
    [DataContract]
        public partial class RadarRestDto :  IEquatable<RadarRestDto>, IValidatableObject
    {
        /// <summary>
        /// type of radar (shown if it is in the set of given possible values)
        /// </summary>
        /// <value>type of radar (shown if it is in the set of given possible values)</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum RadarFamilyEnum
        {
            /// <summary>
            /// Enum Manta for value: Manta
            /// </summary>
            [EnumMember(Value = "Manta")]
            Manta = 1,
            /// <summary>
            /// Enum SharpEyeS for value: SharpEyeS
            /// </summary>
            [EnumMember(Value = "SharpEyeS")]
            SharpEyeS = 2,
            /// <summary>
            /// Enum SharpEyeX for value: SharpEyeX
            /// </summary>
            [EnumMember(Value = "SharpEyeX")]
            SharpEyeX = 3,
            /// <summary>
            /// Enum Furuno for value: Furuno
            /// </summary>
            [EnumMember(Value = "Furuno")]
            Furuno = 4,
            /// <summary>
            /// Enum Terma for value: Terma
            /// </summary>
            [EnumMember(Value = "Terma")]
            Terma = 5,
            /// <summary>
            /// Enum BME for value: BME
            /// </summary>
            [EnumMember(Value = "BME")]
            BME = 6,
            /// <summary>
            /// Enum Pahtfinder for value: Pahtfinder
            /// </summary>
            [EnumMember(Value = "Pahtfinder")]
            Pahtfinder = 7,
            /// <summary>
            /// Enum GEM for value: GEM
            /// </summary>
            [EnumMember(Value = "GEM")]
            GEM = 8,
            /// <summary>
            /// Enum Simrad for value: Simrad
            /// </summary>
            [EnumMember(Value = "Simrad")]
            Simrad = 9        }
        /// <summary>
        /// type of radar (shown if it is in the set of given possible values)
        /// </summary>
        /// <value>type of radar (shown if it is in the set of given possible values)</value>
        [DataMember(Name="radarFamily", EmitDefaultValue=false)]
        public RadarFamilyEnum RadarFamily { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RadarRestDto" /> class.
        /// </summary>
        /// <param name="antennaRpm">measured RPM value of the radar (required).</param>
        /// <param name="control">control (required).</param>
        /// <param name="detail">detail (required).</param>
        /// <param name="id">[1-64]: the resource identifier; the radar id (the Radar Processor unit number).</param>
        /// <param name="isNotUpdating">[true]: boolean representing if this resource is no longer being updated or seen in the system and will soon no longer be accessible from the API (required).</param>
        /// <param name="links">*method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria (required).</param>
        /// <param name="position">position.</param>
        /// <param name="prf">current PRF (Pulse Repetition Frequency) of the radar (required).</param>
        /// <param name="pulseWidth">pulse width of a pulsed magnetron radar in nanoseconds (required).</param>
        /// <param name="radarFamily">type of radar (shown if it is in the set of given possible values) (required).</param>
        /// <param name="radarFullName">RP Station Name followed by the Radar Name as in &#x27;RP Station X:Radar A&#x27;.</param>
        /// <param name="transmitFrequency">transmit frequency of a solid state radar in kHz (required).</param>
        /// <param name="warmupCountdown">time in seconds until the radar is warmed and in Standby Mode. A -1 indicates the countdown is not active (required).</param>
        public RadarRestDto(float? antennaRpm = default(float?), RadarControlRestDto control = default(RadarControlRestDto), RadarDetailRestDto detail = default(RadarDetailRestDto), int? id = default(int?), bool? isNotUpdating = default(bool?), List<Link> links = default(List<Link>), GeoPosRestDto position = default(GeoPosRestDto), int? prf = default(int?), int? pulseWidth = default(int?), RadarFamilyEnum radarFamily = default(RadarFamilyEnum), string radarFullName = default(string), double? transmitFrequency = default(double?), int? warmupCountdown = default(int?))
        {
            // to ensure "antennaRpm" is required (not null)
            if (antennaRpm == null)
            {
                throw new InvalidDataException("antennaRpm is a required property for RadarRestDto and cannot be null");
            }
            else
            {
                this.AntennaRpm = antennaRpm;
            }
            // to ensure "control" is required (not null)
            if (control == null)
            {
                throw new InvalidDataException("control is a required property for RadarRestDto and cannot be null");
            }
            else
            {
                this.Control = control;
            }
            // to ensure "detail" is required (not null)
            if (detail == null)
            {
                throw new InvalidDataException("detail is a required property for RadarRestDto and cannot be null");
            }
            else
            {
                this.Detail = detail;
            }
            // to ensure "isNotUpdating" is required (not null)
            if (isNotUpdating == null)
            {
                throw new InvalidDataException("isNotUpdating is a required property for RadarRestDto and cannot be null");
            }
            else
            {
                this.IsNotUpdating = isNotUpdating;
            }
            // to ensure "links" is required (not null)
            if (links == null)
            {
                throw new InvalidDataException("links is a required property for RadarRestDto and cannot be null");
            }
            else
            {
                this.Links = links;
            }
            // to ensure "prf" is required (not null)
            if (prf == null)
            {
                throw new InvalidDataException("prf is a required property for RadarRestDto and cannot be null");
            }
            else
            {
                this.Prf = prf;
            }
            // to ensure "pulseWidth" is required (not null)
            if (pulseWidth == null)
            {
                throw new InvalidDataException("pulseWidth is a required property for RadarRestDto and cannot be null");
            }
            else
            {
                this.PulseWidth = pulseWidth;
            }
            // to ensure "radarFamily" is required (not null)
            if (radarFamily == null)
            {
                throw new InvalidDataException("radarFamily is a required property for RadarRestDto and cannot be null");
            }
            else
            {
                this.RadarFamily = radarFamily;
            }
            // to ensure "transmitFrequency" is required (not null)
            if (transmitFrequency == null)
            {
                throw new InvalidDataException("transmitFrequency is a required property for RadarRestDto and cannot be null");
            }
            else
            {
                this.TransmitFrequency = transmitFrequency;
            }
            // to ensure "warmupCountdown" is required (not null)
            if (warmupCountdown == null)
            {
                throw new InvalidDataException("warmupCountdown is a required property for RadarRestDto and cannot be null");
            }
            else
            {
                this.WarmupCountdown = warmupCountdown;
            }
            this.Id = id;
            this.Position = position;
            this.RadarFullName = radarFullName;
        }
        
        /// <summary>
        /// measured RPM value of the radar
        /// </summary>
        /// <value>measured RPM value of the radar</value>
        [DataMember(Name="antennaRpm", EmitDefaultValue=false)]
        public float? AntennaRpm { get; set; }

        /// <summary>
        /// Gets or Sets Control
        /// </summary>
        [DataMember(Name="control", EmitDefaultValue=false)]
        public RadarControlRestDto Control { get; set; }

        /// <summary>
        /// Gets or Sets Detail
        /// </summary>
        [DataMember(Name="detail", EmitDefaultValue=false)]
        public RadarDetailRestDto Detail { get; set; }

        /// <summary>
        /// [1-64]: the resource identifier; the radar id (the Radar Processor unit number)
        /// </summary>
        /// <value>[1-64]: the resource identifier; the radar id (the Radar Processor unit number)</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// [true]: boolean representing if this resource is no longer being updated or seen in the system and will soon no longer be accessible from the API
        /// </summary>
        /// <value>[true]: boolean representing if this resource is no longer being updated or seen in the system and will soon no longer be accessible from the API</value>
        [DataMember(Name="isNotUpdating", EmitDefaultValue=false)]
        public bool? IsNotUpdating { get; set; }

        /// <summary>
        /// *method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria
        /// </summary>
        /// <value>*method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria</value>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public GeoPosRestDto Position { get; set; }

        /// <summary>
        /// current PRF (Pulse Repetition Frequency) of the radar
        /// </summary>
        /// <value>current PRF (Pulse Repetition Frequency) of the radar</value>
        [DataMember(Name="prf", EmitDefaultValue=false)]
        public int? Prf { get; set; }

        /// <summary>
        /// pulse width of a pulsed magnetron radar in nanoseconds
        /// </summary>
        /// <value>pulse width of a pulsed magnetron radar in nanoseconds</value>
        [DataMember(Name="pulseWidth", EmitDefaultValue=false)]
        public int? PulseWidth { get; set; }


        /// <summary>
        /// RP Station Name followed by the Radar Name as in &#x27;RP Station X:Radar A&#x27;
        /// </summary>
        /// <value>RP Station Name followed by the Radar Name as in &#x27;RP Station X:Radar A&#x27;</value>
        [DataMember(Name="radarFullName", EmitDefaultValue=false)]
        public string RadarFullName { get; set; }

        /// <summary>
        /// transmit frequency of a solid state radar in kHz
        /// </summary>
        /// <value>transmit frequency of a solid state radar in kHz</value>
        [DataMember(Name="transmitFrequency", EmitDefaultValue=false)]
        public double? TransmitFrequency { get; set; }

        /// <summary>
        /// time in seconds until the radar is warmed and in Standby Mode. A -1 indicates the countdown is not active
        /// </summary>
        /// <value>time in seconds until the radar is warmed and in Standby Mode. A -1 indicates the countdown is not active</value>
        [DataMember(Name="warmupCountdown", EmitDefaultValue=false)]
        public int? WarmupCountdown { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RadarRestDto {\n");
            sb.Append("  AntennaRpm: ").Append(AntennaRpm).Append("\n");
            sb.Append("  Control: ").Append(Control).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsNotUpdating: ").Append(IsNotUpdating).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Prf: ").Append(Prf).Append("\n");
            sb.Append("  PulseWidth: ").Append(PulseWidth).Append("\n");
            sb.Append("  RadarFamily: ").Append(RadarFamily).Append("\n");
            sb.Append("  RadarFullName: ").Append(RadarFullName).Append("\n");
            sb.Append("  TransmitFrequency: ").Append(TransmitFrequency).Append("\n");
            sb.Append("  WarmupCountdown: ").Append(WarmupCountdown).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RadarRestDto);
        }

        /// <summary>
        /// Returns true if RadarRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of RadarRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RadarRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AntennaRpm == input.AntennaRpm ||
                    (this.AntennaRpm != null &&
                    this.AntennaRpm.Equals(input.AntennaRpm))
                ) && 
                (
                    this.Control == input.Control ||
                    (this.Control != null &&
                    this.Control.Equals(input.Control))
                ) && 
                (
                    this.Detail == input.Detail ||
                    (this.Detail != null &&
                    this.Detail.Equals(input.Detail))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsNotUpdating == input.IsNotUpdating ||
                    (this.IsNotUpdating != null &&
                    this.IsNotUpdating.Equals(input.IsNotUpdating))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Prf == input.Prf ||
                    (this.Prf != null &&
                    this.Prf.Equals(input.Prf))
                ) && 
                (
                    this.PulseWidth == input.PulseWidth ||
                    (this.PulseWidth != null &&
                    this.PulseWidth.Equals(input.PulseWidth))
                ) && 
                (
                    this.RadarFamily == input.RadarFamily ||
                    (this.RadarFamily != null &&
                    this.RadarFamily.Equals(input.RadarFamily))
                ) && 
                (
                    this.RadarFullName == input.RadarFullName ||
                    (this.RadarFullName != null &&
                    this.RadarFullName.Equals(input.RadarFullName))
                ) && 
                (
                    this.TransmitFrequency == input.TransmitFrequency ||
                    (this.TransmitFrequency != null &&
                    this.TransmitFrequency.Equals(input.TransmitFrequency))
                ) && 
                (
                    this.WarmupCountdown == input.WarmupCountdown ||
                    (this.WarmupCountdown != null &&
                    this.WarmupCountdown.Equals(input.WarmupCountdown))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AntennaRpm != null)
                    hashCode = hashCode * 59 + this.AntennaRpm.GetHashCode();
                if (this.Control != null)
                    hashCode = hashCode * 59 + this.Control.GetHashCode();
                if (this.Detail != null)
                    hashCode = hashCode * 59 + this.Detail.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsNotUpdating != null)
                    hashCode = hashCode * 59 + this.IsNotUpdating.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Prf != null)
                    hashCode = hashCode * 59 + this.Prf.GetHashCode();
                if (this.PulseWidth != null)
                    hashCode = hashCode * 59 + this.PulseWidth.GetHashCode();
                if (this.RadarFamily != null)
                    hashCode = hashCode * 59 + this.RadarFamily.GetHashCode();
                if (this.RadarFullName != null)
                    hashCode = hashCode * 59 + this.RadarFullName.GetHashCode();
                if (this.TransmitFrequency != null)
                    hashCode = hashCode * 59 + this.TransmitFrequency.GetHashCode();
                if (this.WarmupCountdown != null)
                    hashCode = hashCode * 59 + this.WarmupCountdown.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
