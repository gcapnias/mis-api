/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Readback status for the 21x7 radar
    /// </summary>
    [DataContract]
        public partial class F21x7StatusTypeRestDto :  IEquatable<F21x7StatusTypeRestDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="F21x7StatusTypeRestDto" /> class.
        /// </summary>
        /// <param name="magnetronHeaterStatus">magnetron heater status reported from the radar in volts (required).</param>
        /// <param name="minus12vStatus">-12 voltage status reported from the radar in volts (required).</param>
        /// <param name="plus12vStatus">+12 voltage status reported from the radar in volts (required).</param>
        /// <param name="plus32vStatus">+32 voltage status reported from the radar in volts (required).</param>
        /// <param name="plus5vStatus">+5 voltage status reported from the radar in volts (required).</param>
        /// <param name="radarTemperature">temperature reported from the radar in degrees celsius (required).</param>
        /// <param name="transmitHvStatus">transmit high voltage status reported from the radar in volts (required).</param>
        public F21x7StatusTypeRestDto(double? magnetronHeaterStatus = default(double?), double? minus12vStatus = default(double?), double? plus12vStatus = default(double?), double? plus32vStatus = default(double?), double? plus5vStatus = default(double?), double? radarTemperature = default(double?), double? transmitHvStatus = default(double?))
        {
            // to ensure "magnetronHeaterStatus" is required (not null)
            if (magnetronHeaterStatus == null)
            {
                throw new InvalidDataException("magnetronHeaterStatus is a required property for F21x7StatusTypeRestDto and cannot be null");
            }
            else
            {
                this.MagnetronHeaterStatus = magnetronHeaterStatus;
            }
            // to ensure "minus12vStatus" is required (not null)
            if (minus12vStatus == null)
            {
                throw new InvalidDataException("minus12vStatus is a required property for F21x7StatusTypeRestDto and cannot be null");
            }
            else
            {
                this.Minus12vStatus = minus12vStatus;
            }
            // to ensure "plus12vStatus" is required (not null)
            if (plus12vStatus == null)
            {
                throw new InvalidDataException("plus12vStatus is a required property for F21x7StatusTypeRestDto and cannot be null");
            }
            else
            {
                this.Plus12vStatus = plus12vStatus;
            }
            // to ensure "plus32vStatus" is required (not null)
            if (plus32vStatus == null)
            {
                throw new InvalidDataException("plus32vStatus is a required property for F21x7StatusTypeRestDto and cannot be null");
            }
            else
            {
                this.Plus32vStatus = plus32vStatus;
            }
            // to ensure "plus5vStatus" is required (not null)
            if (plus5vStatus == null)
            {
                throw new InvalidDataException("plus5vStatus is a required property for F21x7StatusTypeRestDto and cannot be null");
            }
            else
            {
                this.Plus5vStatus = plus5vStatus;
            }
            // to ensure "radarTemperature" is required (not null)
            if (radarTemperature == null)
            {
                throw new InvalidDataException("radarTemperature is a required property for F21x7StatusTypeRestDto and cannot be null");
            }
            else
            {
                this.RadarTemperature = radarTemperature;
            }
            // to ensure "transmitHvStatus" is required (not null)
            if (transmitHvStatus == null)
            {
                throw new InvalidDataException("transmitHvStatus is a required property for F21x7StatusTypeRestDto and cannot be null");
            }
            else
            {
                this.TransmitHvStatus = transmitHvStatus;
            }
        }
        
        /// <summary>
        /// magnetron heater status reported from the radar in volts
        /// </summary>
        /// <value>magnetron heater status reported from the radar in volts</value>
        [DataMember(Name="magnetronHeaterStatus", EmitDefaultValue=false)]
        public double? MagnetronHeaterStatus { get; set; }

        /// <summary>
        /// -12 voltage status reported from the radar in volts
        /// </summary>
        /// <value>-12 voltage status reported from the radar in volts</value>
        [DataMember(Name="minus12vStatus", EmitDefaultValue=false)]
        public double? Minus12vStatus { get; set; }

        /// <summary>
        /// +12 voltage status reported from the radar in volts
        /// </summary>
        /// <value>+12 voltage status reported from the radar in volts</value>
        [DataMember(Name="plus12vStatus", EmitDefaultValue=false)]
        public double? Plus12vStatus { get; set; }

        /// <summary>
        /// +32 voltage status reported from the radar in volts
        /// </summary>
        /// <value>+32 voltage status reported from the radar in volts</value>
        [DataMember(Name="plus32vStatus", EmitDefaultValue=false)]
        public double? Plus32vStatus { get; set; }

        /// <summary>
        /// +5 voltage status reported from the radar in volts
        /// </summary>
        /// <value>+5 voltage status reported from the radar in volts</value>
        [DataMember(Name="plus5vStatus", EmitDefaultValue=false)]
        public double? Plus5vStatus { get; set; }

        /// <summary>
        /// temperature reported from the radar in degrees celsius
        /// </summary>
        /// <value>temperature reported from the radar in degrees celsius</value>
        [DataMember(Name="radarTemperature", EmitDefaultValue=false)]
        public double? RadarTemperature { get; set; }

        /// <summary>
        /// transmit high voltage status reported from the radar in volts
        /// </summary>
        /// <value>transmit high voltage status reported from the radar in volts</value>
        [DataMember(Name="transmitHvStatus", EmitDefaultValue=false)]
        public double? TransmitHvStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class F21x7StatusTypeRestDto {\n");
            sb.Append("  MagnetronHeaterStatus: ").Append(MagnetronHeaterStatus).Append("\n");
            sb.Append("  Minus12vStatus: ").Append(Minus12vStatus).Append("\n");
            sb.Append("  Plus12vStatus: ").Append(Plus12vStatus).Append("\n");
            sb.Append("  Plus32vStatus: ").Append(Plus32vStatus).Append("\n");
            sb.Append("  Plus5vStatus: ").Append(Plus5vStatus).Append("\n");
            sb.Append("  RadarTemperature: ").Append(RadarTemperature).Append("\n");
            sb.Append("  TransmitHvStatus: ").Append(TransmitHvStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as F21x7StatusTypeRestDto);
        }

        /// <summary>
        /// Returns true if F21x7StatusTypeRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of F21x7StatusTypeRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(F21x7StatusTypeRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MagnetronHeaterStatus == input.MagnetronHeaterStatus ||
                    (this.MagnetronHeaterStatus != null &&
                    this.MagnetronHeaterStatus.Equals(input.MagnetronHeaterStatus))
                ) && 
                (
                    this.Minus12vStatus == input.Minus12vStatus ||
                    (this.Minus12vStatus != null &&
                    this.Minus12vStatus.Equals(input.Minus12vStatus))
                ) && 
                (
                    this.Plus12vStatus == input.Plus12vStatus ||
                    (this.Plus12vStatus != null &&
                    this.Plus12vStatus.Equals(input.Plus12vStatus))
                ) && 
                (
                    this.Plus32vStatus == input.Plus32vStatus ||
                    (this.Plus32vStatus != null &&
                    this.Plus32vStatus.Equals(input.Plus32vStatus))
                ) && 
                (
                    this.Plus5vStatus == input.Plus5vStatus ||
                    (this.Plus5vStatus != null &&
                    this.Plus5vStatus.Equals(input.Plus5vStatus))
                ) && 
                (
                    this.RadarTemperature == input.RadarTemperature ||
                    (this.RadarTemperature != null &&
                    this.RadarTemperature.Equals(input.RadarTemperature))
                ) && 
                (
                    this.TransmitHvStatus == input.TransmitHvStatus ||
                    (this.TransmitHvStatus != null &&
                    this.TransmitHvStatus.Equals(input.TransmitHvStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MagnetronHeaterStatus != null)
                    hashCode = hashCode * 59 + this.MagnetronHeaterStatus.GetHashCode();
                if (this.Minus12vStatus != null)
                    hashCode = hashCode * 59 + this.Minus12vStatus.GetHashCode();
                if (this.Plus12vStatus != null)
                    hashCode = hashCode * 59 + this.Plus12vStatus.GetHashCode();
                if (this.Plus32vStatus != null)
                    hashCode = hashCode * 59 + this.Plus32vStatus.GetHashCode();
                if (this.Plus5vStatus != null)
                    hashCode = hashCode * 59 + this.Plus5vStatus.GetHashCode();
                if (this.RadarTemperature != null)
                    hashCode = hashCode * 59 + this.RadarTemperature.GetHashCode();
                if (this.TransmitHvStatus != null)
                    hashCode = hashCode * 59 + this.TransmitHvStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
