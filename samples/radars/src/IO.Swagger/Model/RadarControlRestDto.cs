/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RadarControlRestDto
    /// </summary>
    [DataContract]
        public partial class RadarControlRestDto :  IEquatable<RadarControlRestDto>, IValidatableObject
    {
        /// <summary>
        /// clutter mode (typically Manual, Semi-Auto, or Full-Auto)
        /// </summary>
        /// <value>clutter mode (typically Manual, Semi-Auto, or Full-Auto)</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ClutterModeEnum
        {
            /// <summary>
            /// Enum Manual for value: Manual
            /// </summary>
            [EnumMember(Value = "Manual")]
            Manual = 1,
            /// <summary>
            /// Enum SemiAuto for value: Semi-Auto
            /// </summary>
            [EnumMember(Value = "Semi-Auto")]
            SemiAuto = 2,
            /// <summary>
            /// Enum FullAuto for value: Full-Auto
            /// </summary>
            [EnumMember(Value = "Full-Auto")]
            FullAuto = 3,
            /// <summary>
            /// Enum MTD for value: MTD
            /// </summary>
            [EnumMember(Value = "MTD")]
            MTD = 4,
            /// <summary>
            /// Enum Transceiver for value: Transceiver
            /// </summary>
            [EnumMember(Value = "Transceiver")]
            Transceiver = 5,
            /// <summary>
            /// Enum Other for value: Other
            /// </summary>
            [EnumMember(Value = "Other")]
            Other = 6        }
        /// <summary>
        /// clutter mode (typically Manual, Semi-Auto, or Full-Auto)
        /// </summary>
        /// <value>clutter mode (typically Manual, Semi-Auto, or Full-Auto)</value>
        [DataMember(Name="clutterMode", EmitDefaultValue=false)]
        public ClutterModeEnum? ClutterMode { get; set; }
        /// <summary>
        /// interference rejection control
        /// </summary>
        /// <value>interference rejection control</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum IrControlEnum
        {
            /// <summary>
            /// Enum Off for value: Off
            /// </summary>
            [EnumMember(Value = "Off")]
            Off = 1,
            /// <summary>
            /// Enum Low for value: Low
            /// </summary>
            [EnumMember(Value = "Low")]
            Low = 2,
            /// <summary>
            /// Enum Medium for value: Medium
            /// </summary>
            [EnumMember(Value = "Medium")]
            Medium = 3,
            /// <summary>
            /// Enum High for value: High
            /// </summary>
            [EnumMember(Value = "High")]
            High = 4        }
        /// <summary>
        /// interference rejection control
        /// </summary>
        /// <value>interference rejection control</value>
        [DataMember(Name="irControl", EmitDefaultValue=false)]
        public IrControlEnum? IrControl { get; set; }
        /// <summary>
        /// pulse mode of the radar
        /// </summary>
        /// <value>pulse mode of the radar</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum RadarModeEnum
        {
            /// <summary>
            /// Enum Auto for value: Auto
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto = 1,
            /// <summary>
            /// Enum Manual for value: Manual
            /// </summary>
            [EnumMember(Value = "Manual")]
            Manual = 2,
            /// <summary>
            /// Enum Short1 for value: Short-1
            /// </summary>
            [EnumMember(Value = "Short-1")]
            Short1 = 3,
            /// <summary>
            /// Enum Short2 for value: Short-2
            /// </summary>
            [EnumMember(Value = "Short-2")]
            Short2 = 4,
            /// <summary>
            /// Enum Medium1 for value: Medium-1
            /// </summary>
            [EnumMember(Value = "Medium-1")]
            Medium1 = 5,
            /// <summary>
            /// Enum Medium2 for value: Medium-2
            /// </summary>
            [EnumMember(Value = "Medium-2")]
            Medium2 = 6,
            /// <summary>
            /// Enum Long1 for value: Long-1
            /// </summary>
            [EnumMember(Value = "Long-1")]
            Long1 = 7,
            /// <summary>
            /// Enum Long2 for value: Long-2
            /// </summary>
            [EnumMember(Value = "Long-2")]
            Long2 = 8,
            /// <summary>
            /// Enum Short3 for value: Short-3
            /// </summary>
            [EnumMember(Value = "Short-3")]
            Short3 = 9,
            /// <summary>
            /// Enum Medium3 for value: Medium-3
            /// </summary>
            [EnumMember(Value = "Medium-3")]
            Medium3 = 10,
            /// <summary>
            /// Enum Long3 for value: Long-3
            /// </summary>
            [EnumMember(Value = "Long-3")]
            Long3 = 11        }
        /// <summary>
        /// pulse mode of the radar
        /// </summary>
        /// <value>pulse mode of the radar</value>
        [DataMember(Name="radarMode", EmitDefaultValue=false)]
        public RadarModeEnum RadarMode { get; set; }
        /// <summary>
        /// radar state for this radar
        /// </summary>
        /// <value>radar state for this radar</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum RadarStateEnum
        {
            /// <summary>
            /// Enum Warmup for value: Warmup
            /// </summary>
            [EnumMember(Value = "Warmup")]
            Warmup = 1,
            /// <summary>
            /// Enum Off for value: Off
            /// </summary>
            [EnumMember(Value = "Off")]
            Off = 2,
            /// <summary>
            /// Enum Standby for value: Standby
            /// </summary>
            [EnumMember(Value = "Standby")]
            Standby = 3,
            /// <summary>
            /// Enum Radiate for value: Radiate
            /// </summary>
            [EnumMember(Value = "Radiate")]
            Radiate = 4,
            /// <summary>
            /// Enum Rotate for value: Rotate
            /// </summary>
            [EnumMember(Value = "Rotate")]
            Rotate = 5,
            /// <summary>
            /// Enum RotateRadiate for value: RotateRadiate
            /// </summary>
            [EnumMember(Value = "RotateRadiate")]
            RotateRadiate = 6,
            /// <summary>
            /// Enum SafetyStandby for value: SafetyStandby
            /// </summary>
            [EnumMember(Value = "SafetyStandby")]
            SafetyStandby = 7,
            /// <summary>
            /// Enum RadarControlFailure for value: RadarControlFailure
            /// </summary>
            [EnumMember(Value = "RadarControlFailure")]
            RadarControlFailure = 8,
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 9        }
        /// <summary>
        /// radar state for this radar
        /// </summary>
        /// <value>radar state for this radar</value>
        [DataMember(Name="radarState", EmitDefaultValue=false)]
        public RadarStateEnum? RadarState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RadarControlRestDto" /> class.
        /// </summary>
        /// <param name="clutterMode">clutter mode (typically Manual, Semi-Auto, or Full-Auto).</param>
        /// <param name="controller">ip address of the Radar&#x27;s primary controller.</param>
        /// <param name="controllerName">name of the station which has control. If it is the &#x27;MIS&#x27; station, then the loginId of the user is typically also shown.</param>
        /// <param name="gainControl">[0-100]: gain control.</param>
        /// <param name="irControl">interference rejection control.</param>
        /// <param name="isAdjunctRp">[false, true] is the Radar an &#x27;Adjunct&#x27; RP (can only change a limited set of fields).</param>
        /// <param name="isNotUpdating">[true]: boolean representing if this resource is no longer being updated or seen in the system and will soon no longer be accessible from the API.</param>
        /// <param name="links">*method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria (required).</param>
        /// <param name="radarMode">pulse mode of the radar (required).</param>
        /// <param name="radarState">radar state for this radar.</param>
        /// <param name="rainControl">[0-100]: control for rain clutter.</param>
        /// <param name="rangeScale">[24 or 48]: range scale setting (applies only if Kelvin Hughes type of radar).</param>
        /// <param name="rpNum">[1-64]: RP Number of the radar (required).</param>
        /// <param name="seaControl">[0-100]: control for sea clutter.</param>
        /// <param name="termaProfile">[0-15]: Terma Profile setting for the radar. (Not shown if not a Terma Radar or if the profile is not set or if the SSR system does not know the profile).</param>
        public RadarControlRestDto(ClutterModeEnum? clutterMode = default(ClutterModeEnum?), string controller = default(string), string controllerName = default(string), int? gainControl = default(int?), IrControlEnum? irControl = default(IrControlEnum?), bool? isAdjunctRp = default(bool?), bool? isNotUpdating = default(bool?), List<Link> links = default(List<Link>), RadarModeEnum radarMode = default(RadarModeEnum), RadarStateEnum? radarState = default(RadarStateEnum?), int? rainControl = default(int?), int? rangeScale = default(int?), int? rpNum = default(int?), int? seaControl = default(int?), int? termaProfile = default(int?))
        {
            // to ensure "links" is required (not null)
            if (links == null)
            {
                throw new InvalidDataException("links is a required property for RadarControlRestDto and cannot be null");
            }
            else
            {
                this.Links = links;
            }
            // to ensure "radarMode" is required (not null)
            if (radarMode == null)
            {
                throw new InvalidDataException("radarMode is a required property for RadarControlRestDto and cannot be null");
            }
            else
            {
                this.RadarMode = radarMode;
            }
            // to ensure "rpNum" is required (not null)
            if (rpNum == null)
            {
                throw new InvalidDataException("rpNum is a required property for RadarControlRestDto and cannot be null");
            }
            else
            {
                this.RpNum = rpNum;
            }
            this.ClutterMode = clutterMode;
            this.Controller = controller;
            this.ControllerName = controllerName;
            this.GainControl = gainControl;
            this.IrControl = irControl;
            this.IsAdjunctRp = isAdjunctRp;
            this.IsNotUpdating = isNotUpdating;
            this.RadarState = radarState;
            this.RainControl = rainControl;
            this.RangeScale = rangeScale;
            this.SeaControl = seaControl;
            this.TermaProfile = termaProfile;
        }
        

        /// <summary>
        /// ip address of the Radar&#x27;s primary controller
        /// </summary>
        /// <value>ip address of the Radar&#x27;s primary controller</value>
        [DataMember(Name="controller", EmitDefaultValue=false)]
        public string Controller { get; set; }

        /// <summary>
        /// name of the station which has control. If it is the &#x27;MIS&#x27; station, then the loginId of the user is typically also shown
        /// </summary>
        /// <value>name of the station which has control. If it is the &#x27;MIS&#x27; station, then the loginId of the user is typically also shown</value>
        [DataMember(Name="controllerName", EmitDefaultValue=false)]
        public string ControllerName { get; set; }

        /// <summary>
        /// [0-100]: gain control
        /// </summary>
        /// <value>[0-100]: gain control</value>
        [DataMember(Name="gainControl", EmitDefaultValue=false)]
        public int? GainControl { get; set; }


        /// <summary>
        /// [false, true] is the Radar an &#x27;Adjunct&#x27; RP (can only change a limited set of fields)
        /// </summary>
        /// <value>[false, true] is the Radar an &#x27;Adjunct&#x27; RP (can only change a limited set of fields)</value>
        [DataMember(Name="isAdjunctRp", EmitDefaultValue=false)]
        public bool? IsAdjunctRp { get; set; }

        /// <summary>
        /// [true]: boolean representing if this resource is no longer being updated or seen in the system and will soon no longer be accessible from the API
        /// </summary>
        /// <value>[true]: boolean representing if this resource is no longer being updated or seen in the system and will soon no longer be accessible from the API</value>
        [DataMember(Name="isNotUpdating", EmitDefaultValue=false)]
        public bool? IsNotUpdating { get; set; }

        /// <summary>
        /// *method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria
        /// </summary>
        /// <value>*method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria</value>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<Link> Links { get; set; }



        /// <summary>
        /// [0-100]: control for rain clutter
        /// </summary>
        /// <value>[0-100]: control for rain clutter</value>
        [DataMember(Name="rainControl", EmitDefaultValue=false)]
        public int? RainControl { get; set; }

        /// <summary>
        /// [24 or 48]: range scale setting (applies only if Kelvin Hughes type of radar)
        /// </summary>
        /// <value>[24 or 48]: range scale setting (applies only if Kelvin Hughes type of radar)</value>
        [DataMember(Name="rangeScale", EmitDefaultValue=false)]
        public int? RangeScale { get; set; }

        /// <summary>
        /// [1-64]: RP Number of the radar
        /// </summary>
        /// <value>[1-64]: RP Number of the radar</value>
        [DataMember(Name="rpNum", EmitDefaultValue=false)]
        public int? RpNum { get; set; }

        /// <summary>
        /// [0-100]: control for sea clutter
        /// </summary>
        /// <value>[0-100]: control for sea clutter</value>
        [DataMember(Name="seaControl", EmitDefaultValue=false)]
        public int? SeaControl { get; set; }

        /// <summary>
        /// [0-15]: Terma Profile setting for the radar. (Not shown if not a Terma Radar or if the profile is not set or if the SSR system does not know the profile)
        /// </summary>
        /// <value>[0-15]: Terma Profile setting for the radar. (Not shown if not a Terma Radar or if the profile is not set or if the SSR system does not know the profile)</value>
        [DataMember(Name="termaProfile", EmitDefaultValue=false)]
        public int? TermaProfile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RadarControlRestDto {\n");
            sb.Append("  ClutterMode: ").Append(ClutterMode).Append("\n");
            sb.Append("  Controller: ").Append(Controller).Append("\n");
            sb.Append("  ControllerName: ").Append(ControllerName).Append("\n");
            sb.Append("  GainControl: ").Append(GainControl).Append("\n");
            sb.Append("  IrControl: ").Append(IrControl).Append("\n");
            sb.Append("  IsAdjunctRp: ").Append(IsAdjunctRp).Append("\n");
            sb.Append("  IsNotUpdating: ").Append(IsNotUpdating).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  RadarMode: ").Append(RadarMode).Append("\n");
            sb.Append("  RadarState: ").Append(RadarState).Append("\n");
            sb.Append("  RainControl: ").Append(RainControl).Append("\n");
            sb.Append("  RangeScale: ").Append(RangeScale).Append("\n");
            sb.Append("  RpNum: ").Append(RpNum).Append("\n");
            sb.Append("  SeaControl: ").Append(SeaControl).Append("\n");
            sb.Append("  TermaProfile: ").Append(TermaProfile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RadarControlRestDto);
        }

        /// <summary>
        /// Returns true if RadarControlRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of RadarControlRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RadarControlRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClutterMode == input.ClutterMode ||
                    (this.ClutterMode != null &&
                    this.ClutterMode.Equals(input.ClutterMode))
                ) && 
                (
                    this.Controller == input.Controller ||
                    (this.Controller != null &&
                    this.Controller.Equals(input.Controller))
                ) && 
                (
                    this.ControllerName == input.ControllerName ||
                    (this.ControllerName != null &&
                    this.ControllerName.Equals(input.ControllerName))
                ) && 
                (
                    this.GainControl == input.GainControl ||
                    (this.GainControl != null &&
                    this.GainControl.Equals(input.GainControl))
                ) && 
                (
                    this.IrControl == input.IrControl ||
                    (this.IrControl != null &&
                    this.IrControl.Equals(input.IrControl))
                ) && 
                (
                    this.IsAdjunctRp == input.IsAdjunctRp ||
                    (this.IsAdjunctRp != null &&
                    this.IsAdjunctRp.Equals(input.IsAdjunctRp))
                ) && 
                (
                    this.IsNotUpdating == input.IsNotUpdating ||
                    (this.IsNotUpdating != null &&
                    this.IsNotUpdating.Equals(input.IsNotUpdating))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.RadarMode == input.RadarMode ||
                    (this.RadarMode != null &&
                    this.RadarMode.Equals(input.RadarMode))
                ) && 
                (
                    this.RadarState == input.RadarState ||
                    (this.RadarState != null &&
                    this.RadarState.Equals(input.RadarState))
                ) && 
                (
                    this.RainControl == input.RainControl ||
                    (this.RainControl != null &&
                    this.RainControl.Equals(input.RainControl))
                ) && 
                (
                    this.RangeScale == input.RangeScale ||
                    (this.RangeScale != null &&
                    this.RangeScale.Equals(input.RangeScale))
                ) && 
                (
                    this.RpNum == input.RpNum ||
                    (this.RpNum != null &&
                    this.RpNum.Equals(input.RpNum))
                ) && 
                (
                    this.SeaControl == input.SeaControl ||
                    (this.SeaControl != null &&
                    this.SeaControl.Equals(input.SeaControl))
                ) && 
                (
                    this.TermaProfile == input.TermaProfile ||
                    (this.TermaProfile != null &&
                    this.TermaProfile.Equals(input.TermaProfile))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClutterMode != null)
                    hashCode = hashCode * 59 + this.ClutterMode.GetHashCode();
                if (this.Controller != null)
                    hashCode = hashCode * 59 + this.Controller.GetHashCode();
                if (this.ControllerName != null)
                    hashCode = hashCode * 59 + this.ControllerName.GetHashCode();
                if (this.GainControl != null)
                    hashCode = hashCode * 59 + this.GainControl.GetHashCode();
                if (this.IrControl != null)
                    hashCode = hashCode * 59 + this.IrControl.GetHashCode();
                if (this.IsAdjunctRp != null)
                    hashCode = hashCode * 59 + this.IsAdjunctRp.GetHashCode();
                if (this.IsNotUpdating != null)
                    hashCode = hashCode * 59 + this.IsNotUpdating.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.RadarMode != null)
                    hashCode = hashCode * 59 + this.RadarMode.GetHashCode();
                if (this.RadarState != null)
                    hashCode = hashCode * 59 + this.RadarState.GetHashCode();
                if (this.RainControl != null)
                    hashCode = hashCode * 59 + this.RainControl.GetHashCode();
                if (this.RangeScale != null)
                    hashCode = hashCode * 59 + this.RangeScale.GetHashCode();
                if (this.RpNum != null)
                    hashCode = hashCode * 59 + this.RpNum.GetHashCode();
                if (this.SeaControl != null)
                    hashCode = hashCode * 59 + this.SeaControl.GetHashCode();
                if (this.TermaProfile != null)
                    hashCode = hashCode * 59 + this.TermaProfile.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
