/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Detail for the Radar
    /// </summary>
    [DataContract]
        public partial class RadarDetailRestDto :  IEquatable<RadarDetailRestDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RadarDetailRestDto" /> class.
        /// </summary>
        /// <param name="f21x7Status">f21x7Status (required).</param>
        /// <param name="id">[1-64]: the resource identifier; the radar id (the Radar Processor unit number).</param>
        /// <param name="isAcProtectionPsActive">is the AC protection power supply active. Available with expand&#x3D;detail (required).</param>
        /// <param name="isAcProtectionPsPowered">is the AC protection power supply powered. Available with expand&#x3D;detail (required).</param>
        /// <param name="isAutotuned">is the radar being auto tuned as opposed to manually tuned. Available with expand&#x3D;detail (required).</param>
        /// <param name="isHvPsActive">is the High Voltage Power Supply active. Available with expand&#x3D;detail (required).</param>
        /// <param name="isHvPsPowered">is the High Voltage Power Supply powered. Available with expand&#x3D;detail (required).</param>
        /// <param name="isLvPsActive">is the Low Voltage Power Supply active. Available with expand&#x3D;detail (required).</param>
        /// <param name="isLvPsPowered">is the Low Voltage Power Supply powered. Available with expand&#x3D;detail (required).</param>
        /// <param name="isMagnetronPowered">is magnetron power provided. Not available for all Radars (e.g., not available for Terma Radars). Available with expand&#x3D;detail (required).</param>
        /// <param name="isMotorPowered">is power provided to the motor. Available with expand&#x3D;detail (required).</param>
        /// <param name="isMotorTurning">is radar&#x27;s readback status saying motor is turning. Available with expand&#x3D;detail (required).</param>
        /// <param name="isMotorTurningCommanded">is motor commanded to turn. Available with expand&#x3D;detail (required).</param>
        /// <param name="isPerformanceMonitorActivated">is the performance monitor activated. Available with expand&#x3D;detail (required).</param>
        /// <param name="isRtModulePowered">is there power to the RT module. Available with expand&#x3D;detail (required).</param>
        /// <param name="isRtPowered">is the RT powered (required).</param>
        /// <param name="isSignalBearingGeneratorPowered">is the signal bearing generator powered. Available with expand&#x3D;detail (required).</param>
        /// <param name="isTransmitTriggerActive">is the transmit trigger active. Available with expand&#x3D;detail (required).</param>
        /// <param name="kelvinHughesRadarInfo">kelvinHughesRadarInfo (required).</param>
        /// <param name="links">*method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria (required).</param>
        /// <param name="magnetronCurrent">magnetron current value sensed by the radar. Not available for all Radars (e.g., not available for Terma Radars). Available with expand&#x3D;detail (required).</param>
        /// <param name="mainBangSuppressLevel">main bang suppression level sensed by the radar. Available with expand&#x3D;detail (required).</param>
        /// <param name="mainBangSuppressTiming">main bang timing level sensed by the radar. Available with expand&#x3D;detail (required).</param>
        /// <param name="micCurrent">MIC current value sensed by the radar. Available with expand&#x3D;detail (required).</param>
        /// <param name="orderedTuneVoltage">ordered voltage sent to the radar which controls the tune of the radar&#x27;s receiver. Available with expand&#x3D;detail (required).</param>
        /// <param name="rfCoarseTune">RF coarse value used to generate the ordered voltage. Available with expand&#x3D;detail (required).</param>
        /// <param name="rfFineTune">RF fine value used to generate the ordered voltage. Available with expand&#x3D;detail (required).</param>
        /// <param name="tuneIndicator">the RF Tune readback value, it indicates how well the receiver is tuned. A value &lt;&#x3D; 1.0 is badly tuned or there is something wrong with the radar system and &lt;&#x3D; 1.4 is poorly tuned, otherwise it is considered acceptable. Available with expand&#x3D;detail (required).</param>
        public RadarDetailRestDto(F21x7StatusTypeRestDto f21x7Status = default(F21x7StatusTypeRestDto), int? id = default(int?), bool? isAcProtectionPsActive = default(bool?), bool? isAcProtectionPsPowered = default(bool?), bool? isAutotuned = default(bool?), bool? isHvPsActive = default(bool?), bool? isHvPsPowered = default(bool?), bool? isLvPsActive = default(bool?), bool? isLvPsPowered = default(bool?), bool? isMagnetronPowered = default(bool?), bool? isMotorPowered = default(bool?), bool? isMotorTurning = default(bool?), bool? isMotorTurningCommanded = default(bool?), bool? isPerformanceMonitorActivated = default(bool?), bool? isRtModulePowered = default(bool?), bool? isRtPowered = default(bool?), bool? isSignalBearingGeneratorPowered = default(bool?), bool? isTransmitTriggerActive = default(bool?), KelvinHughesRadarInfoRestDto kelvinHughesRadarInfo = default(KelvinHughesRadarInfoRestDto), List<Link> links = default(List<Link>), float? magnetronCurrent = default(float?), float? mainBangSuppressLevel = default(float?), float? mainBangSuppressTiming = default(float?), float? micCurrent = default(float?), float? orderedTuneVoltage = default(float?), int? rfCoarseTune = default(int?), int? rfFineTune = default(int?), float? tuneIndicator = default(float?))
        {
            // to ensure "f21x7Status" is required (not null)
            if (f21x7Status == null)
            {
                throw new InvalidDataException("f21x7Status is a required property for RadarDetailRestDto and cannot be null");
            }
            else
            {
                this.F21x7Status = f21x7Status;
            }
            // to ensure "isAcProtectionPsActive" is required (not null)
            if (isAcProtectionPsActive == null)
            {
                throw new InvalidDataException("isAcProtectionPsActive is a required property for RadarDetailRestDto and cannot be null");
            }
            else
            {
                this.IsAcProtectionPsActive = isAcProtectionPsActive;
            }
            // to ensure "isAcProtectionPsPowered" is required (not null)
            if (isAcProtectionPsPowered == null)
            {
                throw new InvalidDataException("isAcProtectionPsPowered is a required property for RadarDetailRestDto and cannot be null");
            }
            else
            {
                this.IsAcProtectionPsPowered = isAcProtectionPsPowered;
            }
            // to ensure "isAutotuned" is required (not null)
            if (isAutotuned == null)
            {
                throw new InvalidDataException("isAutotuned is a required property for RadarDetailRestDto and cannot be null");
            }
            else
            {
                this.IsAutotuned = isAutotuned;
            }
            // to ensure "isHvPsActive" is required (not null)
            if (isHvPsActive == null)
            {
                throw new InvalidDataException("isHvPsActive is a required property for RadarDetailRestDto and cannot be null");
            }
            else
            {
                this.IsHvPsActive = isHvPsActive;
            }
            // to ensure "isHvPsPowered" is required (not null)
            if (isHvPsPowered == null)
            {
                throw new InvalidDataException("isHvPsPowered is a required property for RadarDetailRestDto and cannot be null");
            }
            else
            {
                this.IsHvPsPowered = isHvPsPowered;
            }
            // to ensure "isLvPsActive" is required (not null)
            if (isLvPsActive == null)
            {
                throw new InvalidDataException("isLvPsActive is a required property for RadarDetailRestDto and cannot be null");
            }
            else
            {
                this.IsLvPsActive = isLvPsActive;
            }
            // to ensure "isLvPsPowered" is required (not null)
            if (isLvPsPowered == null)
            {
                throw new InvalidDataException("isLvPsPowered is a required property for RadarDetailRestDto and cannot be null");
            }
            else
            {
                this.IsLvPsPowered = isLvPsPowered;
            }
            // to ensure "isMagnetronPowered" is required (not null)
            if (isMagnetronPowered == null)
            {
                throw new InvalidDataException("isMagnetronPowered is a required property for RadarDetailRestDto and cannot be null");
            }
            else
            {
                this.IsMagnetronPowered = isMagnetronPowered;
            }
            // to ensure "isMotorPowered" is required (not null)
            if (isMotorPowered == null)
            {
                throw new InvalidDataException("isMotorPowered is a required property for RadarDetailRestDto and cannot be null");
            }
            else
            {
                this.IsMotorPowered = isMotorPowered;
            }
            // to ensure "isMotorTurning" is required (not null)
            if (isMotorTurning == null)
            {
                throw new InvalidDataException("isMotorTurning is a required property for RadarDetailRestDto and cannot be null");
            }
            else
            {
                this.IsMotorTurning = isMotorTurning;
            }
            // to ensure "isMotorTurningCommanded" is required (not null)
            if (isMotorTurningCommanded == null)
            {
                throw new InvalidDataException("isMotorTurningCommanded is a required property for RadarDetailRestDto and cannot be null");
            }
            else
            {
                this.IsMotorTurningCommanded = isMotorTurningCommanded;
            }
            // to ensure "isPerformanceMonitorActivated" is required (not null)
            if (isPerformanceMonitorActivated == null)
            {
                throw new InvalidDataException("isPerformanceMonitorActivated is a required property for RadarDetailRestDto and cannot be null");
            }
            else
            {
                this.IsPerformanceMonitorActivated = isPerformanceMonitorActivated;
            }
            // to ensure "isRtModulePowered" is required (not null)
            if (isRtModulePowered == null)
            {
                throw new InvalidDataException("isRtModulePowered is a required property for RadarDetailRestDto and cannot be null");
            }
            else
            {
                this.IsRtModulePowered = isRtModulePowered;
            }
            // to ensure "isRtPowered" is required (not null)
            if (isRtPowered == null)
            {
                throw new InvalidDataException("isRtPowered is a required property for RadarDetailRestDto and cannot be null");
            }
            else
            {
                this.IsRtPowered = isRtPowered;
            }
            // to ensure "isSignalBearingGeneratorPowered" is required (not null)
            if (isSignalBearingGeneratorPowered == null)
            {
                throw new InvalidDataException("isSignalBearingGeneratorPowered is a required property for RadarDetailRestDto and cannot be null");
            }
            else
            {
                this.IsSignalBearingGeneratorPowered = isSignalBearingGeneratorPowered;
            }
            // to ensure "isTransmitTriggerActive" is required (not null)
            if (isTransmitTriggerActive == null)
            {
                throw new InvalidDataException("isTransmitTriggerActive is a required property for RadarDetailRestDto and cannot be null");
            }
            else
            {
                this.IsTransmitTriggerActive = isTransmitTriggerActive;
            }
            // to ensure "kelvinHughesRadarInfo" is required (not null)
            if (kelvinHughesRadarInfo == null)
            {
                throw new InvalidDataException("kelvinHughesRadarInfo is a required property for RadarDetailRestDto and cannot be null");
            }
            else
            {
                this.KelvinHughesRadarInfo = kelvinHughesRadarInfo;
            }
            // to ensure "links" is required (not null)
            if (links == null)
            {
                throw new InvalidDataException("links is a required property for RadarDetailRestDto and cannot be null");
            }
            else
            {
                this.Links = links;
            }
            // to ensure "magnetronCurrent" is required (not null)
            if (magnetronCurrent == null)
            {
                throw new InvalidDataException("magnetronCurrent is a required property for RadarDetailRestDto and cannot be null");
            }
            else
            {
                this.MagnetronCurrent = magnetronCurrent;
            }
            // to ensure "mainBangSuppressLevel" is required (not null)
            if (mainBangSuppressLevel == null)
            {
                throw new InvalidDataException("mainBangSuppressLevel is a required property for RadarDetailRestDto and cannot be null");
            }
            else
            {
                this.MainBangSuppressLevel = mainBangSuppressLevel;
            }
            // to ensure "mainBangSuppressTiming" is required (not null)
            if (mainBangSuppressTiming == null)
            {
                throw new InvalidDataException("mainBangSuppressTiming is a required property for RadarDetailRestDto and cannot be null");
            }
            else
            {
                this.MainBangSuppressTiming = mainBangSuppressTiming;
            }
            // to ensure "micCurrent" is required (not null)
            if (micCurrent == null)
            {
                throw new InvalidDataException("micCurrent is a required property for RadarDetailRestDto and cannot be null");
            }
            else
            {
                this.MicCurrent = micCurrent;
            }
            // to ensure "orderedTuneVoltage" is required (not null)
            if (orderedTuneVoltage == null)
            {
                throw new InvalidDataException("orderedTuneVoltage is a required property for RadarDetailRestDto and cannot be null");
            }
            else
            {
                this.OrderedTuneVoltage = orderedTuneVoltage;
            }
            // to ensure "rfCoarseTune" is required (not null)
            if (rfCoarseTune == null)
            {
                throw new InvalidDataException("rfCoarseTune is a required property for RadarDetailRestDto and cannot be null");
            }
            else
            {
                this.RfCoarseTune = rfCoarseTune;
            }
            // to ensure "rfFineTune" is required (not null)
            if (rfFineTune == null)
            {
                throw new InvalidDataException("rfFineTune is a required property for RadarDetailRestDto and cannot be null");
            }
            else
            {
                this.RfFineTune = rfFineTune;
            }
            // to ensure "tuneIndicator" is required (not null)
            if (tuneIndicator == null)
            {
                throw new InvalidDataException("tuneIndicator is a required property for RadarDetailRestDto and cannot be null");
            }
            else
            {
                this.TuneIndicator = tuneIndicator;
            }
            this.Id = id;
        }
        
        /// <summary>
        /// Gets or Sets F21x7Status
        /// </summary>
        [DataMember(Name="f21x7Status", EmitDefaultValue=false)]
        public F21x7StatusTypeRestDto F21x7Status { get; set; }

        /// <summary>
        /// [1-64]: the resource identifier; the radar id (the Radar Processor unit number)
        /// </summary>
        /// <value>[1-64]: the resource identifier; the radar id (the Radar Processor unit number)</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// is the AC protection power supply active. Available with expand&#x3D;detail
        /// </summary>
        /// <value>is the AC protection power supply active. Available with expand&#x3D;detail</value>
        [DataMember(Name="isAcProtectionPsActive", EmitDefaultValue=false)]
        public bool? IsAcProtectionPsActive { get; set; }

        /// <summary>
        /// is the AC protection power supply powered. Available with expand&#x3D;detail
        /// </summary>
        /// <value>is the AC protection power supply powered. Available with expand&#x3D;detail</value>
        [DataMember(Name="isAcProtectionPsPowered", EmitDefaultValue=false)]
        public bool? IsAcProtectionPsPowered { get; set; }

        /// <summary>
        /// is the radar being auto tuned as opposed to manually tuned. Available with expand&#x3D;detail
        /// </summary>
        /// <value>is the radar being auto tuned as opposed to manually tuned. Available with expand&#x3D;detail</value>
        [DataMember(Name="isAutotuned", EmitDefaultValue=false)]
        public bool? IsAutotuned { get; set; }

        /// <summary>
        /// is the High Voltage Power Supply active. Available with expand&#x3D;detail
        /// </summary>
        /// <value>is the High Voltage Power Supply active. Available with expand&#x3D;detail</value>
        [DataMember(Name="isHvPsActive", EmitDefaultValue=false)]
        public bool? IsHvPsActive { get; set; }

        /// <summary>
        /// is the High Voltage Power Supply powered. Available with expand&#x3D;detail
        /// </summary>
        /// <value>is the High Voltage Power Supply powered. Available with expand&#x3D;detail</value>
        [DataMember(Name="isHvPsPowered", EmitDefaultValue=false)]
        public bool? IsHvPsPowered { get; set; }

        /// <summary>
        /// is the Low Voltage Power Supply active. Available with expand&#x3D;detail
        /// </summary>
        /// <value>is the Low Voltage Power Supply active. Available with expand&#x3D;detail</value>
        [DataMember(Name="isLvPsActive", EmitDefaultValue=false)]
        public bool? IsLvPsActive { get; set; }

        /// <summary>
        /// is the Low Voltage Power Supply powered. Available with expand&#x3D;detail
        /// </summary>
        /// <value>is the Low Voltage Power Supply powered. Available with expand&#x3D;detail</value>
        [DataMember(Name="isLvPsPowered", EmitDefaultValue=false)]
        public bool? IsLvPsPowered { get; set; }

        /// <summary>
        /// is magnetron power provided. Not available for all Radars (e.g., not available for Terma Radars). Available with expand&#x3D;detail
        /// </summary>
        /// <value>is magnetron power provided. Not available for all Radars (e.g., not available for Terma Radars). Available with expand&#x3D;detail</value>
        [DataMember(Name="isMagnetronPowered", EmitDefaultValue=false)]
        public bool? IsMagnetronPowered { get; set; }

        /// <summary>
        /// is power provided to the motor. Available with expand&#x3D;detail
        /// </summary>
        /// <value>is power provided to the motor. Available with expand&#x3D;detail</value>
        [DataMember(Name="isMotorPowered", EmitDefaultValue=false)]
        public bool? IsMotorPowered { get; set; }

        /// <summary>
        /// is radar&#x27;s readback status saying motor is turning. Available with expand&#x3D;detail
        /// </summary>
        /// <value>is radar&#x27;s readback status saying motor is turning. Available with expand&#x3D;detail</value>
        [DataMember(Name="isMotorTurning", EmitDefaultValue=false)]
        public bool? IsMotorTurning { get; set; }

        /// <summary>
        /// is motor commanded to turn. Available with expand&#x3D;detail
        /// </summary>
        /// <value>is motor commanded to turn. Available with expand&#x3D;detail</value>
        [DataMember(Name="isMotorTurningCommanded", EmitDefaultValue=false)]
        public bool? IsMotorTurningCommanded { get; set; }

        /// <summary>
        /// is the performance monitor activated. Available with expand&#x3D;detail
        /// </summary>
        /// <value>is the performance monitor activated. Available with expand&#x3D;detail</value>
        [DataMember(Name="isPerformanceMonitorActivated", EmitDefaultValue=false)]
        public bool? IsPerformanceMonitorActivated { get; set; }

        /// <summary>
        /// is there power to the RT module. Available with expand&#x3D;detail
        /// </summary>
        /// <value>is there power to the RT module. Available with expand&#x3D;detail</value>
        [DataMember(Name="isRtModulePowered", EmitDefaultValue=false)]
        public bool? IsRtModulePowered { get; set; }

        /// <summary>
        /// is the RT powered
        /// </summary>
        /// <value>is the RT powered</value>
        [DataMember(Name="isRtPowered", EmitDefaultValue=false)]
        public bool? IsRtPowered { get; set; }

        /// <summary>
        /// is the signal bearing generator powered. Available with expand&#x3D;detail
        /// </summary>
        /// <value>is the signal bearing generator powered. Available with expand&#x3D;detail</value>
        [DataMember(Name="isSignalBearingGeneratorPowered", EmitDefaultValue=false)]
        public bool? IsSignalBearingGeneratorPowered { get; set; }

        /// <summary>
        /// is the transmit trigger active. Available with expand&#x3D;detail
        /// </summary>
        /// <value>is the transmit trigger active. Available with expand&#x3D;detail</value>
        [DataMember(Name="isTransmitTriggerActive", EmitDefaultValue=false)]
        public bool? IsTransmitTriggerActive { get; set; }

        /// <summary>
        /// Gets or Sets KelvinHughesRadarInfo
        /// </summary>
        [DataMember(Name="kelvinHughesRadarInfo", EmitDefaultValue=false)]
        public KelvinHughesRadarInfoRestDto KelvinHughesRadarInfo { get; set; }

        /// <summary>
        /// *method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria
        /// </summary>
        /// <value>*method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria</value>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// magnetron current value sensed by the radar. Not available for all Radars (e.g., not available for Terma Radars). Available with expand&#x3D;detail
        /// </summary>
        /// <value>magnetron current value sensed by the radar. Not available for all Radars (e.g., not available for Terma Radars). Available with expand&#x3D;detail</value>
        [DataMember(Name="magnetronCurrent", EmitDefaultValue=false)]
        public float? MagnetronCurrent { get; set; }

        /// <summary>
        /// main bang suppression level sensed by the radar. Available with expand&#x3D;detail
        /// </summary>
        /// <value>main bang suppression level sensed by the radar. Available with expand&#x3D;detail</value>
        [DataMember(Name="mainBangSuppressLevel", EmitDefaultValue=false)]
        public float? MainBangSuppressLevel { get; set; }

        /// <summary>
        /// main bang timing level sensed by the radar. Available with expand&#x3D;detail
        /// </summary>
        /// <value>main bang timing level sensed by the radar. Available with expand&#x3D;detail</value>
        [DataMember(Name="mainBangSuppressTiming", EmitDefaultValue=false)]
        public float? MainBangSuppressTiming { get; set; }

        /// <summary>
        /// MIC current value sensed by the radar. Available with expand&#x3D;detail
        /// </summary>
        /// <value>MIC current value sensed by the radar. Available with expand&#x3D;detail</value>
        [DataMember(Name="micCurrent", EmitDefaultValue=false)]
        public float? MicCurrent { get; set; }

        /// <summary>
        /// ordered voltage sent to the radar which controls the tune of the radar&#x27;s receiver. Available with expand&#x3D;detail
        /// </summary>
        /// <value>ordered voltage sent to the radar which controls the tune of the radar&#x27;s receiver. Available with expand&#x3D;detail</value>
        [DataMember(Name="orderedTuneVoltage", EmitDefaultValue=false)]
        public float? OrderedTuneVoltage { get; set; }

        /// <summary>
        /// RF coarse value used to generate the ordered voltage. Available with expand&#x3D;detail
        /// </summary>
        /// <value>RF coarse value used to generate the ordered voltage. Available with expand&#x3D;detail</value>
        [DataMember(Name="rfCoarseTune", EmitDefaultValue=false)]
        public int? RfCoarseTune { get; set; }

        /// <summary>
        /// RF fine value used to generate the ordered voltage. Available with expand&#x3D;detail
        /// </summary>
        /// <value>RF fine value used to generate the ordered voltage. Available with expand&#x3D;detail</value>
        [DataMember(Name="rfFineTune", EmitDefaultValue=false)]
        public int? RfFineTune { get; set; }

        /// <summary>
        /// the RF Tune readback value, it indicates how well the receiver is tuned. A value &lt;&#x3D; 1.0 is badly tuned or there is something wrong with the radar system and &lt;&#x3D; 1.4 is poorly tuned, otherwise it is considered acceptable. Available with expand&#x3D;detail
        /// </summary>
        /// <value>the RF Tune readback value, it indicates how well the receiver is tuned. A value &lt;&#x3D; 1.0 is badly tuned or there is something wrong with the radar system and &lt;&#x3D; 1.4 is poorly tuned, otherwise it is considered acceptable. Available with expand&#x3D;detail</value>
        [DataMember(Name="tuneIndicator", EmitDefaultValue=false)]
        public float? TuneIndicator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RadarDetailRestDto {\n");
            sb.Append("  F21x7Status: ").Append(F21x7Status).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsAcProtectionPsActive: ").Append(IsAcProtectionPsActive).Append("\n");
            sb.Append("  IsAcProtectionPsPowered: ").Append(IsAcProtectionPsPowered).Append("\n");
            sb.Append("  IsAutotuned: ").Append(IsAutotuned).Append("\n");
            sb.Append("  IsHvPsActive: ").Append(IsHvPsActive).Append("\n");
            sb.Append("  IsHvPsPowered: ").Append(IsHvPsPowered).Append("\n");
            sb.Append("  IsLvPsActive: ").Append(IsLvPsActive).Append("\n");
            sb.Append("  IsLvPsPowered: ").Append(IsLvPsPowered).Append("\n");
            sb.Append("  IsMagnetronPowered: ").Append(IsMagnetronPowered).Append("\n");
            sb.Append("  IsMotorPowered: ").Append(IsMotorPowered).Append("\n");
            sb.Append("  IsMotorTurning: ").Append(IsMotorTurning).Append("\n");
            sb.Append("  IsMotorTurningCommanded: ").Append(IsMotorTurningCommanded).Append("\n");
            sb.Append("  IsPerformanceMonitorActivated: ").Append(IsPerformanceMonitorActivated).Append("\n");
            sb.Append("  IsRtModulePowered: ").Append(IsRtModulePowered).Append("\n");
            sb.Append("  IsRtPowered: ").Append(IsRtPowered).Append("\n");
            sb.Append("  IsSignalBearingGeneratorPowered: ").Append(IsSignalBearingGeneratorPowered).Append("\n");
            sb.Append("  IsTransmitTriggerActive: ").Append(IsTransmitTriggerActive).Append("\n");
            sb.Append("  KelvinHughesRadarInfo: ").Append(KelvinHughesRadarInfo).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  MagnetronCurrent: ").Append(MagnetronCurrent).Append("\n");
            sb.Append("  MainBangSuppressLevel: ").Append(MainBangSuppressLevel).Append("\n");
            sb.Append("  MainBangSuppressTiming: ").Append(MainBangSuppressTiming).Append("\n");
            sb.Append("  MicCurrent: ").Append(MicCurrent).Append("\n");
            sb.Append("  OrderedTuneVoltage: ").Append(OrderedTuneVoltage).Append("\n");
            sb.Append("  RfCoarseTune: ").Append(RfCoarseTune).Append("\n");
            sb.Append("  RfFineTune: ").Append(RfFineTune).Append("\n");
            sb.Append("  TuneIndicator: ").Append(TuneIndicator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RadarDetailRestDto);
        }

        /// <summary>
        /// Returns true if RadarDetailRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of RadarDetailRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RadarDetailRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.F21x7Status == input.F21x7Status ||
                    (this.F21x7Status != null &&
                    this.F21x7Status.Equals(input.F21x7Status))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsAcProtectionPsActive == input.IsAcProtectionPsActive ||
                    (this.IsAcProtectionPsActive != null &&
                    this.IsAcProtectionPsActive.Equals(input.IsAcProtectionPsActive))
                ) && 
                (
                    this.IsAcProtectionPsPowered == input.IsAcProtectionPsPowered ||
                    (this.IsAcProtectionPsPowered != null &&
                    this.IsAcProtectionPsPowered.Equals(input.IsAcProtectionPsPowered))
                ) && 
                (
                    this.IsAutotuned == input.IsAutotuned ||
                    (this.IsAutotuned != null &&
                    this.IsAutotuned.Equals(input.IsAutotuned))
                ) && 
                (
                    this.IsHvPsActive == input.IsHvPsActive ||
                    (this.IsHvPsActive != null &&
                    this.IsHvPsActive.Equals(input.IsHvPsActive))
                ) && 
                (
                    this.IsHvPsPowered == input.IsHvPsPowered ||
                    (this.IsHvPsPowered != null &&
                    this.IsHvPsPowered.Equals(input.IsHvPsPowered))
                ) && 
                (
                    this.IsLvPsActive == input.IsLvPsActive ||
                    (this.IsLvPsActive != null &&
                    this.IsLvPsActive.Equals(input.IsLvPsActive))
                ) && 
                (
                    this.IsLvPsPowered == input.IsLvPsPowered ||
                    (this.IsLvPsPowered != null &&
                    this.IsLvPsPowered.Equals(input.IsLvPsPowered))
                ) && 
                (
                    this.IsMagnetronPowered == input.IsMagnetronPowered ||
                    (this.IsMagnetronPowered != null &&
                    this.IsMagnetronPowered.Equals(input.IsMagnetronPowered))
                ) && 
                (
                    this.IsMotorPowered == input.IsMotorPowered ||
                    (this.IsMotorPowered != null &&
                    this.IsMotorPowered.Equals(input.IsMotorPowered))
                ) && 
                (
                    this.IsMotorTurning == input.IsMotorTurning ||
                    (this.IsMotorTurning != null &&
                    this.IsMotorTurning.Equals(input.IsMotorTurning))
                ) && 
                (
                    this.IsMotorTurningCommanded == input.IsMotorTurningCommanded ||
                    (this.IsMotorTurningCommanded != null &&
                    this.IsMotorTurningCommanded.Equals(input.IsMotorTurningCommanded))
                ) && 
                (
                    this.IsPerformanceMonitorActivated == input.IsPerformanceMonitorActivated ||
                    (this.IsPerformanceMonitorActivated != null &&
                    this.IsPerformanceMonitorActivated.Equals(input.IsPerformanceMonitorActivated))
                ) && 
                (
                    this.IsRtModulePowered == input.IsRtModulePowered ||
                    (this.IsRtModulePowered != null &&
                    this.IsRtModulePowered.Equals(input.IsRtModulePowered))
                ) && 
                (
                    this.IsRtPowered == input.IsRtPowered ||
                    (this.IsRtPowered != null &&
                    this.IsRtPowered.Equals(input.IsRtPowered))
                ) && 
                (
                    this.IsSignalBearingGeneratorPowered == input.IsSignalBearingGeneratorPowered ||
                    (this.IsSignalBearingGeneratorPowered != null &&
                    this.IsSignalBearingGeneratorPowered.Equals(input.IsSignalBearingGeneratorPowered))
                ) && 
                (
                    this.IsTransmitTriggerActive == input.IsTransmitTriggerActive ||
                    (this.IsTransmitTriggerActive != null &&
                    this.IsTransmitTriggerActive.Equals(input.IsTransmitTriggerActive))
                ) && 
                (
                    this.KelvinHughesRadarInfo == input.KelvinHughesRadarInfo ||
                    (this.KelvinHughesRadarInfo != null &&
                    this.KelvinHughesRadarInfo.Equals(input.KelvinHughesRadarInfo))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.MagnetronCurrent == input.MagnetronCurrent ||
                    (this.MagnetronCurrent != null &&
                    this.MagnetronCurrent.Equals(input.MagnetronCurrent))
                ) && 
                (
                    this.MainBangSuppressLevel == input.MainBangSuppressLevel ||
                    (this.MainBangSuppressLevel != null &&
                    this.MainBangSuppressLevel.Equals(input.MainBangSuppressLevel))
                ) && 
                (
                    this.MainBangSuppressTiming == input.MainBangSuppressTiming ||
                    (this.MainBangSuppressTiming != null &&
                    this.MainBangSuppressTiming.Equals(input.MainBangSuppressTiming))
                ) && 
                (
                    this.MicCurrent == input.MicCurrent ||
                    (this.MicCurrent != null &&
                    this.MicCurrent.Equals(input.MicCurrent))
                ) && 
                (
                    this.OrderedTuneVoltage == input.OrderedTuneVoltage ||
                    (this.OrderedTuneVoltage != null &&
                    this.OrderedTuneVoltage.Equals(input.OrderedTuneVoltage))
                ) && 
                (
                    this.RfCoarseTune == input.RfCoarseTune ||
                    (this.RfCoarseTune != null &&
                    this.RfCoarseTune.Equals(input.RfCoarseTune))
                ) && 
                (
                    this.RfFineTune == input.RfFineTune ||
                    (this.RfFineTune != null &&
                    this.RfFineTune.Equals(input.RfFineTune))
                ) && 
                (
                    this.TuneIndicator == input.TuneIndicator ||
                    (this.TuneIndicator != null &&
                    this.TuneIndicator.Equals(input.TuneIndicator))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.F21x7Status != null)
                    hashCode = hashCode * 59 + this.F21x7Status.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsAcProtectionPsActive != null)
                    hashCode = hashCode * 59 + this.IsAcProtectionPsActive.GetHashCode();
                if (this.IsAcProtectionPsPowered != null)
                    hashCode = hashCode * 59 + this.IsAcProtectionPsPowered.GetHashCode();
                if (this.IsAutotuned != null)
                    hashCode = hashCode * 59 + this.IsAutotuned.GetHashCode();
                if (this.IsHvPsActive != null)
                    hashCode = hashCode * 59 + this.IsHvPsActive.GetHashCode();
                if (this.IsHvPsPowered != null)
                    hashCode = hashCode * 59 + this.IsHvPsPowered.GetHashCode();
                if (this.IsLvPsActive != null)
                    hashCode = hashCode * 59 + this.IsLvPsActive.GetHashCode();
                if (this.IsLvPsPowered != null)
                    hashCode = hashCode * 59 + this.IsLvPsPowered.GetHashCode();
                if (this.IsMagnetronPowered != null)
                    hashCode = hashCode * 59 + this.IsMagnetronPowered.GetHashCode();
                if (this.IsMotorPowered != null)
                    hashCode = hashCode * 59 + this.IsMotorPowered.GetHashCode();
                if (this.IsMotorTurning != null)
                    hashCode = hashCode * 59 + this.IsMotorTurning.GetHashCode();
                if (this.IsMotorTurningCommanded != null)
                    hashCode = hashCode * 59 + this.IsMotorTurningCommanded.GetHashCode();
                if (this.IsPerformanceMonitorActivated != null)
                    hashCode = hashCode * 59 + this.IsPerformanceMonitorActivated.GetHashCode();
                if (this.IsRtModulePowered != null)
                    hashCode = hashCode * 59 + this.IsRtModulePowered.GetHashCode();
                if (this.IsRtPowered != null)
                    hashCode = hashCode * 59 + this.IsRtPowered.GetHashCode();
                if (this.IsSignalBearingGeneratorPowered != null)
                    hashCode = hashCode * 59 + this.IsSignalBearingGeneratorPowered.GetHashCode();
                if (this.IsTransmitTriggerActive != null)
                    hashCode = hashCode * 59 + this.IsTransmitTriggerActive.GetHashCode();
                if (this.KelvinHughesRadarInfo != null)
                    hashCode = hashCode * 59 + this.KelvinHughesRadarInfo.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.MagnetronCurrent != null)
                    hashCode = hashCode * 59 + this.MagnetronCurrent.GetHashCode();
                if (this.MainBangSuppressLevel != null)
                    hashCode = hashCode * 59 + this.MainBangSuppressLevel.GetHashCode();
                if (this.MainBangSuppressTiming != null)
                    hashCode = hashCode * 59 + this.MainBangSuppressTiming.GetHashCode();
                if (this.MicCurrent != null)
                    hashCode = hashCode * 59 + this.MicCurrent.GetHashCode();
                if (this.OrderedTuneVoltage != null)
                    hashCode = hashCode * 59 + this.OrderedTuneVoltage.GetHashCode();
                if (this.RfCoarseTune != null)
                    hashCode = hashCode * 59 + this.RfCoarseTune.GetHashCode();
                if (this.RfFineTune != null)
                    hashCode = hashCode * 59 + this.RfFineTune.GetHashCode();
                if (this.TuneIndicator != null)
                    hashCode = hashCode * 59 + this.TuneIndicator.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
