/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Radar Control Settings
        /// </summary>
        /// <remarks>
        /// Requests the Radar Control settings for the specified Radar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>RadarControlRestDto</returns>
        RadarControlRestDto GetRadarControl (int? id);

        /// <summary>
        /// Get Radar Control Settings
        /// </summary>
        /// <remarks>
        /// Requests the Radar Control settings for the specified Radar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>ApiResponse of RadarControlRestDto</returns>
        ApiResponse<RadarControlRestDto> GetRadarControlWithHttpInfo (int? id);
        /// <summary>
        /// Get Radar Data
        /// </summary>
        /// <remarks>
        /// Requests the Radar Data for the specified Radar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <param name="expand">Provides extra data. if &#x27;control&#x27; is requested then control settings are provided. if &#x27;detail&#x27; is requested then extra detail of the resource is provided. Any combination of these can be given.&lt;br&gt;Values: [control, detail] (optional)</param>
        /// <returns>RadarRestDto</returns>
        RadarRestDto GetRadarData (int? id, string expand = null);

        /// <summary>
        /// Get Radar Data
        /// </summary>
        /// <remarks>
        /// Requests the Radar Data for the specified Radar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <param name="expand">Provides extra data. if &#x27;control&#x27; is requested then control settings are provided. if &#x27;detail&#x27; is requested then extra detail of the resource is provided. Any combination of these can be given.&lt;br&gt;Values: [control, detail] (optional)</param>
        /// <returns>ApiResponse of RadarRestDto</returns>
        ApiResponse<RadarRestDto> GetRadarDataWithHttpInfo (int? id, string expand = null);
        /// <summary>
        /// Get Radars Status
        /// </summary>
        /// <remarks>
        /// Requests Radar Data for all Radars in the system. (No paging or querying available).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides extra data. if &#x27;control&#x27; is requested then control settings are provided. if &#x27;detail&#x27; is requested then extra detail of the resource is provided. Any combination of these can be given.&lt;br&gt;Values: [control, detail] (optional)</param>
        /// <returns>RadarsRestDto</returns>
        RadarsRestDto GetRadarDatas (string expand = null);

        /// <summary>
        /// Get Radars Status
        /// </summary>
        /// <remarks>
        /// Requests Radar Data for all Radars in the system. (No paging or querying available).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides extra data. if &#x27;control&#x27; is requested then control settings are provided. if &#x27;detail&#x27; is requested then extra detail of the resource is provided. Any combination of these can be given.&lt;br&gt;Values: [control, detail] (optional)</param>
        /// <returns>ApiResponse of RadarsRestDto</returns>
        ApiResponse<RadarsRestDto> GetRadarDatasWithHttpInfo (string expand = null);
        /// <summary>
        /// Get Radar Detail
        /// </summary>
        /// <remarks>
        /// Requests the Radar Detail data for the specified Radar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>RadarDetailRestDto</returns>
        RadarDetailRestDto GetRadarDetail (int? id);

        /// <summary>
        /// Get Radar Detail
        /// </summary>
        /// <remarks>
        /// Requests the Radar Detail data for the specified Radar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>ApiResponse of RadarDetailRestDto</returns>
        ApiResponse<RadarDetailRestDto> GetRadarDetailWithHttpInfo (int? id);
        /// <summary>
        /// Get Terma Radar BITE measurements
        /// </summary>
        /// <remarks>
        /// Provides all Terma BITE Measurements (Status, Errors, and Warnings) for a Terma Radar. No action is required for this data to be made available. &lt;br/&gt;&lt;br/&gt;&lt;em&gt;Important Note on Time Zones:&lt;/em&gt;&lt;br/&gt;For correct presentation, the MIS and the system interfacing with the Terma (the Radar Processor) require their system time to be set to the same Time Zone. If not, then the presented data will be offset in the same way the Time Zones are. &lt;br/&gt;&lt;br/&gt;Note on using updateSince&lt;br/&gt;The recommended approach is to simply base the updateSince query value relative to the time of the data received and presented. This will overcome any differences in system time or Time Zones between the client, MIS, and the system supplying the Terma BITE data. &lt;br/&gt;E.g., if presented time of data received is 2019-03-14T14:55:00.050Z, then using a query of updateSince&#x3D;2019-03-14T14:55:00.050Z will get all data since that time. &lt;br/&gt;&lt;br/&gt;Note on Amount of Data Available&lt;br/&gt; Terma BITE data is constantly being received. MIS stores a limited amount of this Terma BITE data. Requesting data every 5 seconds should be sufficient to get all data since the last request without missing any. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <param name="updateSince">Returns Terma BITE measurements that have been updated since (greater than) the rp_time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;See the &#x27;Note on using updateSince&#x27; above in the &#x27;Implementation Notes&#x27; section. &lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00.050Z specifies a year-month-day followed by 24-hour hours:minutes:seconds.milliseconds in GMT time&lt;br&gt;&lt;br&gt;Note that the size query is ignored when this query is given; all matched items will be returned. (optional)</param>
        /// <param name="size">How many entries to retrieve. Ignored if updateSince is given. Defaults to 20 (optional)</param>
        /// <returns>RadarTermaBiteMsRestDto</returns>
        RadarTermaBiteMsRestDto GetRadarTermaBiteMeasurements (int? id, string updateSince = null, int? size = null);

        /// <summary>
        /// Get Terma Radar BITE measurements
        /// </summary>
        /// <remarks>
        /// Provides all Terma BITE Measurements (Status, Errors, and Warnings) for a Terma Radar. No action is required for this data to be made available. &lt;br/&gt;&lt;br/&gt;&lt;em&gt;Important Note on Time Zones:&lt;/em&gt;&lt;br/&gt;For correct presentation, the MIS and the system interfacing with the Terma (the Radar Processor) require their system time to be set to the same Time Zone. If not, then the presented data will be offset in the same way the Time Zones are. &lt;br/&gt;&lt;br/&gt;Note on using updateSince&lt;br/&gt;The recommended approach is to simply base the updateSince query value relative to the time of the data received and presented. This will overcome any differences in system time or Time Zones between the client, MIS, and the system supplying the Terma BITE data. &lt;br/&gt;E.g., if presented time of data received is 2019-03-14T14:55:00.050Z, then using a query of updateSince&#x3D;2019-03-14T14:55:00.050Z will get all data since that time. &lt;br/&gt;&lt;br/&gt;Note on Amount of Data Available&lt;br/&gt; Terma BITE data is constantly being received. MIS stores a limited amount of this Terma BITE data. Requesting data every 5 seconds should be sufficient to get all data since the last request without missing any. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <param name="updateSince">Returns Terma BITE measurements that have been updated since (greater than) the rp_time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;See the &#x27;Note on using updateSince&#x27; above in the &#x27;Implementation Notes&#x27; section. &lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00.050Z specifies a year-month-day followed by 24-hour hours:minutes:seconds.milliseconds in GMT time&lt;br&gt;&lt;br&gt;Note that the size query is ignored when this query is given; all matched items will be returned. (optional)</param>
        /// <param name="size">How many entries to retrieve. Ignored if updateSince is given. Defaults to 20 (optional)</param>
        /// <returns>ApiResponse of RadarTermaBiteMsRestDto</returns>
        ApiResponse<RadarTermaBiteMsRestDto> GetRadarTermaBiteMeasurementsWithHttpInfo (int? id, string updateSince = null, int? size = null);
        /// <summary>
        /// Provides Control of Radar Filtering
        /// </summary>
        /// <remarks>
        /// Updates Radar Filtering controls. Please note not all combination of settings are allowed as further described below. Also, fields which are not provided use the current system setting.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Radar Filter settings</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns></returns>
        void UpdateFilter (FilterRestDto body, int? id);

        /// <summary>
        /// Provides Control of Radar Filtering
        /// </summary>
        /// <remarks>
        /// Updates Radar Filtering controls. Please note not all combination of settings are allowed as further described below. Also, fields which are not provided use the current system setting.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Radar Filter settings</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateFilterWithHttpInfo (FilterRestDto body, int? id);
        /// <summary>
        /// Provides Control of Radar Mode
        /// </summary>
        /// <remarks>
        /// Updates Radar Mode
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Radar mode settings</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns></returns>
        void UpdateRadarMode (RadarModeRestDto body, int? id);

        /// <summary>
        /// Provides Control of Radar Mode
        /// </summary>
        /// <remarks>
        /// Updates Radar Mode
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Radar mode settings</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRadarModeWithHttpInfo (RadarModeRestDto body, int? id);
        /// <summary>
        /// Provides Control of Radar State
        /// </summary>
        /// <remarks>
        /// Updates Radar State
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Radar state settings</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns></returns>
        void UpdateRadarState (RadarStateRestDto body, int? id);

        /// <summary>
        /// Provides Control of Radar State
        /// </summary>
        /// <remarks>
        /// Updates Radar State
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Radar state settings</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRadarStateWithHttpInfo (RadarStateRestDto body, int? id);
        /// <summary>
        /// Provides Control of Range Scale
        /// </summary>
        /// <remarks>
        /// Updates Radar Range Scale
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Range Scale Setting</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns></returns>
        void UpdateRangeScale (RangeScaleRestDto body, int? id);

        /// <summary>
        /// Provides Control of Range Scale
        /// </summary>
        /// <remarks>
        /// Updates Radar Range Scale
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Range Scale Setting</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRangeScaleWithHttpInfo (RangeScaleRestDto body, int? id);
        /// <summary>
        /// Provides control of the Terma Profile
        /// </summary>
        /// <remarks>
        /// Updates Terma Profile
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Terma Profile</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns></returns>
        void UpdateTermaProfile (TermaProfileRestDto body, int? id);

        /// <summary>
        /// Provides control of the Terma Profile
        /// </summary>
        /// <remarks>
        /// Updates Terma Profile
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Terma Profile</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTermaProfileWithHttpInfo (TermaProfileRestDto body, int? id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Radar Control Settings
        /// </summary>
        /// <remarks>
        /// Requests the Radar Control settings for the specified Radar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>Task of RadarControlRestDto</returns>
        System.Threading.Tasks.Task<RadarControlRestDto> GetRadarControlAsync (int? id);

        /// <summary>
        /// Get Radar Control Settings
        /// </summary>
        /// <remarks>
        /// Requests the Radar Control settings for the specified Radar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>Task of ApiResponse (RadarControlRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RadarControlRestDto>> GetRadarControlAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get Radar Data
        /// </summary>
        /// <remarks>
        /// Requests the Radar Data for the specified Radar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <param name="expand">Provides extra data. if &#x27;control&#x27; is requested then control settings are provided. if &#x27;detail&#x27; is requested then extra detail of the resource is provided. Any combination of these can be given.&lt;br&gt;Values: [control, detail] (optional)</param>
        /// <returns>Task of RadarRestDto</returns>
        System.Threading.Tasks.Task<RadarRestDto> GetRadarDataAsync (int? id, string expand = null);

        /// <summary>
        /// Get Radar Data
        /// </summary>
        /// <remarks>
        /// Requests the Radar Data for the specified Radar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <param name="expand">Provides extra data. if &#x27;control&#x27; is requested then control settings are provided. if &#x27;detail&#x27; is requested then extra detail of the resource is provided. Any combination of these can be given.&lt;br&gt;Values: [control, detail] (optional)</param>
        /// <returns>Task of ApiResponse (RadarRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RadarRestDto>> GetRadarDataAsyncWithHttpInfo (int? id, string expand = null);
        /// <summary>
        /// Get Radars Status
        /// </summary>
        /// <remarks>
        /// Requests Radar Data for all Radars in the system. (No paging or querying available).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides extra data. if &#x27;control&#x27; is requested then control settings are provided. if &#x27;detail&#x27; is requested then extra detail of the resource is provided. Any combination of these can be given.&lt;br&gt;Values: [control, detail] (optional)</param>
        /// <returns>Task of RadarsRestDto</returns>
        System.Threading.Tasks.Task<RadarsRestDto> GetRadarDatasAsync (string expand = null);

        /// <summary>
        /// Get Radars Status
        /// </summary>
        /// <remarks>
        /// Requests Radar Data for all Radars in the system. (No paging or querying available).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides extra data. if &#x27;control&#x27; is requested then control settings are provided. if &#x27;detail&#x27; is requested then extra detail of the resource is provided. Any combination of these can be given.&lt;br&gt;Values: [control, detail] (optional)</param>
        /// <returns>Task of ApiResponse (RadarsRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RadarsRestDto>> GetRadarDatasAsyncWithHttpInfo (string expand = null);
        /// <summary>
        /// Get Radar Detail
        /// </summary>
        /// <remarks>
        /// Requests the Radar Detail data for the specified Radar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>Task of RadarDetailRestDto</returns>
        System.Threading.Tasks.Task<RadarDetailRestDto> GetRadarDetailAsync (int? id);

        /// <summary>
        /// Get Radar Detail
        /// </summary>
        /// <remarks>
        /// Requests the Radar Detail data for the specified Radar
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>Task of ApiResponse (RadarDetailRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RadarDetailRestDto>> GetRadarDetailAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get Terma Radar BITE measurements
        /// </summary>
        /// <remarks>
        /// Provides all Terma BITE Measurements (Status, Errors, and Warnings) for a Terma Radar. No action is required for this data to be made available. &lt;br/&gt;&lt;br/&gt;&lt;em&gt;Important Note on Time Zones:&lt;/em&gt;&lt;br/&gt;For correct presentation, the MIS and the system interfacing with the Terma (the Radar Processor) require their system time to be set to the same Time Zone. If not, then the presented data will be offset in the same way the Time Zones are. &lt;br/&gt;&lt;br/&gt;Note on using updateSince&lt;br/&gt;The recommended approach is to simply base the updateSince query value relative to the time of the data received and presented. This will overcome any differences in system time or Time Zones between the client, MIS, and the system supplying the Terma BITE data. &lt;br/&gt;E.g., if presented time of data received is 2019-03-14T14:55:00.050Z, then using a query of updateSince&#x3D;2019-03-14T14:55:00.050Z will get all data since that time. &lt;br/&gt;&lt;br/&gt;Note on Amount of Data Available&lt;br/&gt; Terma BITE data is constantly being received. MIS stores a limited amount of this Terma BITE data. Requesting data every 5 seconds should be sufficient to get all data since the last request without missing any. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <param name="updateSince">Returns Terma BITE measurements that have been updated since (greater than) the rp_time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;See the &#x27;Note on using updateSince&#x27; above in the &#x27;Implementation Notes&#x27; section. &lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00.050Z specifies a year-month-day followed by 24-hour hours:minutes:seconds.milliseconds in GMT time&lt;br&gt;&lt;br&gt;Note that the size query is ignored when this query is given; all matched items will be returned. (optional)</param>
        /// <param name="size">How many entries to retrieve. Ignored if updateSince is given. Defaults to 20 (optional)</param>
        /// <returns>Task of RadarTermaBiteMsRestDto</returns>
        System.Threading.Tasks.Task<RadarTermaBiteMsRestDto> GetRadarTermaBiteMeasurementsAsync (int? id, string updateSince = null, int? size = null);

        /// <summary>
        /// Get Terma Radar BITE measurements
        /// </summary>
        /// <remarks>
        /// Provides all Terma BITE Measurements (Status, Errors, and Warnings) for a Terma Radar. No action is required for this data to be made available. &lt;br/&gt;&lt;br/&gt;&lt;em&gt;Important Note on Time Zones:&lt;/em&gt;&lt;br/&gt;For correct presentation, the MIS and the system interfacing with the Terma (the Radar Processor) require their system time to be set to the same Time Zone. If not, then the presented data will be offset in the same way the Time Zones are. &lt;br/&gt;&lt;br/&gt;Note on using updateSince&lt;br/&gt;The recommended approach is to simply base the updateSince query value relative to the time of the data received and presented. This will overcome any differences in system time or Time Zones between the client, MIS, and the system supplying the Terma BITE data. &lt;br/&gt;E.g., if presented time of data received is 2019-03-14T14:55:00.050Z, then using a query of updateSince&#x3D;2019-03-14T14:55:00.050Z will get all data since that time. &lt;br/&gt;&lt;br/&gt;Note on Amount of Data Available&lt;br/&gt; Terma BITE data is constantly being received. MIS stores a limited amount of this Terma BITE data. Requesting data every 5 seconds should be sufficient to get all data since the last request without missing any. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <param name="updateSince">Returns Terma BITE measurements that have been updated since (greater than) the rp_time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;See the &#x27;Note on using updateSince&#x27; above in the &#x27;Implementation Notes&#x27; section. &lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00.050Z specifies a year-month-day followed by 24-hour hours:minutes:seconds.milliseconds in GMT time&lt;br&gt;&lt;br&gt;Note that the size query is ignored when this query is given; all matched items will be returned. (optional)</param>
        /// <param name="size">How many entries to retrieve. Ignored if updateSince is given. Defaults to 20 (optional)</param>
        /// <returns>Task of ApiResponse (RadarTermaBiteMsRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RadarTermaBiteMsRestDto>> GetRadarTermaBiteMeasurementsAsyncWithHttpInfo (int? id, string updateSince = null, int? size = null);
        /// <summary>
        /// Provides Control of Radar Filtering
        /// </summary>
        /// <remarks>
        /// Updates Radar Filtering controls. Please note not all combination of settings are allowed as further described below. Also, fields which are not provided use the current system setting.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Radar Filter settings</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateFilterAsync (FilterRestDto body, int? id);

        /// <summary>
        /// Provides Control of Radar Filtering
        /// </summary>
        /// <remarks>
        /// Updates Radar Filtering controls. Please note not all combination of settings are allowed as further described below. Also, fields which are not provided use the current system setting.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Radar Filter settings</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateFilterAsyncWithHttpInfo (FilterRestDto body, int? id);
        /// <summary>
        /// Provides Control of Radar Mode
        /// </summary>
        /// <remarks>
        /// Updates Radar Mode
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Radar mode settings</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRadarModeAsync (RadarModeRestDto body, int? id);

        /// <summary>
        /// Provides Control of Radar Mode
        /// </summary>
        /// <remarks>
        /// Updates Radar Mode
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Radar mode settings</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRadarModeAsyncWithHttpInfo (RadarModeRestDto body, int? id);
        /// <summary>
        /// Provides Control of Radar State
        /// </summary>
        /// <remarks>
        /// Updates Radar State
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Radar state settings</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRadarStateAsync (RadarStateRestDto body, int? id);

        /// <summary>
        /// Provides Control of Radar State
        /// </summary>
        /// <remarks>
        /// Updates Radar State
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Radar state settings</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRadarStateAsyncWithHttpInfo (RadarStateRestDto body, int? id);
        /// <summary>
        /// Provides Control of Range Scale
        /// </summary>
        /// <remarks>
        /// Updates Radar Range Scale
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Range Scale Setting</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRangeScaleAsync (RangeScaleRestDto body, int? id);

        /// <summary>
        /// Provides Control of Range Scale
        /// </summary>
        /// <remarks>
        /// Updates Radar Range Scale
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Range Scale Setting</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRangeScaleAsyncWithHttpInfo (RangeScaleRestDto body, int? id);
        /// <summary>
        /// Provides control of the Terma Profile
        /// </summary>
        /// <remarks>
        /// Updates Terma Profile
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Terma Profile</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTermaProfileAsync (TermaProfileRestDto body, int? id);

        /// <summary>
        /// Provides control of the Terma Profile
        /// </summary>
        /// <remarks>
        /// Updates Terma Profile
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Terma Profile</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTermaProfileAsyncWithHttpInfo (TermaProfileRestDto body, int? id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Radar Control Settings Requests the Radar Control settings for the specified Radar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>RadarControlRestDto</returns>
        public RadarControlRestDto GetRadarControl (int? id)
        {
             ApiResponse<RadarControlRestDto> localVarResponse = GetRadarControlWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Radar Control Settings Requests the Radar Control settings for the specified Radar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>ApiResponse of RadarControlRestDto</returns>
        public ApiResponse< RadarControlRestDto > GetRadarControlWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetRadarControl");

            var localVarPath = "/radars/{id}/control";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRadarControl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RadarControlRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RadarControlRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RadarControlRestDto)));
        }

        /// <summary>
        /// Get Radar Control Settings Requests the Radar Control settings for the specified Radar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>Task of RadarControlRestDto</returns>
        public async System.Threading.Tasks.Task<RadarControlRestDto> GetRadarControlAsync (int? id)
        {
             ApiResponse<RadarControlRestDto> localVarResponse = await GetRadarControlAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Radar Control Settings Requests the Radar Control settings for the specified Radar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>Task of ApiResponse (RadarControlRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RadarControlRestDto>> GetRadarControlAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetRadarControl");

            var localVarPath = "/radars/{id}/control";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRadarControl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RadarControlRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RadarControlRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RadarControlRestDto)));
        }

        /// <summary>
        /// Get Radar Data Requests the Radar Data for the specified Radar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <param name="expand">Provides extra data. if &#x27;control&#x27; is requested then control settings are provided. if &#x27;detail&#x27; is requested then extra detail of the resource is provided. Any combination of these can be given.&lt;br&gt;Values: [control, detail] (optional)</param>
        /// <returns>RadarRestDto</returns>
        public RadarRestDto GetRadarData (int? id, string expand = null)
        {
             ApiResponse<RadarRestDto> localVarResponse = GetRadarDataWithHttpInfo(id, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Radar Data Requests the Radar Data for the specified Radar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <param name="expand">Provides extra data. if &#x27;control&#x27; is requested then control settings are provided. if &#x27;detail&#x27; is requested then extra detail of the resource is provided. Any combination of these can be given.&lt;br&gt;Values: [control, detail] (optional)</param>
        /// <returns>ApiResponse of RadarRestDto</returns>
        public ApiResponse< RadarRestDto > GetRadarDataWithHttpInfo (int? id, string expand = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetRadarData");

            var localVarPath = "/radars/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRadarData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RadarRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RadarRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RadarRestDto)));
        }

        /// <summary>
        /// Get Radar Data Requests the Radar Data for the specified Radar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <param name="expand">Provides extra data. if &#x27;control&#x27; is requested then control settings are provided. if &#x27;detail&#x27; is requested then extra detail of the resource is provided. Any combination of these can be given.&lt;br&gt;Values: [control, detail] (optional)</param>
        /// <returns>Task of RadarRestDto</returns>
        public async System.Threading.Tasks.Task<RadarRestDto> GetRadarDataAsync (int? id, string expand = null)
        {
             ApiResponse<RadarRestDto> localVarResponse = await GetRadarDataAsyncWithHttpInfo(id, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Radar Data Requests the Radar Data for the specified Radar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <param name="expand">Provides extra data. if &#x27;control&#x27; is requested then control settings are provided. if &#x27;detail&#x27; is requested then extra detail of the resource is provided. Any combination of these can be given.&lt;br&gt;Values: [control, detail] (optional)</param>
        /// <returns>Task of ApiResponse (RadarRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RadarRestDto>> GetRadarDataAsyncWithHttpInfo (int? id, string expand = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetRadarData");

            var localVarPath = "/radars/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRadarData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RadarRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RadarRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RadarRestDto)));
        }

        /// <summary>
        /// Get Radars Status Requests Radar Data for all Radars in the system. (No paging or querying available).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides extra data. if &#x27;control&#x27; is requested then control settings are provided. if &#x27;detail&#x27; is requested then extra detail of the resource is provided. Any combination of these can be given.&lt;br&gt;Values: [control, detail] (optional)</param>
        /// <returns>RadarsRestDto</returns>
        public RadarsRestDto GetRadarDatas (string expand = null)
        {
             ApiResponse<RadarsRestDto> localVarResponse = GetRadarDatasWithHttpInfo(expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Radars Status Requests Radar Data for all Radars in the system. (No paging or querying available).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides extra data. if &#x27;control&#x27; is requested then control settings are provided. if &#x27;detail&#x27; is requested then extra detail of the resource is provided. Any combination of these can be given.&lt;br&gt;Values: [control, detail] (optional)</param>
        /// <returns>ApiResponse of RadarsRestDto</returns>
        public ApiResponse< RadarsRestDto > GetRadarDatasWithHttpInfo (string expand = null)
        {

            var localVarPath = "/radars";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRadarDatas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RadarsRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RadarsRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RadarsRestDto)));
        }

        /// <summary>
        /// Get Radars Status Requests Radar Data for all Radars in the system. (No paging or querying available).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides extra data. if &#x27;control&#x27; is requested then control settings are provided. if &#x27;detail&#x27; is requested then extra detail of the resource is provided. Any combination of these can be given.&lt;br&gt;Values: [control, detail] (optional)</param>
        /// <returns>Task of RadarsRestDto</returns>
        public async System.Threading.Tasks.Task<RadarsRestDto> GetRadarDatasAsync (string expand = null)
        {
             ApiResponse<RadarsRestDto> localVarResponse = await GetRadarDatasAsyncWithHttpInfo(expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Radars Status Requests Radar Data for all Radars in the system. (No paging or querying available).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides extra data. if &#x27;control&#x27; is requested then control settings are provided. if &#x27;detail&#x27; is requested then extra detail of the resource is provided. Any combination of these can be given.&lt;br&gt;Values: [control, detail] (optional)</param>
        /// <returns>Task of ApiResponse (RadarsRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RadarsRestDto>> GetRadarDatasAsyncWithHttpInfo (string expand = null)
        {

            var localVarPath = "/radars";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRadarDatas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RadarsRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RadarsRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RadarsRestDto)));
        }

        /// <summary>
        /// Get Radar Detail Requests the Radar Detail data for the specified Radar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>RadarDetailRestDto</returns>
        public RadarDetailRestDto GetRadarDetail (int? id)
        {
             ApiResponse<RadarDetailRestDto> localVarResponse = GetRadarDetailWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Radar Detail Requests the Radar Detail data for the specified Radar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>ApiResponse of RadarDetailRestDto</returns>
        public ApiResponse< RadarDetailRestDto > GetRadarDetailWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetRadarDetail");

            var localVarPath = "/radars/{id}/detail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRadarDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RadarDetailRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RadarDetailRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RadarDetailRestDto)));
        }

        /// <summary>
        /// Get Radar Detail Requests the Radar Detail data for the specified Radar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>Task of RadarDetailRestDto</returns>
        public async System.Threading.Tasks.Task<RadarDetailRestDto> GetRadarDetailAsync (int? id)
        {
             ApiResponse<RadarDetailRestDto> localVarResponse = await GetRadarDetailAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Radar Detail Requests the Radar Detail data for the specified Radar
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>Task of ApiResponse (RadarDetailRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RadarDetailRestDto>> GetRadarDetailAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetRadarDetail");

            var localVarPath = "/radars/{id}/detail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRadarDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RadarDetailRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RadarDetailRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RadarDetailRestDto)));
        }

        /// <summary>
        /// Get Terma Radar BITE measurements Provides all Terma BITE Measurements (Status, Errors, and Warnings) for a Terma Radar. No action is required for this data to be made available. &lt;br/&gt;&lt;br/&gt;&lt;em&gt;Important Note on Time Zones:&lt;/em&gt;&lt;br/&gt;For correct presentation, the MIS and the system interfacing with the Terma (the Radar Processor) require their system time to be set to the same Time Zone. If not, then the presented data will be offset in the same way the Time Zones are. &lt;br/&gt;&lt;br/&gt;Note on using updateSince&lt;br/&gt;The recommended approach is to simply base the updateSince query value relative to the time of the data received and presented. This will overcome any differences in system time or Time Zones between the client, MIS, and the system supplying the Terma BITE data. &lt;br/&gt;E.g., if presented time of data received is 2019-03-14T14:55:00.050Z, then using a query of updateSince&#x3D;2019-03-14T14:55:00.050Z will get all data since that time. &lt;br/&gt;&lt;br/&gt;Note on Amount of Data Available&lt;br/&gt; Terma BITE data is constantly being received. MIS stores a limited amount of this Terma BITE data. Requesting data every 5 seconds should be sufficient to get all data since the last request without missing any. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <param name="updateSince">Returns Terma BITE measurements that have been updated since (greater than) the rp_time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;See the &#x27;Note on using updateSince&#x27; above in the &#x27;Implementation Notes&#x27; section. &lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00.050Z specifies a year-month-day followed by 24-hour hours:minutes:seconds.milliseconds in GMT time&lt;br&gt;&lt;br&gt;Note that the size query is ignored when this query is given; all matched items will be returned. (optional)</param>
        /// <param name="size">How many entries to retrieve. Ignored if updateSince is given. Defaults to 20 (optional)</param>
        /// <returns>RadarTermaBiteMsRestDto</returns>
        public RadarTermaBiteMsRestDto GetRadarTermaBiteMeasurements (int? id, string updateSince = null, int? size = null)
        {
             ApiResponse<RadarTermaBiteMsRestDto> localVarResponse = GetRadarTermaBiteMeasurementsWithHttpInfo(id, updateSince, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Terma Radar BITE measurements Provides all Terma BITE Measurements (Status, Errors, and Warnings) for a Terma Radar. No action is required for this data to be made available. &lt;br/&gt;&lt;br/&gt;&lt;em&gt;Important Note on Time Zones:&lt;/em&gt;&lt;br/&gt;For correct presentation, the MIS and the system interfacing with the Terma (the Radar Processor) require their system time to be set to the same Time Zone. If not, then the presented data will be offset in the same way the Time Zones are. &lt;br/&gt;&lt;br/&gt;Note on using updateSince&lt;br/&gt;The recommended approach is to simply base the updateSince query value relative to the time of the data received and presented. This will overcome any differences in system time or Time Zones between the client, MIS, and the system supplying the Terma BITE data. &lt;br/&gt;E.g., if presented time of data received is 2019-03-14T14:55:00.050Z, then using a query of updateSince&#x3D;2019-03-14T14:55:00.050Z will get all data since that time. &lt;br/&gt;&lt;br/&gt;Note on Amount of Data Available&lt;br/&gt; Terma BITE data is constantly being received. MIS stores a limited amount of this Terma BITE data. Requesting data every 5 seconds should be sufficient to get all data since the last request without missing any. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <param name="updateSince">Returns Terma BITE measurements that have been updated since (greater than) the rp_time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;See the &#x27;Note on using updateSince&#x27; above in the &#x27;Implementation Notes&#x27; section. &lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00.050Z specifies a year-month-day followed by 24-hour hours:minutes:seconds.milliseconds in GMT time&lt;br&gt;&lt;br&gt;Note that the size query is ignored when this query is given; all matched items will be returned. (optional)</param>
        /// <param name="size">How many entries to retrieve. Ignored if updateSince is given. Defaults to 20 (optional)</param>
        /// <returns>ApiResponse of RadarTermaBiteMsRestDto</returns>
        public ApiResponse< RadarTermaBiteMsRestDto > GetRadarTermaBiteMeasurementsWithHttpInfo (int? id, string updateSince = null, int? size = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetRadarTermaBiteMeasurements");

            var localVarPath = "/radars/{id}/terma/BITE/measurements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateSince", updateSince)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRadarTermaBiteMeasurements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RadarTermaBiteMsRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RadarTermaBiteMsRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RadarTermaBiteMsRestDto)));
        }

        /// <summary>
        /// Get Terma Radar BITE measurements Provides all Terma BITE Measurements (Status, Errors, and Warnings) for a Terma Radar. No action is required for this data to be made available. &lt;br/&gt;&lt;br/&gt;&lt;em&gt;Important Note on Time Zones:&lt;/em&gt;&lt;br/&gt;For correct presentation, the MIS and the system interfacing with the Terma (the Radar Processor) require their system time to be set to the same Time Zone. If not, then the presented data will be offset in the same way the Time Zones are. &lt;br/&gt;&lt;br/&gt;Note on using updateSince&lt;br/&gt;The recommended approach is to simply base the updateSince query value relative to the time of the data received and presented. This will overcome any differences in system time or Time Zones between the client, MIS, and the system supplying the Terma BITE data. &lt;br/&gt;E.g., if presented time of data received is 2019-03-14T14:55:00.050Z, then using a query of updateSince&#x3D;2019-03-14T14:55:00.050Z will get all data since that time. &lt;br/&gt;&lt;br/&gt;Note on Amount of Data Available&lt;br/&gt; Terma BITE data is constantly being received. MIS stores a limited amount of this Terma BITE data. Requesting data every 5 seconds should be sufficient to get all data since the last request without missing any. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <param name="updateSince">Returns Terma BITE measurements that have been updated since (greater than) the rp_time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;See the &#x27;Note on using updateSince&#x27; above in the &#x27;Implementation Notes&#x27; section. &lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00.050Z specifies a year-month-day followed by 24-hour hours:minutes:seconds.milliseconds in GMT time&lt;br&gt;&lt;br&gt;Note that the size query is ignored when this query is given; all matched items will be returned. (optional)</param>
        /// <param name="size">How many entries to retrieve. Ignored if updateSince is given. Defaults to 20 (optional)</param>
        /// <returns>Task of RadarTermaBiteMsRestDto</returns>
        public async System.Threading.Tasks.Task<RadarTermaBiteMsRestDto> GetRadarTermaBiteMeasurementsAsync (int? id, string updateSince = null, int? size = null)
        {
             ApiResponse<RadarTermaBiteMsRestDto> localVarResponse = await GetRadarTermaBiteMeasurementsAsyncWithHttpInfo(id, updateSince, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Terma Radar BITE measurements Provides all Terma BITE Measurements (Status, Errors, and Warnings) for a Terma Radar. No action is required for this data to be made available. &lt;br/&gt;&lt;br/&gt;&lt;em&gt;Important Note on Time Zones:&lt;/em&gt;&lt;br/&gt;For correct presentation, the MIS and the system interfacing with the Terma (the Radar Processor) require their system time to be set to the same Time Zone. If not, then the presented data will be offset in the same way the Time Zones are. &lt;br/&gt;&lt;br/&gt;Note on using updateSince&lt;br/&gt;The recommended approach is to simply base the updateSince query value relative to the time of the data received and presented. This will overcome any differences in system time or Time Zones between the client, MIS, and the system supplying the Terma BITE data. &lt;br/&gt;E.g., if presented time of data received is 2019-03-14T14:55:00.050Z, then using a query of updateSince&#x3D;2019-03-14T14:55:00.050Z will get all data since that time. &lt;br/&gt;&lt;br/&gt;Note on Amount of Data Available&lt;br/&gt; Terma BITE data is constantly being received. MIS stores a limited amount of this Terma BITE data. Requesting data every 5 seconds should be sufficient to get all data since the last request without missing any. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <param name="updateSince">Returns Terma BITE measurements that have been updated since (greater than) the rp_time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;See the &#x27;Note on using updateSince&#x27; above in the &#x27;Implementation Notes&#x27; section. &lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00.050Z specifies a year-month-day followed by 24-hour hours:minutes:seconds.milliseconds in GMT time&lt;br&gt;&lt;br&gt;Note that the size query is ignored when this query is given; all matched items will be returned. (optional)</param>
        /// <param name="size">How many entries to retrieve. Ignored if updateSince is given. Defaults to 20 (optional)</param>
        /// <returns>Task of ApiResponse (RadarTermaBiteMsRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RadarTermaBiteMsRestDto>> GetRadarTermaBiteMeasurementsAsyncWithHttpInfo (int? id, string updateSince = null, int? size = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetRadarTermaBiteMeasurements");

            var localVarPath = "/radars/{id}/terma/BITE/measurements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateSince", updateSince)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRadarTermaBiteMeasurements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RadarTermaBiteMsRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RadarTermaBiteMsRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RadarTermaBiteMsRestDto)));
        }

        /// <summary>
        /// Provides Control of Radar Filtering Updates Radar Filtering controls. Please note not all combination of settings are allowed as further described below. Also, fields which are not provided use the current system setting.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Radar Filter settings</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns></returns>
        public void UpdateFilter (FilterRestDto body, int? id)
        {
             UpdateFilterWithHttpInfo(body, id);
        }

        /// <summary>
        /// Provides Control of Radar Filtering Updates Radar Filtering controls. Please note not all combination of settings are allowed as further described below. Also, fields which are not provided use the current system setting.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Radar Filter settings</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateFilterWithHttpInfo (FilterRestDto body, int? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UpdateFilter");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->UpdateFilter");

            var localVarPath = "/radars/{id}/control/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Provides Control of Radar Filtering Updates Radar Filtering controls. Please note not all combination of settings are allowed as further described below. Also, fields which are not provided use the current system setting.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Radar Filter settings</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateFilterAsync (FilterRestDto body, int? id)
        {
             await UpdateFilterAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Provides Control of Radar Filtering Updates Radar Filtering controls. Please note not all combination of settings are allowed as further described below. Also, fields which are not provided use the current system setting.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Radar Filter settings</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateFilterAsyncWithHttpInfo (FilterRestDto body, int? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UpdateFilter");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->UpdateFilter");

            var localVarPath = "/radars/{id}/control/filter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Provides Control of Radar Mode Updates Radar Mode
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Radar mode settings</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns></returns>
        public void UpdateRadarMode (RadarModeRestDto body, int? id)
        {
             UpdateRadarModeWithHttpInfo(body, id);
        }

        /// <summary>
        /// Provides Control of Radar Mode Updates Radar Mode
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Radar mode settings</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRadarModeWithHttpInfo (RadarModeRestDto body, int? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UpdateRadarMode");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->UpdateRadarMode");

            var localVarPath = "/radars/{id}/control/mode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRadarMode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Provides Control of Radar Mode Updates Radar Mode
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Radar mode settings</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRadarModeAsync (RadarModeRestDto body, int? id)
        {
             await UpdateRadarModeAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Provides Control of Radar Mode Updates Radar Mode
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Radar mode settings</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRadarModeAsyncWithHttpInfo (RadarModeRestDto body, int? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UpdateRadarMode");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->UpdateRadarMode");

            var localVarPath = "/radars/{id}/control/mode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRadarMode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Provides Control of Radar State Updates Radar State
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Radar state settings</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns></returns>
        public void UpdateRadarState (RadarStateRestDto body, int? id)
        {
             UpdateRadarStateWithHttpInfo(body, id);
        }

        /// <summary>
        /// Provides Control of Radar State Updates Radar State
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Radar state settings</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRadarStateWithHttpInfo (RadarStateRestDto body, int? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UpdateRadarState");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->UpdateRadarState");

            var localVarPath = "/radars/{id}/control/state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRadarState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Provides Control of Radar State Updates Radar State
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Radar state settings</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRadarStateAsync (RadarStateRestDto body, int? id)
        {
             await UpdateRadarStateAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Provides Control of Radar State Updates Radar State
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Radar state settings</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRadarStateAsyncWithHttpInfo (RadarStateRestDto body, int? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UpdateRadarState");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->UpdateRadarState");

            var localVarPath = "/radars/{id}/control/state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRadarState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Provides Control of Range Scale Updates Radar Range Scale
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Range Scale Setting</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns></returns>
        public void UpdateRangeScale (RangeScaleRestDto body, int? id)
        {
             UpdateRangeScaleWithHttpInfo(body, id);
        }

        /// <summary>
        /// Provides Control of Range Scale Updates Radar Range Scale
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Range Scale Setting</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRangeScaleWithHttpInfo (RangeScaleRestDto body, int? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UpdateRangeScale");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->UpdateRangeScale");

            var localVarPath = "/radars/{id}/control/rangeScale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRangeScale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Provides Control of Range Scale Updates Radar Range Scale
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Range Scale Setting</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRangeScaleAsync (RangeScaleRestDto body, int? id)
        {
             await UpdateRangeScaleAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Provides Control of Range Scale Updates Radar Range Scale
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Range Scale Setting</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRangeScaleAsyncWithHttpInfo (RangeScaleRestDto body, int? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UpdateRangeScale");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->UpdateRangeScale");

            var localVarPath = "/radars/{id}/control/rangeScale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRangeScale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Provides control of the Terma Profile Updates Terma Profile
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Terma Profile</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns></returns>
        public void UpdateTermaProfile (TermaProfileRestDto body, int? id)
        {
             UpdateTermaProfileWithHttpInfo(body, id);
        }

        /// <summary>
        /// Provides control of the Terma Profile Updates Terma Profile
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Terma Profile</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateTermaProfileWithHttpInfo (TermaProfileRestDto body, int? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UpdateTermaProfile");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->UpdateTermaProfile");

            var localVarPath = "/radars/{id}/control/termaProfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTermaProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Provides control of the Terma Profile Updates Terma Profile
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Terma Profile</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTermaProfileAsync (TermaProfileRestDto body, int? id)
        {
             await UpdateTermaProfileAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Provides control of the Terma Profile Updates Terma Profile
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Terma Profile</param>
        /// <param name="id">the radar id (the Radar Processor unit number)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTermaProfileAsyncWithHttpInfo (TermaProfileRestDto body, int? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UpdateTermaProfile");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->UpdateTermaProfile");

            var localVarPath = "/radars/{id}/control/termaProfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTermaProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
