/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ShipDetailRestDto
    /// </summary>
    [DataContract]
        public partial class ShipDetailRestDto :  IEquatable<ShipDetailRestDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipDetailRestDto" /> class.
        /// </summary>
        /// <param name="aisDest">Ship Destination as per AIS.</param>
        /// <param name="aisDestArrTime">Ship Destination arrival time as per AIS. &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00Z specifies a year-month-day followed by 24-hour hours:minutes:seconds in GMT time.</param>
        /// <param name="aisShipType">*method&#x3D;GET*String representation of the ship type and cargo {Source AIS Transponder}.</param>
        /// <param name="aisShipTypeCode">Numerical code representation of the ship type and cargo from ITU-R M.1371 {Source AIS Transponder}.</param>
        /// <param name="beam">Overall beam/width of ship (meters).</param>
        /// <param name="classificationSociety">The non-governmental organization that has validated and classified this ship.</param>
        /// <param name="crewSize">Standard crew size required to operate this ship.</param>
        /// <param name="deadWeight">Dead weight / carrying capacity of the ship (tons).</param>
        /// <param name="emailAddress">Standard email address to contact ship or ship liaison.</param>
        /// <param name="faxNumber">Standard fax number to contact ship or ship liaison.</param>
        /// <param name="formerNames">Former names that have been used by this ship.</param>
        /// <param name="grossTonnage">Overall internal volume of the ship.</param>
        /// <param name="id">the resource identifier; the ship id.</param>
        /// <param name="inmarsatNumber">Contact number for ships fitted with Inmarsat.</param>
        /// <param name="length">Overall length of ship (meters).</param>
        /// <param name="links">*method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;rel/portOfRegistry&#x27; link references the ship&#x27;s port of registry.</param>
        /// <param name="managerCompany">*hidden*.</param>
        /// <param name="maxCapacity">Maximum capacity including crew, support personnel and passengers.</param>
        /// <param name="operatorCompany">*hidden*.</param>
        /// <param name="otherShipIds">Additional identification numbers associated with this ship {key/value pairs}.</param>
        /// <param name="ownerCompany">*hidden*.</param>
        /// <param name="passengerCapacity">Maximum number of passenger supported by this ship.</param>
        /// <param name="phoneNumber">Standard phone number to contact ship or ship liaison.</param>
        /// <param name="registryPort">*method&#x3D;POST_OR_PUT*This is the &#x27;locode&#x27;; the International code for uniquely identifying this port.</param>
        /// <param name="staticDraft">Static draft (meters).</param>
        /// <param name="vesselClass">The classification given to this ship by the classification society.</param>
        /// <param name="yearOfBuild">Four digit representation of the year the ship was built.</param>
        public ShipDetailRestDto(string aisDest = default(string), string aisDestArrTime = default(string), string aisShipType = default(string), int? aisShipTypeCode = default(int?), float? beam = default(float?), string classificationSociety = default(string), int? crewSize = default(int?), int? deadWeight = default(int?), string emailAddress = default(string), string faxNumber = default(string), List<FormerShipName> formerNames = default(List<FormerShipName>), int? grossTonnage = default(int?), int? id = default(int?), string inmarsatNumber = default(string), float? length = default(float?), List<Link> links = default(List<Link>), int? managerCompany = default(int?), int? maxCapacity = default(int?), int? operatorCompany = default(int?), List<OtherShipId> otherShipIds = default(List<OtherShipId>), int? ownerCompany = default(int?), int? passengerCapacity = default(int?), string phoneNumber = default(string), string registryPort = default(string), float? staticDraft = default(float?), string vesselClass = default(string), int? yearOfBuild = default(int?))
        {
            this.AisDest = aisDest;
            this.AisDestArrTime = aisDestArrTime;
            this.AisShipType = aisShipType;
            this.AisShipTypeCode = aisShipTypeCode;
            this.Beam = beam;
            this.ClassificationSociety = classificationSociety;
            this.CrewSize = crewSize;
            this.DeadWeight = deadWeight;
            this.EmailAddress = emailAddress;
            this.FaxNumber = faxNumber;
            this.FormerNames = formerNames;
            this.GrossTonnage = grossTonnage;
            this.Id = id;
            this.InmarsatNumber = inmarsatNumber;
            this.Length = length;
            this.Links = links;
            this.ManagerCompany = managerCompany;
            this.MaxCapacity = maxCapacity;
            this.OperatorCompany = operatorCompany;
            this.OtherShipIds = otherShipIds;
            this.OwnerCompany = ownerCompany;
            this.PassengerCapacity = passengerCapacity;
            this.PhoneNumber = phoneNumber;
            this.RegistryPort = registryPort;
            this.StaticDraft = staticDraft;
            this.VesselClass = vesselClass;
            this.YearOfBuild = yearOfBuild;
        }
        
        /// <summary>
        /// Ship Destination as per AIS
        /// </summary>
        /// <value>Ship Destination as per AIS</value>
        [DataMember(Name="aisDest", EmitDefaultValue=false)]
        public string AisDest { get; set; }

        /// <summary>
        /// Ship Destination arrival time as per AIS. &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00Z specifies a year-month-day followed by 24-hour hours:minutes:seconds in GMT time
        /// </summary>
        /// <value>Ship Destination arrival time as per AIS. &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00Z specifies a year-month-day followed by 24-hour hours:minutes:seconds in GMT time</value>
        [DataMember(Name="aisDestArrTime", EmitDefaultValue=false)]
        public string AisDestArrTime { get; set; }

        /// <summary>
        /// *method&#x3D;GET*String representation of the ship type and cargo {Source AIS Transponder}
        /// </summary>
        /// <value>*method&#x3D;GET*String representation of the ship type and cargo {Source AIS Transponder}</value>
        [DataMember(Name="aisShipType", EmitDefaultValue=false)]
        public string AisShipType { get; set; }

        /// <summary>
        /// Numerical code representation of the ship type and cargo from ITU-R M.1371 {Source AIS Transponder}
        /// </summary>
        /// <value>Numerical code representation of the ship type and cargo from ITU-R M.1371 {Source AIS Transponder}</value>
        [DataMember(Name="aisShipTypeCode", EmitDefaultValue=false)]
        public int? AisShipTypeCode { get; set; }

        /// <summary>
        /// Overall beam/width of ship (meters)
        /// </summary>
        /// <value>Overall beam/width of ship (meters)</value>
        [DataMember(Name="beam", EmitDefaultValue=false)]
        public float? Beam { get; set; }

        /// <summary>
        /// The non-governmental organization that has validated and classified this ship
        /// </summary>
        /// <value>The non-governmental organization that has validated and classified this ship</value>
        [DataMember(Name="classificationSociety", EmitDefaultValue=false)]
        public string ClassificationSociety { get; set; }

        /// <summary>
        /// Standard crew size required to operate this ship
        /// </summary>
        /// <value>Standard crew size required to operate this ship</value>
        [DataMember(Name="crewSize", EmitDefaultValue=false)]
        public int? CrewSize { get; set; }

        /// <summary>
        /// Dead weight / carrying capacity of the ship (tons)
        /// </summary>
        /// <value>Dead weight / carrying capacity of the ship (tons)</value>
        [DataMember(Name="deadWeight", EmitDefaultValue=false)]
        public int? DeadWeight { get; set; }

        /// <summary>
        /// Standard email address to contact ship or ship liaison
        /// </summary>
        /// <value>Standard email address to contact ship or ship liaison</value>
        [DataMember(Name="emailAddress", EmitDefaultValue=false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Standard fax number to contact ship or ship liaison
        /// </summary>
        /// <value>Standard fax number to contact ship or ship liaison</value>
        [DataMember(Name="faxNumber", EmitDefaultValue=false)]
        public string FaxNumber { get; set; }

        /// <summary>
        /// Former names that have been used by this ship
        /// </summary>
        /// <value>Former names that have been used by this ship</value>
        [DataMember(Name="formerNames", EmitDefaultValue=false)]
        public List<FormerShipName> FormerNames { get; set; }

        /// <summary>
        /// Overall internal volume of the ship
        /// </summary>
        /// <value>Overall internal volume of the ship</value>
        [DataMember(Name="grossTonnage", EmitDefaultValue=false)]
        public int? GrossTonnage { get; set; }

        /// <summary>
        /// the resource identifier; the ship id
        /// </summary>
        /// <value>the resource identifier; the ship id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Contact number for ships fitted with Inmarsat
        /// </summary>
        /// <value>Contact number for ships fitted with Inmarsat</value>
        [DataMember(Name="inmarsatNumber", EmitDefaultValue=false)]
        public string InmarsatNumber { get; set; }

        /// <summary>
        /// Overall length of ship (meters)
        /// </summary>
        /// <value>Overall length of ship (meters)</value>
        [DataMember(Name="length", EmitDefaultValue=false)]
        public float? Length { get; set; }

        /// <summary>
        /// *method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;rel/portOfRegistry&#x27; link references the ship&#x27;s port of registry
        /// </summary>
        /// <value>*method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;rel/portOfRegistry&#x27; link references the ship&#x27;s port of registry</value>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// *hidden*
        /// </summary>
        /// <value>*hidden*</value>
        [DataMember(Name="managerCompany", EmitDefaultValue=false)]
        public int? ManagerCompany { get; set; }

        /// <summary>
        /// Maximum capacity including crew, support personnel and passengers
        /// </summary>
        /// <value>Maximum capacity including crew, support personnel and passengers</value>
        [DataMember(Name="maxCapacity", EmitDefaultValue=false)]
        public int? MaxCapacity { get; set; }

        /// <summary>
        /// *hidden*
        /// </summary>
        /// <value>*hidden*</value>
        [DataMember(Name="operatorCompany", EmitDefaultValue=false)]
        public int? OperatorCompany { get; set; }

        /// <summary>
        /// Additional identification numbers associated with this ship {key/value pairs}
        /// </summary>
        /// <value>Additional identification numbers associated with this ship {key/value pairs}</value>
        [DataMember(Name="otherShipIds", EmitDefaultValue=false)]
        public List<OtherShipId> OtherShipIds { get; set; }

        /// <summary>
        /// *hidden*
        /// </summary>
        /// <value>*hidden*</value>
        [DataMember(Name="ownerCompany", EmitDefaultValue=false)]
        public int? OwnerCompany { get; set; }

        /// <summary>
        /// Maximum number of passenger supported by this ship
        /// </summary>
        /// <value>Maximum number of passenger supported by this ship</value>
        [DataMember(Name="passengerCapacity", EmitDefaultValue=false)]
        public int? PassengerCapacity { get; set; }

        /// <summary>
        /// Standard phone number to contact ship or ship liaison
        /// </summary>
        /// <value>Standard phone number to contact ship or ship liaison</value>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// *method&#x3D;POST_OR_PUT*This is the &#x27;locode&#x27;; the International code for uniquely identifying this port
        /// </summary>
        /// <value>*method&#x3D;POST_OR_PUT*This is the &#x27;locode&#x27;; the International code for uniquely identifying this port</value>
        [DataMember(Name="registryPort", EmitDefaultValue=false)]
        public string RegistryPort { get; set; }

        /// <summary>
        /// Static draft (meters)
        /// </summary>
        /// <value>Static draft (meters)</value>
        [DataMember(Name="staticDraft", EmitDefaultValue=false)]
        public float? StaticDraft { get; set; }

        /// <summary>
        /// The classification given to this ship by the classification society
        /// </summary>
        /// <value>The classification given to this ship by the classification society</value>
        [DataMember(Name="vesselClass", EmitDefaultValue=false)]
        public string VesselClass { get; set; }

        /// <summary>
        /// Four digit representation of the year the ship was built
        /// </summary>
        /// <value>Four digit representation of the year the ship was built</value>
        [DataMember(Name="yearOfBuild", EmitDefaultValue=false)]
        public int? YearOfBuild { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShipDetailRestDto {\n");
            sb.Append("  AisDest: ").Append(AisDest).Append("\n");
            sb.Append("  AisDestArrTime: ").Append(AisDestArrTime).Append("\n");
            sb.Append("  AisShipType: ").Append(AisShipType).Append("\n");
            sb.Append("  AisShipTypeCode: ").Append(AisShipTypeCode).Append("\n");
            sb.Append("  Beam: ").Append(Beam).Append("\n");
            sb.Append("  ClassificationSociety: ").Append(ClassificationSociety).Append("\n");
            sb.Append("  CrewSize: ").Append(CrewSize).Append("\n");
            sb.Append("  DeadWeight: ").Append(DeadWeight).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  FaxNumber: ").Append(FaxNumber).Append("\n");
            sb.Append("  FormerNames: ").Append(FormerNames).Append("\n");
            sb.Append("  GrossTonnage: ").Append(GrossTonnage).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InmarsatNumber: ").Append(InmarsatNumber).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  ManagerCompany: ").Append(ManagerCompany).Append("\n");
            sb.Append("  MaxCapacity: ").Append(MaxCapacity).Append("\n");
            sb.Append("  OperatorCompany: ").Append(OperatorCompany).Append("\n");
            sb.Append("  OtherShipIds: ").Append(OtherShipIds).Append("\n");
            sb.Append("  OwnerCompany: ").Append(OwnerCompany).Append("\n");
            sb.Append("  PassengerCapacity: ").Append(PassengerCapacity).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  RegistryPort: ").Append(RegistryPort).Append("\n");
            sb.Append("  StaticDraft: ").Append(StaticDraft).Append("\n");
            sb.Append("  VesselClass: ").Append(VesselClass).Append("\n");
            sb.Append("  YearOfBuild: ").Append(YearOfBuild).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShipDetailRestDto);
        }

        /// <summary>
        /// Returns true if ShipDetailRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ShipDetailRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipDetailRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AisDest == input.AisDest ||
                    (this.AisDest != null &&
                    this.AisDest.Equals(input.AisDest))
                ) && 
                (
                    this.AisDestArrTime == input.AisDestArrTime ||
                    (this.AisDestArrTime != null &&
                    this.AisDestArrTime.Equals(input.AisDestArrTime))
                ) && 
                (
                    this.AisShipType == input.AisShipType ||
                    (this.AisShipType != null &&
                    this.AisShipType.Equals(input.AisShipType))
                ) && 
                (
                    this.AisShipTypeCode == input.AisShipTypeCode ||
                    (this.AisShipTypeCode != null &&
                    this.AisShipTypeCode.Equals(input.AisShipTypeCode))
                ) && 
                (
                    this.Beam == input.Beam ||
                    (this.Beam != null &&
                    this.Beam.Equals(input.Beam))
                ) && 
                (
                    this.ClassificationSociety == input.ClassificationSociety ||
                    (this.ClassificationSociety != null &&
                    this.ClassificationSociety.Equals(input.ClassificationSociety))
                ) && 
                (
                    this.CrewSize == input.CrewSize ||
                    (this.CrewSize != null &&
                    this.CrewSize.Equals(input.CrewSize))
                ) && 
                (
                    this.DeadWeight == input.DeadWeight ||
                    (this.DeadWeight != null &&
                    this.DeadWeight.Equals(input.DeadWeight))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.FaxNumber == input.FaxNumber ||
                    (this.FaxNumber != null &&
                    this.FaxNumber.Equals(input.FaxNumber))
                ) && 
                (
                    this.FormerNames == input.FormerNames ||
                    this.FormerNames != null &&
                    input.FormerNames != null &&
                    this.FormerNames.SequenceEqual(input.FormerNames)
                ) && 
                (
                    this.GrossTonnage == input.GrossTonnage ||
                    (this.GrossTonnage != null &&
                    this.GrossTonnage.Equals(input.GrossTonnage))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InmarsatNumber == input.InmarsatNumber ||
                    (this.InmarsatNumber != null &&
                    this.InmarsatNumber.Equals(input.InmarsatNumber))
                ) && 
                (
                    this.Length == input.Length ||
                    (this.Length != null &&
                    this.Length.Equals(input.Length))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.ManagerCompany == input.ManagerCompany ||
                    (this.ManagerCompany != null &&
                    this.ManagerCompany.Equals(input.ManagerCompany))
                ) && 
                (
                    this.MaxCapacity == input.MaxCapacity ||
                    (this.MaxCapacity != null &&
                    this.MaxCapacity.Equals(input.MaxCapacity))
                ) && 
                (
                    this.OperatorCompany == input.OperatorCompany ||
                    (this.OperatorCompany != null &&
                    this.OperatorCompany.Equals(input.OperatorCompany))
                ) && 
                (
                    this.OtherShipIds == input.OtherShipIds ||
                    this.OtherShipIds != null &&
                    input.OtherShipIds != null &&
                    this.OtherShipIds.SequenceEqual(input.OtherShipIds)
                ) && 
                (
                    this.OwnerCompany == input.OwnerCompany ||
                    (this.OwnerCompany != null &&
                    this.OwnerCompany.Equals(input.OwnerCompany))
                ) && 
                (
                    this.PassengerCapacity == input.PassengerCapacity ||
                    (this.PassengerCapacity != null &&
                    this.PassengerCapacity.Equals(input.PassengerCapacity))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.RegistryPort == input.RegistryPort ||
                    (this.RegistryPort != null &&
                    this.RegistryPort.Equals(input.RegistryPort))
                ) && 
                (
                    this.StaticDraft == input.StaticDraft ||
                    (this.StaticDraft != null &&
                    this.StaticDraft.Equals(input.StaticDraft))
                ) && 
                (
                    this.VesselClass == input.VesselClass ||
                    (this.VesselClass != null &&
                    this.VesselClass.Equals(input.VesselClass))
                ) && 
                (
                    this.YearOfBuild == input.YearOfBuild ||
                    (this.YearOfBuild != null &&
                    this.YearOfBuild.Equals(input.YearOfBuild))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AisDest != null)
                    hashCode = hashCode * 59 + this.AisDest.GetHashCode();
                if (this.AisDestArrTime != null)
                    hashCode = hashCode * 59 + this.AisDestArrTime.GetHashCode();
                if (this.AisShipType != null)
                    hashCode = hashCode * 59 + this.AisShipType.GetHashCode();
                if (this.AisShipTypeCode != null)
                    hashCode = hashCode * 59 + this.AisShipTypeCode.GetHashCode();
                if (this.Beam != null)
                    hashCode = hashCode * 59 + this.Beam.GetHashCode();
                if (this.ClassificationSociety != null)
                    hashCode = hashCode * 59 + this.ClassificationSociety.GetHashCode();
                if (this.CrewSize != null)
                    hashCode = hashCode * 59 + this.CrewSize.GetHashCode();
                if (this.DeadWeight != null)
                    hashCode = hashCode * 59 + this.DeadWeight.GetHashCode();
                if (this.EmailAddress != null)
                    hashCode = hashCode * 59 + this.EmailAddress.GetHashCode();
                if (this.FaxNumber != null)
                    hashCode = hashCode * 59 + this.FaxNumber.GetHashCode();
                if (this.FormerNames != null)
                    hashCode = hashCode * 59 + this.FormerNames.GetHashCode();
                if (this.GrossTonnage != null)
                    hashCode = hashCode * 59 + this.GrossTonnage.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InmarsatNumber != null)
                    hashCode = hashCode * 59 + this.InmarsatNumber.GetHashCode();
                if (this.Length != null)
                    hashCode = hashCode * 59 + this.Length.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.ManagerCompany != null)
                    hashCode = hashCode * 59 + this.ManagerCompany.GetHashCode();
                if (this.MaxCapacity != null)
                    hashCode = hashCode * 59 + this.MaxCapacity.GetHashCode();
                if (this.OperatorCompany != null)
                    hashCode = hashCode * 59 + this.OperatorCompany.GetHashCode();
                if (this.OtherShipIds != null)
                    hashCode = hashCode * 59 + this.OtherShipIds.GetHashCode();
                if (this.OwnerCompany != null)
                    hashCode = hashCode * 59 + this.OwnerCompany.GetHashCode();
                if (this.PassengerCapacity != null)
                    hashCode = hashCode * 59 + this.PassengerCapacity.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.RegistryPort != null)
                    hashCode = hashCode * 59 + this.RegistryPort.GetHashCode();
                if (this.StaticDraft != null)
                    hashCode = hashCode * 59 + this.StaticDraft.GetHashCode();
                if (this.VesselClass != null)
                    hashCode = hashCode * 59 + this.VesselClass.GetHashCode();
                if (this.YearOfBuild != null)
                    hashCode = hashCode * 59 + this.YearOfBuild.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
