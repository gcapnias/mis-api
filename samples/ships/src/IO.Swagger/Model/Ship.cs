/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Ship
    /// </summary>
    [DataContract]
        public partial class Ship :  IEquatable<Ship>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ship" /> class.
        /// </summary>
        /// <param name="aisName">AIS representation of name. {Source AIS Transponder}.</param>
        /// <param name="callSign">Call Sign.</param>
        /// <param name="country">*method&#x3D;POST_OR_PUT*Alpha 3 Code of the country.</param>
        /// <param name="flagUrl">*method&#x3D;GET*Image URL to the ship&#x27;s registered country&#x27;s flag.</param>
        /// <param name="fullName">Full ship name. {Populated by aisName if nothing else has been entered} (required).</param>
        /// <param name="id">the resource identifier; the ship id.</param>
        /// <param name="imoNumber">IMO number.</param>
        /// <param name="links">*method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;rel/detail&#x27; link references the ship&#x27;s detailed information,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;rel/countries&#x27; link references the ship&#x27;s registered country.</param>
        /// <param name="mmsiNumber">MMSI number.</param>
        /// <param name="shipDetail">shipDetail.</param>
        /// <param name="sourceType">*method&#x3D;POST_OR_PUT*[&#x27;Ais&#x27; or &#x27;Manual&#x27; or &#x27;External&#x27;]: The source type of the data.</param>
        /// <param name="thumbnailUrl">*method&#x3D;GET*Image URL to the ship&#x27;s primary photo.</param>
        public Ship(string aisName = default(string), string callSign = default(string), string country = default(string), string flagUrl = default(string), string fullName = default(string), int? id = default(int?), string imoNumber = default(string), List<Link> links = default(List<Link>), string mmsiNumber = default(string), ShipDetailRestDto shipDetail = default(ShipDetailRestDto), string sourceType = default(string), string thumbnailUrl = default(string))
        {
            // to ensure "fullName" is required (not null)
            if (fullName == null)
            {
                throw new InvalidDataException("fullName is a required property for Ship and cannot be null");
            }
            else
            {
                this.FullName = fullName;
            }
            this.AisName = aisName;
            this.CallSign = callSign;
            this.Country = country;
            this.FlagUrl = flagUrl;
            this.Id = id;
            this.ImoNumber = imoNumber;
            this.Links = links;
            this.MmsiNumber = mmsiNumber;
            this.ShipDetail = shipDetail;
            this.SourceType = sourceType;
            this.ThumbnailUrl = thumbnailUrl;
        }
        
        /// <summary>
        /// AIS representation of name. {Source AIS Transponder}
        /// </summary>
        /// <value>AIS representation of name. {Source AIS Transponder}</value>
        [DataMember(Name="aisName", EmitDefaultValue=false)]
        public string AisName { get; set; }

        /// <summary>
        /// Call Sign
        /// </summary>
        /// <value>Call Sign</value>
        [DataMember(Name="callSign", EmitDefaultValue=false)]
        public string CallSign { get; set; }

        /// <summary>
        /// *method&#x3D;POST_OR_PUT*Alpha 3 Code of the country
        /// </summary>
        /// <value>*method&#x3D;POST_OR_PUT*Alpha 3 Code of the country</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// *method&#x3D;GET*Image URL to the ship&#x27;s registered country&#x27;s flag
        /// </summary>
        /// <value>*method&#x3D;GET*Image URL to the ship&#x27;s registered country&#x27;s flag</value>
        [DataMember(Name="flagUrl", EmitDefaultValue=false)]
        public string FlagUrl { get; set; }

        /// <summary>
        /// Full ship name. {Populated by aisName if nothing else has been entered}
        /// </summary>
        /// <value>Full ship name. {Populated by aisName if nothing else has been entered}</value>
        [DataMember(Name="fullName", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// the resource identifier; the ship id
        /// </summary>
        /// <value>the resource identifier; the ship id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// IMO number
        /// </summary>
        /// <value>IMO number</value>
        [DataMember(Name="imoNumber", EmitDefaultValue=false)]
        public string ImoNumber { get; set; }

        /// <summary>
        /// *method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;rel/detail&#x27; link references the ship&#x27;s detailed information,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;rel/countries&#x27; link references the ship&#x27;s registered country
        /// </summary>
        /// <value>*method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;rel/detail&#x27; link references the ship&#x27;s detailed information,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;rel/countries&#x27; link references the ship&#x27;s registered country</value>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// MMSI number
        /// </summary>
        /// <value>MMSI number</value>
        [DataMember(Name="mmsiNumber", EmitDefaultValue=false)]
        public string MmsiNumber { get; set; }

        /// <summary>
        /// Gets or Sets ShipDetail
        /// </summary>
        [DataMember(Name="shipDetail", EmitDefaultValue=false)]
        public ShipDetailRestDto ShipDetail { get; set; }

        /// <summary>
        /// *method&#x3D;POST_OR_PUT*[&#x27;Ais&#x27; or &#x27;Manual&#x27; or &#x27;External&#x27;]: The source type of the data
        /// </summary>
        /// <value>*method&#x3D;POST_OR_PUT*[&#x27;Ais&#x27; or &#x27;Manual&#x27; or &#x27;External&#x27;]: The source type of the data</value>
        [DataMember(Name="sourceType", EmitDefaultValue=false)]
        public string SourceType { get; set; }

        /// <summary>
        /// *method&#x3D;GET*Image URL to the ship&#x27;s primary photo
        /// </summary>
        /// <value>*method&#x3D;GET*Image URL to the ship&#x27;s primary photo</value>
        [DataMember(Name="thumbnailUrl", EmitDefaultValue=false)]
        public string ThumbnailUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ship {\n");
            sb.Append("  AisName: ").Append(AisName).Append("\n");
            sb.Append("  CallSign: ").Append(CallSign).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  FlagUrl: ").Append(FlagUrl).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImoNumber: ").Append(ImoNumber).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  MmsiNumber: ").Append(MmsiNumber).Append("\n");
            sb.Append("  ShipDetail: ").Append(ShipDetail).Append("\n");
            sb.Append("  SourceType: ").Append(SourceType).Append("\n");
            sb.Append("  ThumbnailUrl: ").Append(ThumbnailUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Ship);
        }

        /// <summary>
        /// Returns true if Ship instances are equal
        /// </summary>
        /// <param name="input">Instance of Ship to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ship input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AisName == input.AisName ||
                    (this.AisName != null &&
                    this.AisName.Equals(input.AisName))
                ) && 
                (
                    this.CallSign == input.CallSign ||
                    (this.CallSign != null &&
                    this.CallSign.Equals(input.CallSign))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.FlagUrl == input.FlagUrl ||
                    (this.FlagUrl != null &&
                    this.FlagUrl.Equals(input.FlagUrl))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ImoNumber == input.ImoNumber ||
                    (this.ImoNumber != null &&
                    this.ImoNumber.Equals(input.ImoNumber))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.MmsiNumber == input.MmsiNumber ||
                    (this.MmsiNumber != null &&
                    this.MmsiNumber.Equals(input.MmsiNumber))
                ) && 
                (
                    this.ShipDetail == input.ShipDetail ||
                    (this.ShipDetail != null &&
                    this.ShipDetail.Equals(input.ShipDetail))
                ) && 
                (
                    this.SourceType == input.SourceType ||
                    (this.SourceType != null &&
                    this.SourceType.Equals(input.SourceType))
                ) && 
                (
                    this.ThumbnailUrl == input.ThumbnailUrl ||
                    (this.ThumbnailUrl != null &&
                    this.ThumbnailUrl.Equals(input.ThumbnailUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AisName != null)
                    hashCode = hashCode * 59 + this.AisName.GetHashCode();
                if (this.CallSign != null)
                    hashCode = hashCode * 59 + this.CallSign.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.FlagUrl != null)
                    hashCode = hashCode * 59 + this.FlagUrl.GetHashCode();
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ImoNumber != null)
                    hashCode = hashCode * 59 + this.ImoNumber.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.MmsiNumber != null)
                    hashCode = hashCode * 59 + this.MmsiNumber.GetHashCode();
                if (this.ShipDetail != null)
                    hashCode = hashCode * 59 + this.ShipDetail.GetHashCode();
                if (this.SourceType != null)
                    hashCode = hashCode * 59 + this.SourceType.GetHashCode();
                if (this.ThumbnailUrl != null)
                    hashCode = hashCode * 59 + this.ThumbnailUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
