/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AlertRestDto
    /// </summary>
    [DataContract]
        public partial class AlertRestDto :  IEquatable<AlertRestDto>, IValidatableObject
    {
        /// <summary>
        /// acknowledgement status of the alert
        /// </summary>
        /// <value>acknowledgement status of the alert</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum AckStateEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            /// <summary>
            /// Enum Acked for value: Acked
            /// </summary>
            [EnumMember(Value = "Acked")]
            Acked = 2,
            /// <summary>
            /// Enum Unacked for value: Unacked
            /// </summary>
            [EnumMember(Value = "Unacked")]
            Unacked = 3        }
        /// <summary>
        /// acknowledgement status of the alert
        /// </summary>
        /// <value>acknowledgement status of the alert</value>
        [DataMember(Name="ackState", EmitDefaultValue=false)]
        public AckStateEnum AckState { get; set; }
        /// <summary>
        /// active status of the alert
        /// </summary>
        /// <value>active status of the alert</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ActiveStateEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            /// <summary>
            /// Enum Active for value: Active
            /// </summary>
            [EnumMember(Value = "Active")]
            Active = 2,
            /// <summary>
            /// Enum Inactive for value: Inactive
            /// </summary>
            [EnumMember(Value = "Inactive")]
            Inactive = 3        }
        /// <summary>
        /// active status of the alert
        /// </summary>
        /// <value>active status of the alert</value>
        [DataMember(Name="activeState", EmitDefaultValue=false)]
        public ActiveStateEnum ActiveState { get; set; }
        /// <summary>
        /// priority level of the alert
        /// </summary>
        /// <value>priority level of the alert</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum PriorityEnum
        {
            /// <summary>
            /// Enum Info for value: Info
            /// </summary>
            [EnumMember(Value = "Info")]
            Info = 1,
            /// <summary>
            /// Enum Warning for value: Warning
            /// </summary>
            [EnumMember(Value = "Warning")]
            Warning = 2,
            /// <summary>
            /// Enum Critical for value: Critical
            /// </summary>
            [EnumMember(Value = "Critical")]
            Critical = 3        }
        /// <summary>
        /// priority level of the alert
        /// </summary>
        /// <value>priority level of the alert</value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public PriorityEnum? Priority { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AlertRestDto" /> class.
        /// </summary>
        /// <param name="ackState">acknowledgement status of the alert (required).</param>
        /// <param name="activeState">active status of the alert (required).</param>
        /// <param name="alertInternalId">alertInternalId (required).</param>
        /// <param name="alertText">high level description of the alert (required).</param>
        /// <param name="detailedAlertText">detailed level description of the alert (required).</param>
        /// <param name="id">the resource identifier; the alert id.</param>
        /// <param name="isMarkedForDeletion">&#x27;true&#x27; if this alert is no longer present in the system and will soon be removed from reporting (required).</param>
        /// <param name="links">*method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;rel/track&#x27; link references this alert&#x27;s associated track, if any (required).</param>
        /// <param name="priority">priority level of the alert.</param>
        public AlertRestDto(AckStateEnum ackState = default(AckStateEnum), ActiveStateEnum activeState = default(ActiveStateEnum), AlertInternalIdRestDto alertInternalId = default(AlertInternalIdRestDto), string alertText = default(string), string detailedAlertText = default(string), long? id = default(long?), bool? isMarkedForDeletion = default(bool?), List<Link> links = default(List<Link>), PriorityEnum? priority = default(PriorityEnum?))
        {
            // to ensure "ackState" is required (not null)
            if (ackState == null)
            {
                throw new InvalidDataException("ackState is a required property for AlertRestDto and cannot be null");
            }
            else
            {
                this.AckState = ackState;
            }
            // to ensure "activeState" is required (not null)
            if (activeState == null)
            {
                throw new InvalidDataException("activeState is a required property for AlertRestDto and cannot be null");
            }
            else
            {
                this.ActiveState = activeState;
            }
            // to ensure "alertInternalId" is required (not null)
            if (alertInternalId == null)
            {
                throw new InvalidDataException("alertInternalId is a required property for AlertRestDto and cannot be null");
            }
            else
            {
                this.AlertInternalId = alertInternalId;
            }
            // to ensure "alertText" is required (not null)
            if (alertText == null)
            {
                throw new InvalidDataException("alertText is a required property for AlertRestDto and cannot be null");
            }
            else
            {
                this.AlertText = alertText;
            }
            // to ensure "detailedAlertText" is required (not null)
            if (detailedAlertText == null)
            {
                throw new InvalidDataException("detailedAlertText is a required property for AlertRestDto and cannot be null");
            }
            else
            {
                this.DetailedAlertText = detailedAlertText;
            }
            // to ensure "isMarkedForDeletion" is required (not null)
            if (isMarkedForDeletion == null)
            {
                throw new InvalidDataException("isMarkedForDeletion is a required property for AlertRestDto and cannot be null");
            }
            else
            {
                this.IsMarkedForDeletion = isMarkedForDeletion;
            }
            // to ensure "links" is required (not null)
            if (links == null)
            {
                throw new InvalidDataException("links is a required property for AlertRestDto and cannot be null");
            }
            else
            {
                this.Links = links;
            }
            this.Id = id;
            this.Priority = priority;
        }
        


        /// <summary>
        /// Gets or Sets AlertInternalId
        /// </summary>
        [DataMember(Name="alertInternalId", EmitDefaultValue=false)]
        public AlertInternalIdRestDto AlertInternalId { get; set; }

        /// <summary>
        /// high level description of the alert
        /// </summary>
        /// <value>high level description of the alert</value>
        [DataMember(Name="alertText", EmitDefaultValue=false)]
        public string AlertText { get; set; }

        /// <summary>
        /// detailed level description of the alert
        /// </summary>
        /// <value>detailed level description of the alert</value>
        [DataMember(Name="detailedAlertText", EmitDefaultValue=false)]
        public string DetailedAlertText { get; set; }

        /// <summary>
        /// the resource identifier; the alert id
        /// </summary>
        /// <value>the resource identifier; the alert id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// &#x27;true&#x27; if this alert is no longer present in the system and will soon be removed from reporting
        /// </summary>
        /// <value>&#x27;true&#x27; if this alert is no longer present in the system and will soon be removed from reporting</value>
        [DataMember(Name="isMarkedForDeletion", EmitDefaultValue=false)]
        public bool? IsMarkedForDeletion { get; set; }

        /// <summary>
        /// *method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;rel/track&#x27; link references this alert&#x27;s associated track, if any
        /// </summary>
        /// <value>*method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;rel/track&#x27; link references this alert&#x27;s associated track, if any</value>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<Link> Links { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AlertRestDto {\n");
            sb.Append("  AckState: ").Append(AckState).Append("\n");
            sb.Append("  ActiveState: ").Append(ActiveState).Append("\n");
            sb.Append("  AlertInternalId: ").Append(AlertInternalId).Append("\n");
            sb.Append("  AlertText: ").Append(AlertText).Append("\n");
            sb.Append("  DetailedAlertText: ").Append(DetailedAlertText).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsMarkedForDeletion: ").Append(IsMarkedForDeletion).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlertRestDto);
        }

        /// <summary>
        /// Returns true if AlertRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of AlertRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlertRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AckState == input.AckState ||
                    (this.AckState != null &&
                    this.AckState.Equals(input.AckState))
                ) && 
                (
                    this.ActiveState == input.ActiveState ||
                    (this.ActiveState != null &&
                    this.ActiveState.Equals(input.ActiveState))
                ) && 
                (
                    this.AlertInternalId == input.AlertInternalId ||
                    (this.AlertInternalId != null &&
                    this.AlertInternalId.Equals(input.AlertInternalId))
                ) && 
                (
                    this.AlertText == input.AlertText ||
                    (this.AlertText != null &&
                    this.AlertText.Equals(input.AlertText))
                ) && 
                (
                    this.DetailedAlertText == input.DetailedAlertText ||
                    (this.DetailedAlertText != null &&
                    this.DetailedAlertText.Equals(input.DetailedAlertText))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsMarkedForDeletion == input.IsMarkedForDeletion ||
                    (this.IsMarkedForDeletion != null &&
                    this.IsMarkedForDeletion.Equals(input.IsMarkedForDeletion))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AckState != null)
                    hashCode = hashCode * 59 + this.AckState.GetHashCode();
                if (this.ActiveState != null)
                    hashCode = hashCode * 59 + this.ActiveState.GetHashCode();
                if (this.AlertInternalId != null)
                    hashCode = hashCode * 59 + this.AlertInternalId.GetHashCode();
                if (this.AlertText != null)
                    hashCode = hashCode * 59 + this.AlertText.GetHashCode();
                if (this.DetailedAlertText != null)
                    hashCode = hashCode * 59 + this.DetailedAlertText.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsMarkedForDeletion != null)
                    hashCode = hashCode * 59 + this.IsMarkedForDeletion.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
