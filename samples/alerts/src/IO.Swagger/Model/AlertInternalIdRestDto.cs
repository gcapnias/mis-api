/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// System internal alert id
    /// </summary>
    [DataContract]
        public partial class AlertInternalIdRestDto :  IEquatable<AlertInternalIdRestDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlertInternalIdRestDto" /> class.
        /// </summary>
        /// <param name="msgSubTypeId">specific id of alert within the alert source (required).</param>
        /// <param name="msgTypeId">source of alert (required).</param>
        /// <param name="processId">process id of the process  creating the alert  (required).</param>
        /// <param name="sourceNode">ip address of the source node creating the alert  (required).</param>
        public AlertInternalIdRestDto(int? msgSubTypeId = default(int?), int? msgTypeId = default(int?), int? processId = default(int?), string sourceNode = default(string))
        {
            // to ensure "msgSubTypeId" is required (not null)
            if (msgSubTypeId == null)
            {
                throw new InvalidDataException("msgSubTypeId is a required property for AlertInternalIdRestDto and cannot be null");
            }
            else
            {
                this.MsgSubTypeId = msgSubTypeId;
            }
            // to ensure "msgTypeId" is required (not null)
            if (msgTypeId == null)
            {
                throw new InvalidDataException("msgTypeId is a required property for AlertInternalIdRestDto and cannot be null");
            }
            else
            {
                this.MsgTypeId = msgTypeId;
            }
            // to ensure "processId" is required (not null)
            if (processId == null)
            {
                throw new InvalidDataException("processId is a required property for AlertInternalIdRestDto and cannot be null");
            }
            else
            {
                this.ProcessId = processId;
            }
            // to ensure "sourceNode" is required (not null)
            if (sourceNode == null)
            {
                throw new InvalidDataException("sourceNode is a required property for AlertInternalIdRestDto and cannot be null");
            }
            else
            {
                this.SourceNode = sourceNode;
            }
        }
        
        /// <summary>
        /// specific id of alert within the alert source
        /// </summary>
        /// <value>specific id of alert within the alert source</value>
        [DataMember(Name="msgSubTypeId", EmitDefaultValue=false)]
        public int? MsgSubTypeId { get; set; }

        /// <summary>
        /// source of alert
        /// </summary>
        /// <value>source of alert</value>
        [DataMember(Name="msgTypeId", EmitDefaultValue=false)]
        public int? MsgTypeId { get; set; }

        /// <summary>
        /// process id of the process  creating the alert 
        /// </summary>
        /// <value>process id of the process  creating the alert </value>
        [DataMember(Name="processId", EmitDefaultValue=false)]
        public int? ProcessId { get; set; }

        /// <summary>
        /// ip address of the source node creating the alert 
        /// </summary>
        /// <value>ip address of the source node creating the alert </value>
        [DataMember(Name="sourceNode", EmitDefaultValue=false)]
        public string SourceNode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AlertInternalIdRestDto {\n");
            sb.Append("  MsgSubTypeId: ").Append(MsgSubTypeId).Append("\n");
            sb.Append("  MsgTypeId: ").Append(MsgTypeId).Append("\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  SourceNode: ").Append(SourceNode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlertInternalIdRestDto);
        }

        /// <summary>
        /// Returns true if AlertInternalIdRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of AlertInternalIdRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlertInternalIdRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MsgSubTypeId == input.MsgSubTypeId ||
                    (this.MsgSubTypeId != null &&
                    this.MsgSubTypeId.Equals(input.MsgSubTypeId))
                ) && 
                (
                    this.MsgTypeId == input.MsgTypeId ||
                    (this.MsgTypeId != null &&
                    this.MsgTypeId.Equals(input.MsgTypeId))
                ) && 
                (
                    this.ProcessId == input.ProcessId ||
                    (this.ProcessId != null &&
                    this.ProcessId.Equals(input.ProcessId))
                ) && 
                (
                    this.SourceNode == input.SourceNode ||
                    (this.SourceNode != null &&
                    this.SourceNode.Equals(input.SourceNode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MsgSubTypeId != null)
                    hashCode = hashCode * 59 + this.MsgSubTypeId.GetHashCode();
                if (this.MsgTypeId != null)
                    hashCode = hashCode * 59 + this.MsgTypeId.GetHashCode();
                if (this.ProcessId != null)
                    hashCode = hashCode * 59 + this.ProcessId.GetHashCode();
                if (this.SourceNode != null)
                    hashCode = hashCode * 59 + this.SourceNode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
