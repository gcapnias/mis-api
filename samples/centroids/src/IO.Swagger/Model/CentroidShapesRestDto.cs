/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Shape of centroid given as array of entries (in clockwise direction) of azimuth and range start and stop
    /// </summary>
    [DataContract]
        public partial class CentroidShapesRestDto :  IEquatable<CentroidShapesRestDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CentroidShapesRestDto" /> class.
        /// </summary>
        /// <param name="azimuthBams">[0-65535]: azimuth value in BAMS for given entry (0 true north. Value increases in clockwise direction. 32768 (65536/2) represents 180 degrees).</param>
        /// <param name="rangeStart">start range of cluster for the given azimuthBams (in range bins).</param>
        /// <param name="rangeStop">end range of cluster for the given azimuthBams (in range bins).</param>
        public CentroidShapesRestDto(int? azimuthBams = default(int?), int? rangeStart = default(int?), int? rangeStop = default(int?))
        {
            this.AzimuthBams = azimuthBams;
            this.RangeStart = rangeStart;
            this.RangeStop = rangeStop;
        }
        
        /// <summary>
        /// [0-65535]: azimuth value in BAMS for given entry (0 true north. Value increases in clockwise direction. 32768 (65536/2) represents 180 degrees)
        /// </summary>
        /// <value>[0-65535]: azimuth value in BAMS for given entry (0 true north. Value increases in clockwise direction. 32768 (65536/2) represents 180 degrees)</value>
        [DataMember(Name="azimuthBams", EmitDefaultValue=false)]
        public int? AzimuthBams { get; set; }

        /// <summary>
        /// start range of cluster for the given azimuthBams (in range bins)
        /// </summary>
        /// <value>start range of cluster for the given azimuthBams (in range bins)</value>
        [DataMember(Name="rangeStart", EmitDefaultValue=false)]
        public int? RangeStart { get; set; }

        /// <summary>
        /// end range of cluster for the given azimuthBams (in range bins)
        /// </summary>
        /// <value>end range of cluster for the given azimuthBams (in range bins)</value>
        [DataMember(Name="rangeStop", EmitDefaultValue=false)]
        public int? RangeStop { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CentroidShapesRestDto {\n");
            sb.Append("  AzimuthBams: ").Append(AzimuthBams).Append("\n");
            sb.Append("  RangeStart: ").Append(RangeStart).Append("\n");
            sb.Append("  RangeStop: ").Append(RangeStop).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CentroidShapesRestDto);
        }

        /// <summary>
        /// Returns true if CentroidShapesRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CentroidShapesRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CentroidShapesRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AzimuthBams == input.AzimuthBams ||
                    (this.AzimuthBams != null &&
                    this.AzimuthBams.Equals(input.AzimuthBams))
                ) && 
                (
                    this.RangeStart == input.RangeStart ||
                    (this.RangeStart != null &&
                    this.RangeStart.Equals(input.RangeStart))
                ) && 
                (
                    this.RangeStop == input.RangeStop ||
                    (this.RangeStop != null &&
                    this.RangeStop.Equals(input.RangeStop))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AzimuthBams != null)
                    hashCode = hashCode * 59 + this.AzimuthBams.GetHashCode();
                if (this.RangeStart != null)
                    hashCode = hashCode * 59 + this.RangeStart.GetHashCode();
                if (this.RangeStop != null)
                    hashCode = hashCode * 59 + this.RangeStop.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
