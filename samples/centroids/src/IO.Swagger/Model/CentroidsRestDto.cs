/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Container for multiple Centroid statuses
    /// </summary>
    [DataContract]
        public partial class CentroidsRestDto :  IEquatable<CentroidsRestDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CentroidsRestDto" /> class.
        /// </summary>
        /// <param name="items">centroids for the requested RP.</param>
        /// <param name="metersPerRangeBin">meters per range bin (used to convert range-bin fields (such as clusterRangeBin) to meters).</param>
        /// <param name="notHeartbeating">[0,1] this field indicates the state of the system. If 1 then indicates there is no Heartbeat and it is very unlikely to have data. If missing (or 0) then indicates there is a Heartbeat, and data is expected (if the Radar is radiating).</param>
        /// <param name="numItems">number of centroids in this message.</param>
        /// <param name="posTime">position time in (float) epoch seconds.</param>
        /// <param name="radarLat">radar latitude in decimal degrees. Centroids are relative to this location..</param>
        /// <param name="radarLon">radar longitude in decimal degrees. Centroids are relative to this location..</param>
        /// <param name="rp">[1-64]: the resource identifier; the radar id (the Radar Processor unit number).</param>
        /// <param name="ws">ws.</param>
        public CentroidsRestDto(List<CentroidRestDto> items = default(List<CentroidRestDto>), float? metersPerRangeBin = default(float?), int? notHeartbeating = default(int?), int? numItems = default(int?), double? posTime = default(double?), double? radarLat = default(double?), double? radarLon = default(double?), int? rp = default(int?), WsHeaderInfoRestDto ws = default(WsHeaderInfoRestDto))
        {
            this.Items = items;
            this.MetersPerRangeBin = metersPerRangeBin;
            this.NotHeartbeating = notHeartbeating;
            this.NumItems = numItems;
            this.PosTime = posTime;
            this.RadarLat = radarLat;
            this.RadarLon = radarLon;
            this.Rp = rp;
            this.Ws = ws;
        }
        
        /// <summary>
        /// centroids for the requested RP
        /// </summary>
        /// <value>centroids for the requested RP</value>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<CentroidRestDto> Items { get; set; }

        /// <summary>
        /// meters per range bin (used to convert range-bin fields (such as clusterRangeBin) to meters)
        /// </summary>
        /// <value>meters per range bin (used to convert range-bin fields (such as clusterRangeBin) to meters)</value>
        [DataMember(Name="metersPerRangeBin", EmitDefaultValue=false)]
        public float? MetersPerRangeBin { get; set; }

        /// <summary>
        /// [0,1] this field indicates the state of the system. If 1 then indicates there is no Heartbeat and it is very unlikely to have data. If missing (or 0) then indicates there is a Heartbeat, and data is expected (if the Radar is radiating)
        /// </summary>
        /// <value>[0,1] this field indicates the state of the system. If 1 then indicates there is no Heartbeat and it is very unlikely to have data. If missing (or 0) then indicates there is a Heartbeat, and data is expected (if the Radar is radiating)</value>
        [DataMember(Name="notHeartbeating", EmitDefaultValue=false)]
        public int? NotHeartbeating { get; set; }

        /// <summary>
        /// number of centroids in this message
        /// </summary>
        /// <value>number of centroids in this message</value>
        [DataMember(Name="numItems", EmitDefaultValue=false)]
        public int? NumItems { get; set; }

        /// <summary>
        /// position time in (float) epoch seconds
        /// </summary>
        /// <value>position time in (float) epoch seconds</value>
        [DataMember(Name="posTime", EmitDefaultValue=false)]
        public double? PosTime { get; set; }

        /// <summary>
        /// radar latitude in decimal degrees. Centroids are relative to this location.
        /// </summary>
        /// <value>radar latitude in decimal degrees. Centroids are relative to this location.</value>
        [DataMember(Name="radarLat", EmitDefaultValue=false)]
        public double? RadarLat { get; set; }

        /// <summary>
        /// radar longitude in decimal degrees. Centroids are relative to this location.
        /// </summary>
        /// <value>radar longitude in decimal degrees. Centroids are relative to this location.</value>
        [DataMember(Name="radarLon", EmitDefaultValue=false)]
        public double? RadarLon { get; set; }

        /// <summary>
        /// [1-64]: the resource identifier; the radar id (the Radar Processor unit number)
        /// </summary>
        /// <value>[1-64]: the resource identifier; the radar id (the Radar Processor unit number)</value>
        [DataMember(Name="rp", EmitDefaultValue=false)]
        public int? Rp { get; set; }

        /// <summary>
        /// Gets or Sets Ws
        /// </summary>
        [DataMember(Name="ws", EmitDefaultValue=false)]
        public WsHeaderInfoRestDto Ws { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CentroidsRestDto {\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  MetersPerRangeBin: ").Append(MetersPerRangeBin).Append("\n");
            sb.Append("  NotHeartbeating: ").Append(NotHeartbeating).Append("\n");
            sb.Append("  NumItems: ").Append(NumItems).Append("\n");
            sb.Append("  PosTime: ").Append(PosTime).Append("\n");
            sb.Append("  RadarLat: ").Append(RadarLat).Append("\n");
            sb.Append("  RadarLon: ").Append(RadarLon).Append("\n");
            sb.Append("  Rp: ").Append(Rp).Append("\n");
            sb.Append("  Ws: ").Append(Ws).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CentroidsRestDto);
        }

        /// <summary>
        /// Returns true if CentroidsRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CentroidsRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CentroidsRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.MetersPerRangeBin == input.MetersPerRangeBin ||
                    (this.MetersPerRangeBin != null &&
                    this.MetersPerRangeBin.Equals(input.MetersPerRangeBin))
                ) && 
                (
                    this.NotHeartbeating == input.NotHeartbeating ||
                    (this.NotHeartbeating != null &&
                    this.NotHeartbeating.Equals(input.NotHeartbeating))
                ) && 
                (
                    this.NumItems == input.NumItems ||
                    (this.NumItems != null &&
                    this.NumItems.Equals(input.NumItems))
                ) && 
                (
                    this.PosTime == input.PosTime ||
                    (this.PosTime != null &&
                    this.PosTime.Equals(input.PosTime))
                ) && 
                (
                    this.RadarLat == input.RadarLat ||
                    (this.RadarLat != null &&
                    this.RadarLat.Equals(input.RadarLat))
                ) && 
                (
                    this.RadarLon == input.RadarLon ||
                    (this.RadarLon != null &&
                    this.RadarLon.Equals(input.RadarLon))
                ) && 
                (
                    this.Rp == input.Rp ||
                    (this.Rp != null &&
                    this.Rp.Equals(input.Rp))
                ) && 
                (
                    this.Ws == input.Ws ||
                    (this.Ws != null &&
                    this.Ws.Equals(input.Ws))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.MetersPerRangeBin != null)
                    hashCode = hashCode * 59 + this.MetersPerRangeBin.GetHashCode();
                if (this.NotHeartbeating != null)
                    hashCode = hashCode * 59 + this.NotHeartbeating.GetHashCode();
                if (this.NumItems != null)
                    hashCode = hashCode * 59 + this.NumItems.GetHashCode();
                if (this.PosTime != null)
                    hashCode = hashCode * 59 + this.PosTime.GetHashCode();
                if (this.RadarLat != null)
                    hashCode = hashCode * 59 + this.RadarLat.GetHashCode();
                if (this.RadarLon != null)
                    hashCode = hashCode * 59 + this.RadarLon.GetHashCode();
                if (this.Rp != null)
                    hashCode = hashCode * 59 + this.Rp.GetHashCode();
                if (this.Ws != null)
                    hashCode = hashCode * 59 + this.Ws.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
