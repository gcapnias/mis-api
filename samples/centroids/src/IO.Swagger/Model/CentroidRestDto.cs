/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Not used - Centroid data
    /// </summary>
    [DataContract]
        public partial class CentroidRestDto :  IEquatable<CentroidRestDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CentroidRestDto" /> class.
        /// </summary>
        /// <param name="clusterAzimuthBam">[0-65535]: azimuth of the cluster in BAMS (0 true north. value increases in clockwise direction. 32768 (65536/2) represents 180 degrees).</param>
        /// <param name="clusterRangeBin">range bin of the cluster.</param>
        /// <param name="peakAmp">[0-127]: peak amplitude of the centroid.</param>
        /// <param name="shape">array of centroid data which forms a centroid shape.</param>
        public CentroidRestDto(int? clusterAzimuthBam = default(int?), int? clusterRangeBin = default(int?), int? peakAmp = default(int?), List<CentroidShapesRestDto> shape = default(List<CentroidShapesRestDto>))
        {
            this.ClusterAzimuthBam = clusterAzimuthBam;
            this.ClusterRangeBin = clusterRangeBin;
            this.PeakAmp = peakAmp;
            this.Shape = shape;
        }
        
        /// <summary>
        /// [0-65535]: azimuth of the cluster in BAMS (0 true north. value increases in clockwise direction. 32768 (65536/2) represents 180 degrees)
        /// </summary>
        /// <value>[0-65535]: azimuth of the cluster in BAMS (0 true north. value increases in clockwise direction. 32768 (65536/2) represents 180 degrees)</value>
        [DataMember(Name="clusterAzimuthBam", EmitDefaultValue=false)]
        public int? ClusterAzimuthBam { get; set; }

        /// <summary>
        /// range bin of the cluster
        /// </summary>
        /// <value>range bin of the cluster</value>
        [DataMember(Name="clusterRangeBin", EmitDefaultValue=false)]
        public int? ClusterRangeBin { get; set; }

        /// <summary>
        /// [0-127]: peak amplitude of the centroid
        /// </summary>
        /// <value>[0-127]: peak amplitude of the centroid</value>
        [DataMember(Name="peakAmp", EmitDefaultValue=false)]
        public int? PeakAmp { get; set; }

        /// <summary>
        /// array of centroid data which forms a centroid shape
        /// </summary>
        /// <value>array of centroid data which forms a centroid shape</value>
        [DataMember(Name="shape", EmitDefaultValue=false)]
        public List<CentroidShapesRestDto> Shape { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CentroidRestDto {\n");
            sb.Append("  ClusterAzimuthBam: ").Append(ClusterAzimuthBam).Append("\n");
            sb.Append("  ClusterRangeBin: ").Append(ClusterRangeBin).Append("\n");
            sb.Append("  PeakAmp: ").Append(PeakAmp).Append("\n");
            sb.Append("  Shape: ").Append(Shape).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CentroidRestDto);
        }

        /// <summary>
        /// Returns true if CentroidRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CentroidRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CentroidRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClusterAzimuthBam == input.ClusterAzimuthBam ||
                    (this.ClusterAzimuthBam != null &&
                    this.ClusterAzimuthBam.Equals(input.ClusterAzimuthBam))
                ) && 
                (
                    this.ClusterRangeBin == input.ClusterRangeBin ||
                    (this.ClusterRangeBin != null &&
                    this.ClusterRangeBin.Equals(input.ClusterRangeBin))
                ) && 
                (
                    this.PeakAmp == input.PeakAmp ||
                    (this.PeakAmp != null &&
                    this.PeakAmp.Equals(input.PeakAmp))
                ) && 
                (
                    this.Shape == input.Shape ||
                    this.Shape != null &&
                    input.Shape != null &&
                    this.Shape.SequenceEqual(input.Shape)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClusterAzimuthBam != null)
                    hashCode = hashCode * 59 + this.ClusterAzimuthBam.GetHashCode();
                if (this.ClusterRangeBin != null)
                    hashCode = hashCode * 59 + this.ClusterRangeBin.GetHashCode();
                if (this.PeakAmp != null)
                    hashCode = hashCode * 59 + this.PeakAmp.GetHashCode();
                if (this.Shape != null)
                    hashCode = hashCode * 59 + this.Shape.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
