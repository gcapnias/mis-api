/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        /// <summary>
        /// Test DeleteAlarm
        /// </summary>
        [Test]
        public void DeleteAlarmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteAlarm(id);
            
        }
        /// <summary>
        /// Test GetAlarm
        /// </summary>
        [Test]
        public void GetAlarmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //string expand = null;
            //var response = instance.GetAlarm(id, expand);
            //Assert.IsInstanceOf<AlarmRestDto> (response, "response is AlarmRestDto");
        }
        /// <summary>
        /// Test GetAlarmTracks
        /// </summary>
        [Test]
        public void GetAlarmTracksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetAlarmTracks(id);
            //Assert.IsInstanceOf<TrackIdsIdOnlyRestDto> (response, "response is TrackIdsIdOnlyRestDto");
        }
        /// <summary>
        /// Test GetAlarms
        /// </summary>
        [Test]
        public void GetAlarmsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string expand = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetAlarms(expand, page, size);
            //Assert.IsInstanceOf<AlarmsRestDto> (response, "response is AlarmsRestDto");
        }
        /// <summary>
        /// Test GetAnchorWatchAlarm
        /// </summary>
        [Test]
        public void GetAnchorWatchAlarmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //string expand = null;
            //var response = instance.GetAnchorWatchAlarm(id, expand);
            //Assert.IsInstanceOf<AlarmAnchorWatchRestDto> (response, "response is AlarmAnchorWatchRestDto");
        }
        /// <summary>
        /// Test GetAnchorWatchAlarms
        /// </summary>
        [Test]
        public void GetAnchorWatchAlarmsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string expand = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetAnchorWatchAlarms(expand, page, size);
            //Assert.IsInstanceOf<AlarmAnchorWatchsRestDto> (response, "response is AlarmAnchorWatchsRestDto");
        }
        /// <summary>
        /// Test GetCpaAlarm
        /// </summary>
        [Test]
        public void GetCpaAlarmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //string expand = null;
            //var response = instance.GetCpaAlarm(id, expand);
            //Assert.IsInstanceOf<AlarmCpaRestDto> (response, "response is AlarmCpaRestDto");
        }
        /// <summary>
        /// Test GetCpaAlarms
        /// </summary>
        [Test]
        public void GetCpaAlarmsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string expand = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetCpaAlarms(expand, page, size);
            //Assert.IsInstanceOf<AlarmCpasRestDto> (response, "response is AlarmCpasRestDto");
        }
        /// <summary>
        /// Test GetProximityAlarm
        /// </summary>
        [Test]
        public void GetProximityAlarmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //string expand = null;
            //var response = instance.GetProximityAlarm(id, expand);
            //Assert.IsInstanceOf<AlarmProximityRestDto> (response, "response is AlarmProximityRestDto");
        }
        /// <summary>
        /// Test GetProximityAlarms
        /// </summary>
        [Test]
        public void GetProximityAlarmsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string expand = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetProximityAlarms(expand, page, size);
            //Assert.IsInstanceOf<AlarmProximitysRestDto> (response, "response is AlarmProximitysRestDto");
        }
        /// <summary>
        /// Test GetShallowDepthAlarm
        /// </summary>
        [Test]
        public void GetShallowDepthAlarmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //string expand = null;
            //var response = instance.GetShallowDepthAlarm(id, expand);
            //Assert.IsInstanceOf<AlarmShallowDepthRestDto> (response, "response is AlarmShallowDepthRestDto");
        }
        /// <summary>
        /// Test GetShallowDepthAlarms
        /// </summary>
        [Test]
        public void GetShallowDepthAlarmsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string expand = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetShallowDepthAlarms(expand, page, size);
            //Assert.IsInstanceOf<AlarmShallowDepthsRestDto> (response, "response is AlarmShallowDepthsRestDto");
        }
        /// <summary>
        /// Test GetStateChangedAlarm
        /// </summary>
        [Test]
        public void GetStateChangedAlarmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //string expand = null;
            //var response = instance.GetStateChangedAlarm(id, expand);
            //Assert.IsInstanceOf<AlarmStateChangedRestDto> (response, "response is AlarmStateChangedRestDto");
        }
        /// <summary>
        /// Test GetStateChangedAlarms
        /// </summary>
        [Test]
        public void GetStateChangedAlarmsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string expand = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetStateChangedAlarms(expand, page, size);
            //Assert.IsInstanceOf<AlarmStateChangedsRestDto> (response, "response is AlarmStateChangedsRestDto");
        }
        /// <summary>
        /// Test PostAddTrack
        /// </summary>
        [Test]
        public void PostAddTrackTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //string trackId = null;
            //instance.PostAddTrack(id, trackId);
            
        }
        /// <summary>
        /// Test PostAnchorWatchAlarm
        /// </summary>
        [Test]
        public void PostAnchorWatchAlarmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AlarmAnchorWatchInputRestDto body = null;
            //var response = instance.PostAnchorWatchAlarm(body);
            //Assert.IsInstanceOf<AlarmIdRestDto> (response, "response is AlarmIdRestDto");
        }
        /// <summary>
        /// Test PostCpaAlarm
        /// </summary>
        [Test]
        public void PostCpaAlarmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AlarmCpaInputRestDto body = null;
            //var response = instance.PostCpaAlarm(body);
            //Assert.IsInstanceOf<AlarmIdRestDto> (response, "response is AlarmIdRestDto");
        }
        /// <summary>
        /// Test PostDeleteTrack
        /// </summary>
        [Test]
        public void PostDeleteTrackTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //string trackId = null;
            //instance.PostDeleteTrack(id, trackId);
            
        }
        /// <summary>
        /// Test PostProximityAlarm
        /// </summary>
        [Test]
        public void PostProximityAlarmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AlarmProximityInputRestDto body = null;
            //var response = instance.PostProximityAlarm(body);
            //Assert.IsInstanceOf<AlarmIdRestDto> (response, "response is AlarmIdRestDto");
        }
        /// <summary>
        /// Test PostShallowDepthAlarm
        /// </summary>
        [Test]
        public void PostShallowDepthAlarmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AlarmShallowDepthInputRestDto body = null;
            //var response = instance.PostShallowDepthAlarm(body);
            //Assert.IsInstanceOf<AlarmIdRestDto> (response, "response is AlarmIdRestDto");
        }
        /// <summary>
        /// Test PostStateChangedAlarm
        /// </summary>
        [Test]
        public void PostStateChangedAlarmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.PostStateChangedAlarm();
            //Assert.IsInstanceOf<AlarmIdRestDto> (response, "response is AlarmIdRestDto");
        }
        /// <summary>
        /// Test PutAnchorWatchAlarm
        /// </summary>
        [Test]
        public void PutAnchorWatchAlarmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AlarmAnchorWatchInputRestDto body = null;
            //int? id = null;
            //instance.PutAnchorWatchAlarm(body, id);
            
        }
        /// <summary>
        /// Test PutCpaAlarm
        /// </summary>
        [Test]
        public void PutCpaAlarmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AlarmCpaInputRestDto body = null;
            //int? id = null;
            //instance.PutCpaAlarm(body, id);
            
        }
        /// <summary>
        /// Test PutProximityAlarm
        /// </summary>
        [Test]
        public void PutProximityAlarmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AlarmProximityInputRestDto body = null;
            //int? id = null;
            //instance.PutProximityAlarm(body, id);
            
        }
        /// <summary>
        /// Test PutShallowDepthAlarm
        /// </summary>
        [Test]
        public void PutShallowDepthAlarmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AlarmShallowDepthInputRestDto body = null;
            //int? id = null;
            //instance.PutShallowDepthAlarm(body, id);
            
        }
    }

}
