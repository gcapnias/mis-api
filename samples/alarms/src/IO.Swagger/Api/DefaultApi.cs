/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Drop an Alarm
        /// </summary>
        /// <remarks>
        /// Request the Alarm with the given ID to be dropped from the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <returns></returns>
        void DeleteAlarm (int? id);

        /// <summary>
        /// Drop an Alarm
        /// </summary>
        /// <remarks>
        /// Request the Alarm with the given ID to be dropped from the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAlarmWithHttpInfo (int? id);
        /// <summary>
        /// Get an Alarm
        /// </summary>
        /// <remarks>
        /// Requests an Alarm in the system, providing high level information for it
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>AlarmRestDto</returns>
        AlarmRestDto GetAlarm (int? id, string expand = null);

        /// <summary>
        /// Get an Alarm
        /// </summary>
        /// <remarks>
        /// Requests an Alarm in the system, providing high level information for it
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>ApiResponse of AlarmRestDto</returns>
        ApiResponse<AlarmRestDto> GetAlarmWithHttpInfo (int? id, string expand = null);
        /// <summary>
        /// Get the Alarms tracks
        /// </summary>
        /// <remarks>
        /// Requests the ids of the track associated with the specified Alarm
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <returns>TrackIdsIdOnlyRestDto</returns>
        TrackIdsIdOnlyRestDto GetAlarmTracks (int? id);

        /// <summary>
        /// Get the Alarms tracks
        /// </summary>
        /// <remarks>
        /// Requests the ids of the track associated with the specified Alarm
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <returns>ApiResponse of TrackIdsIdOnlyRestDto</returns>
        ApiResponse<TrackIdsIdOnlyRestDto> GetAlarmTracksWithHttpInfo (int? id);
        /// <summary>
        /// Get all types of Alarms
        /// </summary>
        /// <remarks>
        /// Requests all Alarms in the system, providing high level information for them
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>AlarmsRestDto</returns>
        AlarmsRestDto GetAlarms (string expand = null, int? page = null, int? size = null);

        /// <summary>
        /// Get all types of Alarms
        /// </summary>
        /// <remarks>
        /// Requests all Alarms in the system, providing high level information for them
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>ApiResponse of AlarmsRestDto</returns>
        ApiResponse<AlarmsRestDto> GetAlarmsWithHttpInfo (string expand = null, int? page = null, int? size = null);
        /// <summary>
        /// Get an Anchor Watch Alarm
        /// </summary>
        /// <remarks>
        /// Requests an Anchor Watch Alarm as identified by its id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>AlarmAnchorWatchRestDto</returns>
        AlarmAnchorWatchRestDto GetAnchorWatchAlarm (int? id, string expand = null);

        /// <summary>
        /// Get an Anchor Watch Alarm
        /// </summary>
        /// <remarks>
        /// Requests an Anchor Watch Alarm as identified by its id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>ApiResponse of AlarmAnchorWatchRestDto</returns>
        ApiResponse<AlarmAnchorWatchRestDto> GetAnchorWatchAlarmWithHttpInfo (int? id, string expand = null);
        /// <summary>
        /// Get Anchor Watch Alarms
        /// </summary>
        /// <remarks>
        /// Requests all Anchor Watch Alarms in the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>AlarmAnchorWatchsRestDto</returns>
        AlarmAnchorWatchsRestDto GetAnchorWatchAlarms (string expand = null, int? page = null, int? size = null);

        /// <summary>
        /// Get Anchor Watch Alarms
        /// </summary>
        /// <remarks>
        /// Requests all Anchor Watch Alarms in the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>ApiResponse of AlarmAnchorWatchsRestDto</returns>
        ApiResponse<AlarmAnchorWatchsRestDto> GetAnchorWatchAlarmsWithHttpInfo (string expand = null, int? page = null, int? size = null);
        /// <summary>
        /// Get a CPA Alarm
        /// </summary>
        /// <remarks>
        /// Requests a CPA Alarm as identified by its id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>AlarmCpaRestDto</returns>
        AlarmCpaRestDto GetCpaAlarm (int? id, string expand = null);

        /// <summary>
        /// Get a CPA Alarm
        /// </summary>
        /// <remarks>
        /// Requests a CPA Alarm as identified by its id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>ApiResponse of AlarmCpaRestDto</returns>
        ApiResponse<AlarmCpaRestDto> GetCpaAlarmWithHttpInfo (int? id, string expand = null);
        /// <summary>
        /// Get CPA Alarms
        /// </summary>
        /// <remarks>
        /// Requests all CPA Alarms in the system (closest point of approach).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>AlarmCpasRestDto</returns>
        AlarmCpasRestDto GetCpaAlarms (string expand = null, int? page = null, int? size = null);

        /// <summary>
        /// Get CPA Alarms
        /// </summary>
        /// <remarks>
        /// Requests all CPA Alarms in the system (closest point of approach).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>ApiResponse of AlarmCpasRestDto</returns>
        ApiResponse<AlarmCpasRestDto> GetCpaAlarmsWithHttpInfo (string expand = null, int? page = null, int? size = null);
        /// <summary>
        /// Get a Proximity Alarm
        /// </summary>
        /// <remarks>
        /// Requests a Proximity Alarm as identified by its id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>AlarmProximityRestDto</returns>
        AlarmProximityRestDto GetProximityAlarm (int? id, string expand = null);

        /// <summary>
        /// Get a Proximity Alarm
        /// </summary>
        /// <remarks>
        /// Requests a Proximity Alarm as identified by its id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>ApiResponse of AlarmProximityRestDto</returns>
        ApiResponse<AlarmProximityRestDto> GetProximityAlarmWithHttpInfo (int? id, string expand = null);
        /// <summary>
        /// Get Proximity Alarms
        /// </summary>
        /// <remarks>
        /// Requests all Proximity Alarms in the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>AlarmProximitysRestDto</returns>
        AlarmProximitysRestDto GetProximityAlarms (string expand = null, int? page = null, int? size = null);

        /// <summary>
        /// Get Proximity Alarms
        /// </summary>
        /// <remarks>
        /// Requests all Proximity Alarms in the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>ApiResponse of AlarmProximitysRestDto</returns>
        ApiResponse<AlarmProximitysRestDto> GetProximityAlarmsWithHttpInfo (string expand = null, int? page = null, int? size = null);
        /// <summary>
        /// Get a Shallow Depth Alarm
        /// </summary>
        /// <remarks>
        /// Requests a Shallow Depth Alarm as identified by its id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>AlarmShallowDepthRestDto</returns>
        AlarmShallowDepthRestDto GetShallowDepthAlarm (int? id, string expand = null);

        /// <summary>
        /// Get a Shallow Depth Alarm
        /// </summary>
        /// <remarks>
        /// Requests a Shallow Depth Alarm as identified by its id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>ApiResponse of AlarmShallowDepthRestDto</returns>
        ApiResponse<AlarmShallowDepthRestDto> GetShallowDepthAlarmWithHttpInfo (int? id, string expand = null);
        /// <summary>
        /// Get Shallow Depth Alarms
        /// </summary>
        /// <remarks>
        /// Requests all Shallow Depth Alarms in the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>AlarmShallowDepthsRestDto</returns>
        AlarmShallowDepthsRestDto GetShallowDepthAlarms (string expand = null, int? page = null, int? size = null);

        /// <summary>
        /// Get Shallow Depth Alarms
        /// </summary>
        /// <remarks>
        /// Requests all Shallow Depth Alarms in the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>ApiResponse of AlarmShallowDepthsRestDto</returns>
        ApiResponse<AlarmShallowDepthsRestDto> GetShallowDepthAlarmsWithHttpInfo (string expand = null, int? page = null, int? size = null);
        /// <summary>
        /// Get a State Changed Alarm
        /// </summary>
        /// <remarks>
        /// Requests a State Changed Alarm as identified by its id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>AlarmStateChangedRestDto</returns>
        AlarmStateChangedRestDto GetStateChangedAlarm (int? id, string expand = null);

        /// <summary>
        /// Get a State Changed Alarm
        /// </summary>
        /// <remarks>
        /// Requests a State Changed Alarm as identified by its id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>ApiResponse of AlarmStateChangedRestDto</returns>
        ApiResponse<AlarmStateChangedRestDto> GetStateChangedAlarmWithHttpInfo (int? id, string expand = null);
        /// <summary>
        /// Get State Changed Alarms
        /// </summary>
        /// <remarks>
        /// Requests all State Changed Alarms in the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>AlarmStateChangedsRestDto</returns>
        AlarmStateChangedsRestDto GetStateChangedAlarms (string expand = null, int? page = null, int? size = null);

        /// <summary>
        /// Get State Changed Alarms
        /// </summary>
        /// <remarks>
        /// Requests all State Changed Alarms in the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>ApiResponse of AlarmStateChangedsRestDto</returns>
        ApiResponse<AlarmStateChangedsRestDto> GetStateChangedAlarmsWithHttpInfo (string expand = null, int? page = null, int? size = null);
        /// <summary>
        /// Add the track to the specified Alarm
        /// </summary>
        /// <remarks>
        /// This adds the requested track to the Alarm.&lt;br&gt;If the track is already associated with the alarm no change is made and the request is accepted. (Note that if the track doesn&#x27;t exist in the system then a &#x27;Resource not found status&#x27; is returned.)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="trackId">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns></returns>
        void PostAddTrack (int? id, string trackId);

        /// <summary>
        /// Add the track to the specified Alarm
        /// </summary>
        /// <remarks>
        /// This adds the requested track to the Alarm.&lt;br&gt;If the track is already associated with the alarm no change is made and the request is accepted. (Note that if the track doesn&#x27;t exist in the system then a &#x27;Resource not found status&#x27; is returned.)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="trackId">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAddTrackWithHttpInfo (int? id, string trackId);
        /// <summary>
        /// Create an Anchor Watch Alarm
        /// </summary>
        /// <remarks>
        /// Create an Anchor Watch Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of this parameter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to create an Anchor Watch Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <returns>AlarmIdRestDto</returns>
        AlarmIdRestDto PostAnchorWatchAlarm (AlarmAnchorWatchInputRestDto body);

        /// <summary>
        /// Create an Anchor Watch Alarm
        /// </summary>
        /// <remarks>
        /// Create an Anchor Watch Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of this parameter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to create an Anchor Watch Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <returns>ApiResponse of AlarmIdRestDto</returns>
        ApiResponse<AlarmIdRestDto> PostAnchorWatchAlarmWithHttpInfo (AlarmAnchorWatchInputRestDto body);
        /// <summary>
        /// Create a CPA Alarm
        /// </summary>
        /// <remarks>
        /// Create a CPA Alarm with the supplied parameters.&lt;br&gt;Any combination of tracks within the given parameters will trigger the alarm (seen as an alert).&lt;br&gt;See the \&quot;Parameters\&quot; section for details of these parameters.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to create a CPA Alarm.&lt;br&gt;Note that both distance and time are required.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500,&lt;br&gt;  &quot;time&quot;: 300&lt;br&gt;}</param>
        /// <returns>AlarmIdRestDto</returns>
        AlarmIdRestDto PostCpaAlarm (AlarmCpaInputRestDto body);

        /// <summary>
        /// Create a CPA Alarm
        /// </summary>
        /// <remarks>
        /// Create a CPA Alarm with the supplied parameters.&lt;br&gt;Any combination of tracks within the given parameters will trigger the alarm (seen as an alert).&lt;br&gt;See the \&quot;Parameters\&quot; section for details of these parameters.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to create a CPA Alarm.&lt;br&gt;Note that both distance and time are required.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500,&lt;br&gt;  &quot;time&quot;: 300&lt;br&gt;}</param>
        /// <returns>ApiResponse of AlarmIdRestDto</returns>
        ApiResponse<AlarmIdRestDto> PostCpaAlarmWithHttpInfo (AlarmCpaInputRestDto body);
        /// <summary>
        /// Remove the track from the specified Alarm
        /// </summary>
        /// <remarks>
        /// This removes the track from the Alarm.&lt;br&gt;If the track isn&#x27;t already associated with the alarm no change is made and the request is still accepted.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="trackId">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns></returns>
        void PostDeleteTrack (int? id, string trackId);

        /// <summary>
        /// Remove the track from the specified Alarm
        /// </summary>
        /// <remarks>
        /// This removes the track from the Alarm.&lt;br&gt;If the track isn&#x27;t already associated with the alarm no change is made and the request is still accepted.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="trackId">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostDeleteTrackWithHttpInfo (int? id, string trackId);
        /// <summary>
        /// Create a Proximity Alarm
        /// </summary>
        /// <remarks>
        /// Create a Proximity Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of this parameter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to create a Proximity Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <returns>AlarmIdRestDto</returns>
        AlarmIdRestDto PostProximityAlarm (AlarmProximityInputRestDto body);

        /// <summary>
        /// Create a Proximity Alarm
        /// </summary>
        /// <remarks>
        /// Create a Proximity Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of this parameter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to create a Proximity Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <returns>ApiResponse of AlarmIdRestDto</returns>
        ApiResponse<AlarmIdRestDto> PostProximityAlarmWithHttpInfo (AlarmProximityInputRestDto body);
        /// <summary>
        /// Create a Shallow Depth Alarm
        /// </summary>
        /// <remarks>
        /// Create a Shallow Depth Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of this parameter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to create a Shallow Depth Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <returns>AlarmIdRestDto</returns>
        AlarmIdRestDto PostShallowDepthAlarm (AlarmShallowDepthInputRestDto body);

        /// <summary>
        /// Create a Shallow Depth Alarm
        /// </summary>
        /// <remarks>
        /// Create a Shallow Depth Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of this parameter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to create a Shallow Depth Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <returns>ApiResponse of AlarmIdRestDto</returns>
        ApiResponse<AlarmIdRestDto> PostShallowDepthAlarmWithHttpInfo (AlarmShallowDepthInputRestDto body);
        /// <summary>
        /// Create a State Changed Alarm
        /// </summary>
        /// <remarks>
        /// Create a State Changed Alarm to detect if the state of the specified track(s) have changed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AlarmIdRestDto</returns>
        AlarmIdRestDto PostStateChangedAlarm ();

        /// <summary>
        /// Create a State Changed Alarm
        /// </summary>
        /// <remarks>
        /// Create a State Changed Alarm to detect if the state of the specified track(s) have changed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AlarmIdRestDto</returns>
        ApiResponse<AlarmIdRestDto> PostStateChangedAlarmWithHttpInfo ();
        /// <summary>
        /// Update an Anchor Watch Alarm
        /// </summary>
        /// <remarks>
        /// Update an Anchor Watch Alarm with the supplied parameter.&lt;br&gt;See the \&quot;Parameters\&quot; section for detail of this parameter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update an Anchor Watch Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns></returns>
        void PutAnchorWatchAlarm (AlarmAnchorWatchInputRestDto body, int? id);

        /// <summary>
        /// Update an Anchor Watch Alarm
        /// </summary>
        /// <remarks>
        /// Update an Anchor Watch Alarm with the supplied parameter.&lt;br&gt;See the \&quot;Parameters\&quot; section for detail of this parameter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update an Anchor Watch Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutAnchorWatchAlarmWithHttpInfo (AlarmAnchorWatchInputRestDto body, int? id);
        /// <summary>
        /// Update a CPA Alarm
        /// </summary>
        /// <remarks>
        /// Update a CPA Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of these parameters.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to update a CPA Alarm.&lt;br&gt;Note that both distance and time are required.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500,&lt;br&gt;  &quot;time&quot;: 300&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns></returns>
        void PutCpaAlarm (AlarmCpaInputRestDto body, int? id);

        /// <summary>
        /// Update a CPA Alarm
        /// </summary>
        /// <remarks>
        /// Update a CPA Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of these parameters.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to update a CPA Alarm.&lt;br&gt;Note that both distance and time are required.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500,&lt;br&gt;  &quot;time&quot;: 300&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutCpaAlarmWithHttpInfo (AlarmCpaInputRestDto body, int? id);
        /// <summary>
        /// Update a Proximity Alarm
        /// </summary>
        /// <remarks>
        /// Update a Proximity Alarm with the supplied parameter.&lt;br&gt;See the \&quot;Parameters\&quot; section for detail of this parameter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a Proximity Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns></returns>
        void PutProximityAlarm (AlarmProximityInputRestDto body, int? id);

        /// <summary>
        /// Update a Proximity Alarm
        /// </summary>
        /// <remarks>
        /// Update a Proximity Alarm with the supplied parameter.&lt;br&gt;See the \&quot;Parameters\&quot; section for detail of this parameter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a Proximity Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutProximityAlarmWithHttpInfo (AlarmProximityInputRestDto body, int? id);
        /// <summary>
        /// Update a Shallow Depth Alarm
        /// </summary>
        /// <remarks>
        /// Update a Shallow Depth Alarm with the supplied parameter.&lt;br&gt;See the \&quot;Parameters\&quot; section for detail of this parameter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a Shallow Depth Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns></returns>
        void PutShallowDepthAlarm (AlarmShallowDepthInputRestDto body, int? id);

        /// <summary>
        /// Update a Shallow Depth Alarm
        /// </summary>
        /// <remarks>
        /// Update a Shallow Depth Alarm with the supplied parameter.&lt;br&gt;See the \&quot;Parameters\&quot; section for detail of this parameter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a Shallow Depth Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutShallowDepthAlarmWithHttpInfo (AlarmShallowDepthInputRestDto body, int? id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Drop an Alarm
        /// </summary>
        /// <remarks>
        /// Request the Alarm with the given ID to be dropped from the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAlarmAsync (int? id);

        /// <summary>
        /// Drop an Alarm
        /// </summary>
        /// <remarks>
        /// Request the Alarm with the given ID to be dropped from the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAlarmAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get an Alarm
        /// </summary>
        /// <remarks>
        /// Requests an Alarm in the system, providing high level information for it
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>Task of AlarmRestDto</returns>
        System.Threading.Tasks.Task<AlarmRestDto> GetAlarmAsync (int? id, string expand = null);

        /// <summary>
        /// Get an Alarm
        /// </summary>
        /// <remarks>
        /// Requests an Alarm in the system, providing high level information for it
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>Task of ApiResponse (AlarmRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlarmRestDto>> GetAlarmAsyncWithHttpInfo (int? id, string expand = null);
        /// <summary>
        /// Get the Alarms tracks
        /// </summary>
        /// <remarks>
        /// Requests the ids of the track associated with the specified Alarm
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <returns>Task of TrackIdsIdOnlyRestDto</returns>
        System.Threading.Tasks.Task<TrackIdsIdOnlyRestDto> GetAlarmTracksAsync (int? id);

        /// <summary>
        /// Get the Alarms tracks
        /// </summary>
        /// <remarks>
        /// Requests the ids of the track associated with the specified Alarm
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <returns>Task of ApiResponse (TrackIdsIdOnlyRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackIdsIdOnlyRestDto>> GetAlarmTracksAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get all types of Alarms
        /// </summary>
        /// <remarks>
        /// Requests all Alarms in the system, providing high level information for them
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of AlarmsRestDto</returns>
        System.Threading.Tasks.Task<AlarmsRestDto> GetAlarmsAsync (string expand = null, int? page = null, int? size = null);

        /// <summary>
        /// Get all types of Alarms
        /// </summary>
        /// <remarks>
        /// Requests all Alarms in the system, providing high level information for them
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (AlarmsRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlarmsRestDto>> GetAlarmsAsyncWithHttpInfo (string expand = null, int? page = null, int? size = null);
        /// <summary>
        /// Get an Anchor Watch Alarm
        /// </summary>
        /// <remarks>
        /// Requests an Anchor Watch Alarm as identified by its id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>Task of AlarmAnchorWatchRestDto</returns>
        System.Threading.Tasks.Task<AlarmAnchorWatchRestDto> GetAnchorWatchAlarmAsync (int? id, string expand = null);

        /// <summary>
        /// Get an Anchor Watch Alarm
        /// </summary>
        /// <remarks>
        /// Requests an Anchor Watch Alarm as identified by its id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>Task of ApiResponse (AlarmAnchorWatchRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlarmAnchorWatchRestDto>> GetAnchorWatchAlarmAsyncWithHttpInfo (int? id, string expand = null);
        /// <summary>
        /// Get Anchor Watch Alarms
        /// </summary>
        /// <remarks>
        /// Requests all Anchor Watch Alarms in the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of AlarmAnchorWatchsRestDto</returns>
        System.Threading.Tasks.Task<AlarmAnchorWatchsRestDto> GetAnchorWatchAlarmsAsync (string expand = null, int? page = null, int? size = null);

        /// <summary>
        /// Get Anchor Watch Alarms
        /// </summary>
        /// <remarks>
        /// Requests all Anchor Watch Alarms in the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (AlarmAnchorWatchsRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlarmAnchorWatchsRestDto>> GetAnchorWatchAlarmsAsyncWithHttpInfo (string expand = null, int? page = null, int? size = null);
        /// <summary>
        /// Get a CPA Alarm
        /// </summary>
        /// <remarks>
        /// Requests a CPA Alarm as identified by its id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>Task of AlarmCpaRestDto</returns>
        System.Threading.Tasks.Task<AlarmCpaRestDto> GetCpaAlarmAsync (int? id, string expand = null);

        /// <summary>
        /// Get a CPA Alarm
        /// </summary>
        /// <remarks>
        /// Requests a CPA Alarm as identified by its id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>Task of ApiResponse (AlarmCpaRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlarmCpaRestDto>> GetCpaAlarmAsyncWithHttpInfo (int? id, string expand = null);
        /// <summary>
        /// Get CPA Alarms
        /// </summary>
        /// <remarks>
        /// Requests all CPA Alarms in the system (closest point of approach).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of AlarmCpasRestDto</returns>
        System.Threading.Tasks.Task<AlarmCpasRestDto> GetCpaAlarmsAsync (string expand = null, int? page = null, int? size = null);

        /// <summary>
        /// Get CPA Alarms
        /// </summary>
        /// <remarks>
        /// Requests all CPA Alarms in the system (closest point of approach).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (AlarmCpasRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlarmCpasRestDto>> GetCpaAlarmsAsyncWithHttpInfo (string expand = null, int? page = null, int? size = null);
        /// <summary>
        /// Get a Proximity Alarm
        /// </summary>
        /// <remarks>
        /// Requests a Proximity Alarm as identified by its id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>Task of AlarmProximityRestDto</returns>
        System.Threading.Tasks.Task<AlarmProximityRestDto> GetProximityAlarmAsync (int? id, string expand = null);

        /// <summary>
        /// Get a Proximity Alarm
        /// </summary>
        /// <remarks>
        /// Requests a Proximity Alarm as identified by its id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>Task of ApiResponse (AlarmProximityRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlarmProximityRestDto>> GetProximityAlarmAsyncWithHttpInfo (int? id, string expand = null);
        /// <summary>
        /// Get Proximity Alarms
        /// </summary>
        /// <remarks>
        /// Requests all Proximity Alarms in the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of AlarmProximitysRestDto</returns>
        System.Threading.Tasks.Task<AlarmProximitysRestDto> GetProximityAlarmsAsync (string expand = null, int? page = null, int? size = null);

        /// <summary>
        /// Get Proximity Alarms
        /// </summary>
        /// <remarks>
        /// Requests all Proximity Alarms in the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (AlarmProximitysRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlarmProximitysRestDto>> GetProximityAlarmsAsyncWithHttpInfo (string expand = null, int? page = null, int? size = null);
        /// <summary>
        /// Get a Shallow Depth Alarm
        /// </summary>
        /// <remarks>
        /// Requests a Shallow Depth Alarm as identified by its id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>Task of AlarmShallowDepthRestDto</returns>
        System.Threading.Tasks.Task<AlarmShallowDepthRestDto> GetShallowDepthAlarmAsync (int? id, string expand = null);

        /// <summary>
        /// Get a Shallow Depth Alarm
        /// </summary>
        /// <remarks>
        /// Requests a Shallow Depth Alarm as identified by its id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>Task of ApiResponse (AlarmShallowDepthRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlarmShallowDepthRestDto>> GetShallowDepthAlarmAsyncWithHttpInfo (int? id, string expand = null);
        /// <summary>
        /// Get Shallow Depth Alarms
        /// </summary>
        /// <remarks>
        /// Requests all Shallow Depth Alarms in the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of AlarmShallowDepthsRestDto</returns>
        System.Threading.Tasks.Task<AlarmShallowDepthsRestDto> GetShallowDepthAlarmsAsync (string expand = null, int? page = null, int? size = null);

        /// <summary>
        /// Get Shallow Depth Alarms
        /// </summary>
        /// <remarks>
        /// Requests all Shallow Depth Alarms in the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (AlarmShallowDepthsRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlarmShallowDepthsRestDto>> GetShallowDepthAlarmsAsyncWithHttpInfo (string expand = null, int? page = null, int? size = null);
        /// <summary>
        /// Get a State Changed Alarm
        /// </summary>
        /// <remarks>
        /// Requests a State Changed Alarm as identified by its id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>Task of AlarmStateChangedRestDto</returns>
        System.Threading.Tasks.Task<AlarmStateChangedRestDto> GetStateChangedAlarmAsync (int? id, string expand = null);

        /// <summary>
        /// Get a State Changed Alarm
        /// </summary>
        /// <remarks>
        /// Requests a State Changed Alarm as identified by its id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>Task of ApiResponse (AlarmStateChangedRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlarmStateChangedRestDto>> GetStateChangedAlarmAsyncWithHttpInfo (int? id, string expand = null);
        /// <summary>
        /// Get State Changed Alarms
        /// </summary>
        /// <remarks>
        /// Requests all State Changed Alarms in the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of AlarmStateChangedsRestDto</returns>
        System.Threading.Tasks.Task<AlarmStateChangedsRestDto> GetStateChangedAlarmsAsync (string expand = null, int? page = null, int? size = null);

        /// <summary>
        /// Get State Changed Alarms
        /// </summary>
        /// <remarks>
        /// Requests all State Changed Alarms in the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (AlarmStateChangedsRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlarmStateChangedsRestDto>> GetStateChangedAlarmsAsyncWithHttpInfo (string expand = null, int? page = null, int? size = null);
        /// <summary>
        /// Add the track to the specified Alarm
        /// </summary>
        /// <remarks>
        /// This adds the requested track to the Alarm.&lt;br&gt;If the track is already associated with the alarm no change is made and the request is accepted. (Note that if the track doesn&#x27;t exist in the system then a &#x27;Resource not found status&#x27; is returned.)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="trackId">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAddTrackAsync (int? id, string trackId);

        /// <summary>
        /// Add the track to the specified Alarm
        /// </summary>
        /// <remarks>
        /// This adds the requested track to the Alarm.&lt;br&gt;If the track is already associated with the alarm no change is made and the request is accepted. (Note that if the track doesn&#x27;t exist in the system then a &#x27;Resource not found status&#x27; is returned.)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="trackId">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAddTrackAsyncWithHttpInfo (int? id, string trackId);
        /// <summary>
        /// Create an Anchor Watch Alarm
        /// </summary>
        /// <remarks>
        /// Create an Anchor Watch Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of this parameter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to create an Anchor Watch Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <returns>Task of AlarmIdRestDto</returns>
        System.Threading.Tasks.Task<AlarmIdRestDto> PostAnchorWatchAlarmAsync (AlarmAnchorWatchInputRestDto body);

        /// <summary>
        /// Create an Anchor Watch Alarm
        /// </summary>
        /// <remarks>
        /// Create an Anchor Watch Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of this parameter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to create an Anchor Watch Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <returns>Task of ApiResponse (AlarmIdRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlarmIdRestDto>> PostAnchorWatchAlarmAsyncWithHttpInfo (AlarmAnchorWatchInputRestDto body);
        /// <summary>
        /// Create a CPA Alarm
        /// </summary>
        /// <remarks>
        /// Create a CPA Alarm with the supplied parameters.&lt;br&gt;Any combination of tracks within the given parameters will trigger the alarm (seen as an alert).&lt;br&gt;See the \&quot;Parameters\&quot; section for details of these parameters.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to create a CPA Alarm.&lt;br&gt;Note that both distance and time are required.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500,&lt;br&gt;  &quot;time&quot;: 300&lt;br&gt;}</param>
        /// <returns>Task of AlarmIdRestDto</returns>
        System.Threading.Tasks.Task<AlarmIdRestDto> PostCpaAlarmAsync (AlarmCpaInputRestDto body);

        /// <summary>
        /// Create a CPA Alarm
        /// </summary>
        /// <remarks>
        /// Create a CPA Alarm with the supplied parameters.&lt;br&gt;Any combination of tracks within the given parameters will trigger the alarm (seen as an alert).&lt;br&gt;See the \&quot;Parameters\&quot; section for details of these parameters.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to create a CPA Alarm.&lt;br&gt;Note that both distance and time are required.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500,&lt;br&gt;  &quot;time&quot;: 300&lt;br&gt;}</param>
        /// <returns>Task of ApiResponse (AlarmIdRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlarmIdRestDto>> PostCpaAlarmAsyncWithHttpInfo (AlarmCpaInputRestDto body);
        /// <summary>
        /// Remove the track from the specified Alarm
        /// </summary>
        /// <remarks>
        /// This removes the track from the Alarm.&lt;br&gt;If the track isn&#x27;t already associated with the alarm no change is made and the request is still accepted.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="trackId">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostDeleteTrackAsync (int? id, string trackId);

        /// <summary>
        /// Remove the track from the specified Alarm
        /// </summary>
        /// <remarks>
        /// This removes the track from the Alarm.&lt;br&gt;If the track isn&#x27;t already associated with the alarm no change is made and the request is still accepted.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="trackId">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostDeleteTrackAsyncWithHttpInfo (int? id, string trackId);
        /// <summary>
        /// Create a Proximity Alarm
        /// </summary>
        /// <remarks>
        /// Create a Proximity Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of this parameter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to create a Proximity Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <returns>Task of AlarmIdRestDto</returns>
        System.Threading.Tasks.Task<AlarmIdRestDto> PostProximityAlarmAsync (AlarmProximityInputRestDto body);

        /// <summary>
        /// Create a Proximity Alarm
        /// </summary>
        /// <remarks>
        /// Create a Proximity Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of this parameter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to create a Proximity Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <returns>Task of ApiResponse (AlarmIdRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlarmIdRestDto>> PostProximityAlarmAsyncWithHttpInfo (AlarmProximityInputRestDto body);
        /// <summary>
        /// Create a Shallow Depth Alarm
        /// </summary>
        /// <remarks>
        /// Create a Shallow Depth Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of this parameter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to create a Shallow Depth Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <returns>Task of AlarmIdRestDto</returns>
        System.Threading.Tasks.Task<AlarmIdRestDto> PostShallowDepthAlarmAsync (AlarmShallowDepthInputRestDto body);

        /// <summary>
        /// Create a Shallow Depth Alarm
        /// </summary>
        /// <remarks>
        /// Create a Shallow Depth Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of this parameter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to create a Shallow Depth Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <returns>Task of ApiResponse (AlarmIdRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlarmIdRestDto>> PostShallowDepthAlarmAsyncWithHttpInfo (AlarmShallowDepthInputRestDto body);
        /// <summary>
        /// Create a State Changed Alarm
        /// </summary>
        /// <remarks>
        /// Create a State Changed Alarm to detect if the state of the specified track(s) have changed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AlarmIdRestDto</returns>
        System.Threading.Tasks.Task<AlarmIdRestDto> PostStateChangedAlarmAsync ();

        /// <summary>
        /// Create a State Changed Alarm
        /// </summary>
        /// <remarks>
        /// Create a State Changed Alarm to detect if the state of the specified track(s) have changed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AlarmIdRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlarmIdRestDto>> PostStateChangedAlarmAsyncWithHttpInfo ();
        /// <summary>
        /// Update an Anchor Watch Alarm
        /// </summary>
        /// <remarks>
        /// Update an Anchor Watch Alarm with the supplied parameter.&lt;br&gt;See the \&quot;Parameters\&quot; section for detail of this parameter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update an Anchor Watch Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutAnchorWatchAlarmAsync (AlarmAnchorWatchInputRestDto body, int? id);

        /// <summary>
        /// Update an Anchor Watch Alarm
        /// </summary>
        /// <remarks>
        /// Update an Anchor Watch Alarm with the supplied parameter.&lt;br&gt;See the \&quot;Parameters\&quot; section for detail of this parameter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update an Anchor Watch Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutAnchorWatchAlarmAsyncWithHttpInfo (AlarmAnchorWatchInputRestDto body, int? id);
        /// <summary>
        /// Update a CPA Alarm
        /// </summary>
        /// <remarks>
        /// Update a CPA Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of these parameters.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to update a CPA Alarm.&lt;br&gt;Note that both distance and time are required.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500,&lt;br&gt;  &quot;time&quot;: 300&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutCpaAlarmAsync (AlarmCpaInputRestDto body, int? id);

        /// <summary>
        /// Update a CPA Alarm
        /// </summary>
        /// <remarks>
        /// Update a CPA Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of these parameters.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to update a CPA Alarm.&lt;br&gt;Note that both distance and time are required.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500,&lt;br&gt;  &quot;time&quot;: 300&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutCpaAlarmAsyncWithHttpInfo (AlarmCpaInputRestDto body, int? id);
        /// <summary>
        /// Update a Proximity Alarm
        /// </summary>
        /// <remarks>
        /// Update a Proximity Alarm with the supplied parameter.&lt;br&gt;See the \&quot;Parameters\&quot; section for detail of this parameter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a Proximity Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutProximityAlarmAsync (AlarmProximityInputRestDto body, int? id);

        /// <summary>
        /// Update a Proximity Alarm
        /// </summary>
        /// <remarks>
        /// Update a Proximity Alarm with the supplied parameter.&lt;br&gt;See the \&quot;Parameters\&quot; section for detail of this parameter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a Proximity Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutProximityAlarmAsyncWithHttpInfo (AlarmProximityInputRestDto body, int? id);
        /// <summary>
        /// Update a Shallow Depth Alarm
        /// </summary>
        /// <remarks>
        /// Update a Shallow Depth Alarm with the supplied parameter.&lt;br&gt;See the \&quot;Parameters\&quot; section for detail of this parameter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a Shallow Depth Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutShallowDepthAlarmAsync (AlarmShallowDepthInputRestDto body, int? id);

        /// <summary>
        /// Update a Shallow Depth Alarm
        /// </summary>
        /// <remarks>
        /// Update a Shallow Depth Alarm with the supplied parameter.&lt;br&gt;See the \&quot;Parameters\&quot; section for detail of this parameter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a Shallow Depth Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutShallowDepthAlarmAsyncWithHttpInfo (AlarmShallowDepthInputRestDto body, int? id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Drop an Alarm Request the Alarm with the given ID to be dropped from the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <returns></returns>
        public void DeleteAlarm (int? id)
        {
             DeleteAlarmWithHttpInfo(id);
        }

        /// <summary>
        /// Drop an Alarm Request the Alarm with the given ID to be dropped from the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAlarmWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->DeleteAlarm");

            var localVarPath = "/alarms/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Drop an Alarm Request the Alarm with the given ID to be dropped from the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAlarmAsync (int? id)
        {
             await DeleteAlarmAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Drop an Alarm Request the Alarm with the given ID to be dropped from the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAlarmAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->DeleteAlarm");

            var localVarPath = "/alarms/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get an Alarm Requests an Alarm in the system, providing high level information for it
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>AlarmRestDto</returns>
        public AlarmRestDto GetAlarm (int? id, string expand = null)
        {
             ApiResponse<AlarmRestDto> localVarResponse = GetAlarmWithHttpInfo(id, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an Alarm Requests an Alarm in the system, providing high level information for it
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>ApiResponse of AlarmRestDto</returns>
        public ApiResponse< AlarmRestDto > GetAlarmWithHttpInfo (int? id, string expand = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetAlarm");

            var localVarPath = "/alarms/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmRestDto)));
        }

        /// <summary>
        /// Get an Alarm Requests an Alarm in the system, providing high level information for it
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>Task of AlarmRestDto</returns>
        public async System.Threading.Tasks.Task<AlarmRestDto> GetAlarmAsync (int? id, string expand = null)
        {
             ApiResponse<AlarmRestDto> localVarResponse = await GetAlarmAsyncWithHttpInfo(id, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an Alarm Requests an Alarm in the system, providing high level information for it
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>Task of ApiResponse (AlarmRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlarmRestDto>> GetAlarmAsyncWithHttpInfo (int? id, string expand = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetAlarm");

            var localVarPath = "/alarms/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmRestDto)));
        }

        /// <summary>
        /// Get the Alarms tracks Requests the ids of the track associated with the specified Alarm
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <returns>TrackIdsIdOnlyRestDto</returns>
        public TrackIdsIdOnlyRestDto GetAlarmTracks (int? id)
        {
             ApiResponse<TrackIdsIdOnlyRestDto> localVarResponse = GetAlarmTracksWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Alarms tracks Requests the ids of the track associated with the specified Alarm
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <returns>ApiResponse of TrackIdsIdOnlyRestDto</returns>
        public ApiResponse< TrackIdsIdOnlyRestDto > GetAlarmTracksWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetAlarmTracks");

            var localVarPath = "/alarms/{id}/tracks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAlarmTracks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackIdsIdOnlyRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TrackIdsIdOnlyRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackIdsIdOnlyRestDto)));
        }

        /// <summary>
        /// Get the Alarms tracks Requests the ids of the track associated with the specified Alarm
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <returns>Task of TrackIdsIdOnlyRestDto</returns>
        public async System.Threading.Tasks.Task<TrackIdsIdOnlyRestDto> GetAlarmTracksAsync (int? id)
        {
             ApiResponse<TrackIdsIdOnlyRestDto> localVarResponse = await GetAlarmTracksAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the Alarms tracks Requests the ids of the track associated with the specified Alarm
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <returns>Task of ApiResponse (TrackIdsIdOnlyRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrackIdsIdOnlyRestDto>> GetAlarmTracksAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetAlarmTracks");

            var localVarPath = "/alarms/{id}/tracks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAlarmTracks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackIdsIdOnlyRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TrackIdsIdOnlyRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackIdsIdOnlyRestDto)));
        }

        /// <summary>
        /// Get all types of Alarms Requests all Alarms in the system, providing high level information for them
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>AlarmsRestDto</returns>
        public AlarmsRestDto GetAlarms (string expand = null, int? page = null, int? size = null)
        {
             ApiResponse<AlarmsRestDto> localVarResponse = GetAlarmsWithHttpInfo(expand, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all types of Alarms Requests all Alarms in the system, providing high level information for them
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>ApiResponse of AlarmsRestDto</returns>
        public ApiResponse< AlarmsRestDto > GetAlarmsWithHttpInfo (string expand = null, int? page = null, int? size = null)
        {

            var localVarPath = "/alarms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAlarms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmsRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmsRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmsRestDto)));
        }

        /// <summary>
        /// Get all types of Alarms Requests all Alarms in the system, providing high level information for them
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of AlarmsRestDto</returns>
        public async System.Threading.Tasks.Task<AlarmsRestDto> GetAlarmsAsync (string expand = null, int? page = null, int? size = null)
        {
             ApiResponse<AlarmsRestDto> localVarResponse = await GetAlarmsAsyncWithHttpInfo(expand, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all types of Alarms Requests all Alarms in the system, providing high level information for them
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (AlarmsRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlarmsRestDto>> GetAlarmsAsyncWithHttpInfo (string expand = null, int? page = null, int? size = null)
        {

            var localVarPath = "/alarms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAlarms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmsRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmsRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmsRestDto)));
        }

        /// <summary>
        /// Get an Anchor Watch Alarm Requests an Anchor Watch Alarm as identified by its id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>AlarmAnchorWatchRestDto</returns>
        public AlarmAnchorWatchRestDto GetAnchorWatchAlarm (int? id, string expand = null)
        {
             ApiResponse<AlarmAnchorWatchRestDto> localVarResponse = GetAnchorWatchAlarmWithHttpInfo(id, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an Anchor Watch Alarm Requests an Anchor Watch Alarm as identified by its id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>ApiResponse of AlarmAnchorWatchRestDto</returns>
        public ApiResponse< AlarmAnchorWatchRestDto > GetAnchorWatchAlarmWithHttpInfo (int? id, string expand = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetAnchorWatchAlarm");

            var localVarPath = "/alarms/anchorWatch/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAnchorWatchAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmAnchorWatchRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmAnchorWatchRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmAnchorWatchRestDto)));
        }

        /// <summary>
        /// Get an Anchor Watch Alarm Requests an Anchor Watch Alarm as identified by its id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>Task of AlarmAnchorWatchRestDto</returns>
        public async System.Threading.Tasks.Task<AlarmAnchorWatchRestDto> GetAnchorWatchAlarmAsync (int? id, string expand = null)
        {
             ApiResponse<AlarmAnchorWatchRestDto> localVarResponse = await GetAnchorWatchAlarmAsyncWithHttpInfo(id, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an Anchor Watch Alarm Requests an Anchor Watch Alarm as identified by its id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>Task of ApiResponse (AlarmAnchorWatchRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlarmAnchorWatchRestDto>> GetAnchorWatchAlarmAsyncWithHttpInfo (int? id, string expand = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetAnchorWatchAlarm");

            var localVarPath = "/alarms/anchorWatch/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAnchorWatchAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmAnchorWatchRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmAnchorWatchRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmAnchorWatchRestDto)));
        }

        /// <summary>
        /// Get Anchor Watch Alarms Requests all Anchor Watch Alarms in the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>AlarmAnchorWatchsRestDto</returns>
        public AlarmAnchorWatchsRestDto GetAnchorWatchAlarms (string expand = null, int? page = null, int? size = null)
        {
             ApiResponse<AlarmAnchorWatchsRestDto> localVarResponse = GetAnchorWatchAlarmsWithHttpInfo(expand, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Anchor Watch Alarms Requests all Anchor Watch Alarms in the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>ApiResponse of AlarmAnchorWatchsRestDto</returns>
        public ApiResponse< AlarmAnchorWatchsRestDto > GetAnchorWatchAlarmsWithHttpInfo (string expand = null, int? page = null, int? size = null)
        {

            var localVarPath = "/alarms/anchorWatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAnchorWatchAlarms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmAnchorWatchsRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmAnchorWatchsRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmAnchorWatchsRestDto)));
        }

        /// <summary>
        /// Get Anchor Watch Alarms Requests all Anchor Watch Alarms in the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of AlarmAnchorWatchsRestDto</returns>
        public async System.Threading.Tasks.Task<AlarmAnchorWatchsRestDto> GetAnchorWatchAlarmsAsync (string expand = null, int? page = null, int? size = null)
        {
             ApiResponse<AlarmAnchorWatchsRestDto> localVarResponse = await GetAnchorWatchAlarmsAsyncWithHttpInfo(expand, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Anchor Watch Alarms Requests all Anchor Watch Alarms in the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (AlarmAnchorWatchsRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlarmAnchorWatchsRestDto>> GetAnchorWatchAlarmsAsyncWithHttpInfo (string expand = null, int? page = null, int? size = null)
        {

            var localVarPath = "/alarms/anchorWatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAnchorWatchAlarms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmAnchorWatchsRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmAnchorWatchsRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmAnchorWatchsRestDto)));
        }

        /// <summary>
        /// Get a CPA Alarm Requests a CPA Alarm as identified by its id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>AlarmCpaRestDto</returns>
        public AlarmCpaRestDto GetCpaAlarm (int? id, string expand = null)
        {
             ApiResponse<AlarmCpaRestDto> localVarResponse = GetCpaAlarmWithHttpInfo(id, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a CPA Alarm Requests a CPA Alarm as identified by its id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>ApiResponse of AlarmCpaRestDto</returns>
        public ApiResponse< AlarmCpaRestDto > GetCpaAlarmWithHttpInfo (int? id, string expand = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetCpaAlarm");

            var localVarPath = "/alarms/cpa/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCpaAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmCpaRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmCpaRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmCpaRestDto)));
        }

        /// <summary>
        /// Get a CPA Alarm Requests a CPA Alarm as identified by its id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>Task of AlarmCpaRestDto</returns>
        public async System.Threading.Tasks.Task<AlarmCpaRestDto> GetCpaAlarmAsync (int? id, string expand = null)
        {
             ApiResponse<AlarmCpaRestDto> localVarResponse = await GetCpaAlarmAsyncWithHttpInfo(id, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a CPA Alarm Requests a CPA Alarm as identified by its id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>Task of ApiResponse (AlarmCpaRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlarmCpaRestDto>> GetCpaAlarmAsyncWithHttpInfo (int? id, string expand = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetCpaAlarm");

            var localVarPath = "/alarms/cpa/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCpaAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmCpaRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmCpaRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmCpaRestDto)));
        }

        /// <summary>
        /// Get CPA Alarms Requests all CPA Alarms in the system (closest point of approach).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>AlarmCpasRestDto</returns>
        public AlarmCpasRestDto GetCpaAlarms (string expand = null, int? page = null, int? size = null)
        {
             ApiResponse<AlarmCpasRestDto> localVarResponse = GetCpaAlarmsWithHttpInfo(expand, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get CPA Alarms Requests all CPA Alarms in the system (closest point of approach).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>ApiResponse of AlarmCpasRestDto</returns>
        public ApiResponse< AlarmCpasRestDto > GetCpaAlarmsWithHttpInfo (string expand = null, int? page = null, int? size = null)
        {

            var localVarPath = "/alarms/cpa";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCpaAlarms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmCpasRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmCpasRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmCpasRestDto)));
        }

        /// <summary>
        /// Get CPA Alarms Requests all CPA Alarms in the system (closest point of approach).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of AlarmCpasRestDto</returns>
        public async System.Threading.Tasks.Task<AlarmCpasRestDto> GetCpaAlarmsAsync (string expand = null, int? page = null, int? size = null)
        {
             ApiResponse<AlarmCpasRestDto> localVarResponse = await GetCpaAlarmsAsyncWithHttpInfo(expand, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get CPA Alarms Requests all CPA Alarms in the system (closest point of approach).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (AlarmCpasRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlarmCpasRestDto>> GetCpaAlarmsAsyncWithHttpInfo (string expand = null, int? page = null, int? size = null)
        {

            var localVarPath = "/alarms/cpa";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCpaAlarms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmCpasRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmCpasRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmCpasRestDto)));
        }

        /// <summary>
        /// Get a Proximity Alarm Requests a Proximity Alarm as identified by its id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>AlarmProximityRestDto</returns>
        public AlarmProximityRestDto GetProximityAlarm (int? id, string expand = null)
        {
             ApiResponse<AlarmProximityRestDto> localVarResponse = GetProximityAlarmWithHttpInfo(id, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Proximity Alarm Requests a Proximity Alarm as identified by its id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>ApiResponse of AlarmProximityRestDto</returns>
        public ApiResponse< AlarmProximityRestDto > GetProximityAlarmWithHttpInfo (int? id, string expand = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetProximityAlarm");

            var localVarPath = "/alarms/proximity/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProximityAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmProximityRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmProximityRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmProximityRestDto)));
        }

        /// <summary>
        /// Get a Proximity Alarm Requests a Proximity Alarm as identified by its id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>Task of AlarmProximityRestDto</returns>
        public async System.Threading.Tasks.Task<AlarmProximityRestDto> GetProximityAlarmAsync (int? id, string expand = null)
        {
             ApiResponse<AlarmProximityRestDto> localVarResponse = await GetProximityAlarmAsyncWithHttpInfo(id, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Proximity Alarm Requests a Proximity Alarm as identified by its id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>Task of ApiResponse (AlarmProximityRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlarmProximityRestDto>> GetProximityAlarmAsyncWithHttpInfo (int? id, string expand = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetProximityAlarm");

            var localVarPath = "/alarms/proximity/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProximityAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmProximityRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmProximityRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmProximityRestDto)));
        }

        /// <summary>
        /// Get Proximity Alarms Requests all Proximity Alarms in the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>AlarmProximitysRestDto</returns>
        public AlarmProximitysRestDto GetProximityAlarms (string expand = null, int? page = null, int? size = null)
        {
             ApiResponse<AlarmProximitysRestDto> localVarResponse = GetProximityAlarmsWithHttpInfo(expand, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Proximity Alarms Requests all Proximity Alarms in the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>ApiResponse of AlarmProximitysRestDto</returns>
        public ApiResponse< AlarmProximitysRestDto > GetProximityAlarmsWithHttpInfo (string expand = null, int? page = null, int? size = null)
        {

            var localVarPath = "/alarms/proximity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProximityAlarms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmProximitysRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmProximitysRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmProximitysRestDto)));
        }

        /// <summary>
        /// Get Proximity Alarms Requests all Proximity Alarms in the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of AlarmProximitysRestDto</returns>
        public async System.Threading.Tasks.Task<AlarmProximitysRestDto> GetProximityAlarmsAsync (string expand = null, int? page = null, int? size = null)
        {
             ApiResponse<AlarmProximitysRestDto> localVarResponse = await GetProximityAlarmsAsyncWithHttpInfo(expand, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Proximity Alarms Requests all Proximity Alarms in the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (AlarmProximitysRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlarmProximitysRestDto>> GetProximityAlarmsAsyncWithHttpInfo (string expand = null, int? page = null, int? size = null)
        {

            var localVarPath = "/alarms/proximity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProximityAlarms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmProximitysRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmProximitysRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmProximitysRestDto)));
        }

        /// <summary>
        /// Get a Shallow Depth Alarm Requests a Shallow Depth Alarm as identified by its id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>AlarmShallowDepthRestDto</returns>
        public AlarmShallowDepthRestDto GetShallowDepthAlarm (int? id, string expand = null)
        {
             ApiResponse<AlarmShallowDepthRestDto> localVarResponse = GetShallowDepthAlarmWithHttpInfo(id, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Shallow Depth Alarm Requests a Shallow Depth Alarm as identified by its id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>ApiResponse of AlarmShallowDepthRestDto</returns>
        public ApiResponse< AlarmShallowDepthRestDto > GetShallowDepthAlarmWithHttpInfo (int? id, string expand = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetShallowDepthAlarm");

            var localVarPath = "/alarms/shallowDepth/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShallowDepthAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmShallowDepthRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmShallowDepthRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmShallowDepthRestDto)));
        }

        /// <summary>
        /// Get a Shallow Depth Alarm Requests a Shallow Depth Alarm as identified by its id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>Task of AlarmShallowDepthRestDto</returns>
        public async System.Threading.Tasks.Task<AlarmShallowDepthRestDto> GetShallowDepthAlarmAsync (int? id, string expand = null)
        {
             ApiResponse<AlarmShallowDepthRestDto> localVarResponse = await GetShallowDepthAlarmAsyncWithHttpInfo(id, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Shallow Depth Alarm Requests a Shallow Depth Alarm as identified by its id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>Task of ApiResponse (AlarmShallowDepthRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlarmShallowDepthRestDto>> GetShallowDepthAlarmAsyncWithHttpInfo (int? id, string expand = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetShallowDepthAlarm");

            var localVarPath = "/alarms/shallowDepth/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShallowDepthAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmShallowDepthRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmShallowDepthRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmShallowDepthRestDto)));
        }

        /// <summary>
        /// Get Shallow Depth Alarms Requests all Shallow Depth Alarms in the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>AlarmShallowDepthsRestDto</returns>
        public AlarmShallowDepthsRestDto GetShallowDepthAlarms (string expand = null, int? page = null, int? size = null)
        {
             ApiResponse<AlarmShallowDepthsRestDto> localVarResponse = GetShallowDepthAlarmsWithHttpInfo(expand, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Shallow Depth Alarms Requests all Shallow Depth Alarms in the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>ApiResponse of AlarmShallowDepthsRestDto</returns>
        public ApiResponse< AlarmShallowDepthsRestDto > GetShallowDepthAlarmsWithHttpInfo (string expand = null, int? page = null, int? size = null)
        {

            var localVarPath = "/alarms/shallowDepth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShallowDepthAlarms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmShallowDepthsRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmShallowDepthsRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmShallowDepthsRestDto)));
        }

        /// <summary>
        /// Get Shallow Depth Alarms Requests all Shallow Depth Alarms in the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of AlarmShallowDepthsRestDto</returns>
        public async System.Threading.Tasks.Task<AlarmShallowDepthsRestDto> GetShallowDepthAlarmsAsync (string expand = null, int? page = null, int? size = null)
        {
             ApiResponse<AlarmShallowDepthsRestDto> localVarResponse = await GetShallowDepthAlarmsAsyncWithHttpInfo(expand, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Shallow Depth Alarms Requests all Shallow Depth Alarms in the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (AlarmShallowDepthsRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlarmShallowDepthsRestDto>> GetShallowDepthAlarmsAsyncWithHttpInfo (string expand = null, int? page = null, int? size = null)
        {

            var localVarPath = "/alarms/shallowDepth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShallowDepthAlarms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmShallowDepthsRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmShallowDepthsRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmShallowDepthsRestDto)));
        }

        /// <summary>
        /// Get a State Changed Alarm Requests a State Changed Alarm as identified by its id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>AlarmStateChangedRestDto</returns>
        public AlarmStateChangedRestDto GetStateChangedAlarm (int? id, string expand = null)
        {
             ApiResponse<AlarmStateChangedRestDto> localVarResponse = GetStateChangedAlarmWithHttpInfo(id, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a State Changed Alarm Requests a State Changed Alarm as identified by its id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>ApiResponse of AlarmStateChangedRestDto</returns>
        public ApiResponse< AlarmStateChangedRestDto > GetStateChangedAlarmWithHttpInfo (int? id, string expand = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetStateChangedAlarm");

            var localVarPath = "/alarms/stateChanged/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStateChangedAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmStateChangedRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmStateChangedRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmStateChangedRestDto)));
        }

        /// <summary>
        /// Get a State Changed Alarm Requests a State Changed Alarm as identified by its id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>Task of AlarmStateChangedRestDto</returns>
        public async System.Threading.Tasks.Task<AlarmStateChangedRestDto> GetStateChangedAlarmAsync (int? id, string expand = null)
        {
             ApiResponse<AlarmStateChangedRestDto> localVarResponse = await GetStateChangedAlarmAsyncWithHttpInfo(id, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a State Changed Alarm Requests a State Changed Alarm as identified by its id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <returns>Task of ApiResponse (AlarmStateChangedRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlarmStateChangedRestDto>> GetStateChangedAlarmAsyncWithHttpInfo (int? id, string expand = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetStateChangedAlarm");

            var localVarPath = "/alarms/stateChanged/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStateChangedAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmStateChangedRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmStateChangedRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmStateChangedRestDto)));
        }

        /// <summary>
        /// Get State Changed Alarms Requests all State Changed Alarms in the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>AlarmStateChangedsRestDto</returns>
        public AlarmStateChangedsRestDto GetStateChangedAlarms (string expand = null, int? page = null, int? size = null)
        {
             ApiResponse<AlarmStateChangedsRestDto> localVarResponse = GetStateChangedAlarmsWithHttpInfo(expand, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get State Changed Alarms Requests all State Changed Alarms in the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>ApiResponse of AlarmStateChangedsRestDto</returns>
        public ApiResponse< AlarmStateChangedsRestDto > GetStateChangedAlarmsWithHttpInfo (string expand = null, int? page = null, int? size = null)
        {

            var localVarPath = "/alarms/stateChanged";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStateChangedAlarms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmStateChangedsRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmStateChangedsRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmStateChangedsRestDto)));
        }

        /// <summary>
        /// Get State Changed Alarms Requests all State Changed Alarms in the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of AlarmStateChangedsRestDto</returns>
        public async System.Threading.Tasks.Task<AlarmStateChangedsRestDto> GetStateChangedAlarmsAsync (string expand = null, int? page = null, int? size = null)
        {
             ApiResponse<AlarmStateChangedsRestDto> localVarResponse = await GetStateChangedAlarmsAsyncWithHttpInfo(expand, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get State Changed Alarms Requests all State Changed Alarms in the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Provides information on which tracks are associated with the alarm.&lt;br&gt;Value: [tracks] (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (AlarmStateChangedsRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlarmStateChangedsRestDto>> GetStateChangedAlarmsAsyncWithHttpInfo (string expand = null, int? page = null, int? size = null)
        {

            var localVarPath = "/alarms/stateChanged";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStateChangedAlarms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmStateChangedsRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmStateChangedsRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmStateChangedsRestDto)));
        }

        /// <summary>
        /// Add the track to the specified Alarm This adds the requested track to the Alarm.&lt;br&gt;If the track is already associated with the alarm no change is made and the request is accepted. (Note that if the track doesn&#x27;t exist in the system then a &#x27;Resource not found status&#x27; is returned.)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="trackId">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns></returns>
        public void PostAddTrack (int? id, string trackId)
        {
             PostAddTrackWithHttpInfo(id, trackId);
        }

        /// <summary>
        /// Add the track to the specified Alarm This adds the requested track to the Alarm.&lt;br&gt;If the track is already associated with the alarm no change is made and the request is accepted. (Note that if the track doesn&#x27;t exist in the system then a &#x27;Resource not found status&#x27; is returned.)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="trackId">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostAddTrackWithHttpInfo (int? id, string trackId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->PostAddTrack");
            // verify the required parameter 'trackId' is set
            if (trackId == null)
                throw new ApiException(400, "Missing required parameter 'trackId' when calling DefaultApi->PostAddTrack");

            var localVarPath = "/alarms/{id}/tracks/add/{trackId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (trackId != null) localVarPathParams.Add("trackId", this.Configuration.ApiClient.ParameterToString(trackId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAddTrack", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add the track to the specified Alarm This adds the requested track to the Alarm.&lt;br&gt;If the track is already associated with the alarm no change is made and the request is accepted. (Note that if the track doesn&#x27;t exist in the system then a &#x27;Resource not found status&#x27; is returned.)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="trackId">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAddTrackAsync (int? id, string trackId)
        {
             await PostAddTrackAsyncWithHttpInfo(id, trackId);

        }

        /// <summary>
        /// Add the track to the specified Alarm This adds the requested track to the Alarm.&lt;br&gt;If the track is already associated with the alarm no change is made and the request is accepted. (Note that if the track doesn&#x27;t exist in the system then a &#x27;Resource not found status&#x27; is returned.)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="trackId">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostAddTrackAsyncWithHttpInfo (int? id, string trackId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->PostAddTrack");
            // verify the required parameter 'trackId' is set
            if (trackId == null)
                throw new ApiException(400, "Missing required parameter 'trackId' when calling DefaultApi->PostAddTrack");

            var localVarPath = "/alarms/{id}/tracks/add/{trackId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (trackId != null) localVarPathParams.Add("trackId", this.Configuration.ApiClient.ParameterToString(trackId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAddTrack", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create an Anchor Watch Alarm Create an Anchor Watch Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of this parameter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to create an Anchor Watch Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <returns>AlarmIdRestDto</returns>
        public AlarmIdRestDto PostAnchorWatchAlarm (AlarmAnchorWatchInputRestDto body)
        {
             ApiResponse<AlarmIdRestDto> localVarResponse = PostAnchorWatchAlarmWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Anchor Watch Alarm Create an Anchor Watch Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of this parameter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to create an Anchor Watch Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <returns>ApiResponse of AlarmIdRestDto</returns>
        public ApiResponse< AlarmIdRestDto > PostAnchorWatchAlarmWithHttpInfo (AlarmAnchorWatchInputRestDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PostAnchorWatchAlarm");

            var localVarPath = "/alarms/anchorWatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAnchorWatchAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmIdRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmIdRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmIdRestDto)));
        }

        /// <summary>
        /// Create an Anchor Watch Alarm Create an Anchor Watch Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of this parameter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to create an Anchor Watch Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <returns>Task of AlarmIdRestDto</returns>
        public async System.Threading.Tasks.Task<AlarmIdRestDto> PostAnchorWatchAlarmAsync (AlarmAnchorWatchInputRestDto body)
        {
             ApiResponse<AlarmIdRestDto> localVarResponse = await PostAnchorWatchAlarmAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an Anchor Watch Alarm Create an Anchor Watch Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of this parameter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to create an Anchor Watch Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <returns>Task of ApiResponse (AlarmIdRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlarmIdRestDto>> PostAnchorWatchAlarmAsyncWithHttpInfo (AlarmAnchorWatchInputRestDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PostAnchorWatchAlarm");

            var localVarPath = "/alarms/anchorWatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAnchorWatchAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmIdRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmIdRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmIdRestDto)));
        }

        /// <summary>
        /// Create a CPA Alarm Create a CPA Alarm with the supplied parameters.&lt;br&gt;Any combination of tracks within the given parameters will trigger the alarm (seen as an alert).&lt;br&gt;See the \&quot;Parameters\&quot; section for details of these parameters.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to create a CPA Alarm.&lt;br&gt;Note that both distance and time are required.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500,&lt;br&gt;  &quot;time&quot;: 300&lt;br&gt;}</param>
        /// <returns>AlarmIdRestDto</returns>
        public AlarmIdRestDto PostCpaAlarm (AlarmCpaInputRestDto body)
        {
             ApiResponse<AlarmIdRestDto> localVarResponse = PostCpaAlarmWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a CPA Alarm Create a CPA Alarm with the supplied parameters.&lt;br&gt;Any combination of tracks within the given parameters will trigger the alarm (seen as an alert).&lt;br&gt;See the \&quot;Parameters\&quot; section for details of these parameters.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to create a CPA Alarm.&lt;br&gt;Note that both distance and time are required.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500,&lt;br&gt;  &quot;time&quot;: 300&lt;br&gt;}</param>
        /// <returns>ApiResponse of AlarmIdRestDto</returns>
        public ApiResponse< AlarmIdRestDto > PostCpaAlarmWithHttpInfo (AlarmCpaInputRestDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PostCpaAlarm");

            var localVarPath = "/alarms/cpa";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCpaAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmIdRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmIdRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmIdRestDto)));
        }

        /// <summary>
        /// Create a CPA Alarm Create a CPA Alarm with the supplied parameters.&lt;br&gt;Any combination of tracks within the given parameters will trigger the alarm (seen as an alert).&lt;br&gt;See the \&quot;Parameters\&quot; section for details of these parameters.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to create a CPA Alarm.&lt;br&gt;Note that both distance and time are required.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500,&lt;br&gt;  &quot;time&quot;: 300&lt;br&gt;}</param>
        /// <returns>Task of AlarmIdRestDto</returns>
        public async System.Threading.Tasks.Task<AlarmIdRestDto> PostCpaAlarmAsync (AlarmCpaInputRestDto body)
        {
             ApiResponse<AlarmIdRestDto> localVarResponse = await PostCpaAlarmAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a CPA Alarm Create a CPA Alarm with the supplied parameters.&lt;br&gt;Any combination of tracks within the given parameters will trigger the alarm (seen as an alert).&lt;br&gt;See the \&quot;Parameters\&quot; section for details of these parameters.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to create a CPA Alarm.&lt;br&gt;Note that both distance and time are required.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500,&lt;br&gt;  &quot;time&quot;: 300&lt;br&gt;}</param>
        /// <returns>Task of ApiResponse (AlarmIdRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlarmIdRestDto>> PostCpaAlarmAsyncWithHttpInfo (AlarmCpaInputRestDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PostCpaAlarm");

            var localVarPath = "/alarms/cpa";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCpaAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmIdRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmIdRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmIdRestDto)));
        }

        /// <summary>
        /// Remove the track from the specified Alarm This removes the track from the Alarm.&lt;br&gt;If the track isn&#x27;t already associated with the alarm no change is made and the request is still accepted.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="trackId">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns></returns>
        public void PostDeleteTrack (int? id, string trackId)
        {
             PostDeleteTrackWithHttpInfo(id, trackId);
        }

        /// <summary>
        /// Remove the track from the specified Alarm This removes the track from the Alarm.&lt;br&gt;If the track isn&#x27;t already associated with the alarm no change is made and the request is still accepted.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="trackId">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostDeleteTrackWithHttpInfo (int? id, string trackId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->PostDeleteTrack");
            // verify the required parameter 'trackId' is set
            if (trackId == null)
                throw new ApiException(400, "Missing required parameter 'trackId' when calling DefaultApi->PostDeleteTrack");

            var localVarPath = "/alarms/{id}/tracks/delete/{trackId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (trackId != null) localVarPathParams.Add("trackId", this.Configuration.ApiClient.ParameterToString(trackId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDeleteTrack", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove the track from the specified Alarm This removes the track from the Alarm.&lt;br&gt;If the track isn&#x27;t already associated with the alarm no change is made and the request is still accepted.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="trackId">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostDeleteTrackAsync (int? id, string trackId)
        {
             await PostDeleteTrackAsyncWithHttpInfo(id, trackId);

        }

        /// <summary>
        /// Remove the track from the specified Alarm This removes the track from the Alarm.&lt;br&gt;If the track isn&#x27;t already associated with the alarm no change is made and the request is still accepted.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the alarm id</param>
        /// <param name="trackId">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostDeleteTrackAsyncWithHttpInfo (int? id, string trackId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->PostDeleteTrack");
            // verify the required parameter 'trackId' is set
            if (trackId == null)
                throw new ApiException(400, "Missing required parameter 'trackId' when calling DefaultApi->PostDeleteTrack");

            var localVarPath = "/alarms/{id}/tracks/delete/{trackId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (trackId != null) localVarPathParams.Add("trackId", this.Configuration.ApiClient.ParameterToString(trackId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDeleteTrack", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create a Proximity Alarm Create a Proximity Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of this parameter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to create a Proximity Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <returns>AlarmIdRestDto</returns>
        public AlarmIdRestDto PostProximityAlarm (AlarmProximityInputRestDto body)
        {
             ApiResponse<AlarmIdRestDto> localVarResponse = PostProximityAlarmWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Proximity Alarm Create a Proximity Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of this parameter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to create a Proximity Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <returns>ApiResponse of AlarmIdRestDto</returns>
        public ApiResponse< AlarmIdRestDto > PostProximityAlarmWithHttpInfo (AlarmProximityInputRestDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PostProximityAlarm");

            var localVarPath = "/alarms/proximity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostProximityAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmIdRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmIdRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmIdRestDto)));
        }

        /// <summary>
        /// Create a Proximity Alarm Create a Proximity Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of this parameter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to create a Proximity Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <returns>Task of AlarmIdRestDto</returns>
        public async System.Threading.Tasks.Task<AlarmIdRestDto> PostProximityAlarmAsync (AlarmProximityInputRestDto body)
        {
             ApiResponse<AlarmIdRestDto> localVarResponse = await PostProximityAlarmAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Proximity Alarm Create a Proximity Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of this parameter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to create a Proximity Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <returns>Task of ApiResponse (AlarmIdRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlarmIdRestDto>> PostProximityAlarmAsyncWithHttpInfo (AlarmProximityInputRestDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PostProximityAlarm");

            var localVarPath = "/alarms/proximity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostProximityAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmIdRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmIdRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmIdRestDto)));
        }

        /// <summary>
        /// Create a Shallow Depth Alarm Create a Shallow Depth Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of this parameter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to create a Shallow Depth Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <returns>AlarmIdRestDto</returns>
        public AlarmIdRestDto PostShallowDepthAlarm (AlarmShallowDepthInputRestDto body)
        {
             ApiResponse<AlarmIdRestDto> localVarResponse = PostShallowDepthAlarmWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Shallow Depth Alarm Create a Shallow Depth Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of this parameter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to create a Shallow Depth Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <returns>ApiResponse of AlarmIdRestDto</returns>
        public ApiResponse< AlarmIdRestDto > PostShallowDepthAlarmWithHttpInfo (AlarmShallowDepthInputRestDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PostShallowDepthAlarm");

            var localVarPath = "/alarms/shallowDepth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostShallowDepthAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmIdRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmIdRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmIdRestDto)));
        }

        /// <summary>
        /// Create a Shallow Depth Alarm Create a Shallow Depth Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of this parameter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to create a Shallow Depth Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <returns>Task of AlarmIdRestDto</returns>
        public async System.Threading.Tasks.Task<AlarmIdRestDto> PostShallowDepthAlarmAsync (AlarmShallowDepthInputRestDto body)
        {
             ApiResponse<AlarmIdRestDto> localVarResponse = await PostShallowDepthAlarmAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Shallow Depth Alarm Create a Shallow Depth Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of this parameter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to create a Shallow Depth Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <returns>Task of ApiResponse (AlarmIdRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlarmIdRestDto>> PostShallowDepthAlarmAsyncWithHttpInfo (AlarmShallowDepthInputRestDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PostShallowDepthAlarm");

            var localVarPath = "/alarms/shallowDepth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostShallowDepthAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmIdRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmIdRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmIdRestDto)));
        }

        /// <summary>
        /// Create a State Changed Alarm Create a State Changed Alarm to detect if the state of the specified track(s) have changed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AlarmIdRestDto</returns>
        public AlarmIdRestDto PostStateChangedAlarm ()
        {
             ApiResponse<AlarmIdRestDto> localVarResponse = PostStateChangedAlarmWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a State Changed Alarm Create a State Changed Alarm to detect if the state of the specified track(s) have changed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AlarmIdRestDto</returns>
        public ApiResponse< AlarmIdRestDto > PostStateChangedAlarmWithHttpInfo ()
        {

            var localVarPath = "/alarms/stateChanged";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostStateChangedAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmIdRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmIdRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmIdRestDto)));
        }

        /// <summary>
        /// Create a State Changed Alarm Create a State Changed Alarm to detect if the state of the specified track(s) have changed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AlarmIdRestDto</returns>
        public async System.Threading.Tasks.Task<AlarmIdRestDto> PostStateChangedAlarmAsync ()
        {
             ApiResponse<AlarmIdRestDto> localVarResponse = await PostStateChangedAlarmAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a State Changed Alarm Create a State Changed Alarm to detect if the state of the specified track(s) have changed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AlarmIdRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlarmIdRestDto>> PostStateChangedAlarmAsyncWithHttpInfo ()
        {

            var localVarPath = "/alarms/stateChanged";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostStateChangedAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlarmIdRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlarmIdRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlarmIdRestDto)));
        }

        /// <summary>
        /// Update an Anchor Watch Alarm Update an Anchor Watch Alarm with the supplied parameter.&lt;br&gt;See the \&quot;Parameters\&quot; section for detail of this parameter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update an Anchor Watch Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns></returns>
        public void PutAnchorWatchAlarm (AlarmAnchorWatchInputRestDto body, int? id)
        {
             PutAnchorWatchAlarmWithHttpInfo(body, id);
        }

        /// <summary>
        /// Update an Anchor Watch Alarm Update an Anchor Watch Alarm with the supplied parameter.&lt;br&gt;See the \&quot;Parameters\&quot; section for detail of this parameter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update an Anchor Watch Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutAnchorWatchAlarmWithHttpInfo (AlarmAnchorWatchInputRestDto body, int? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PutAnchorWatchAlarm");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->PutAnchorWatchAlarm");

            var localVarPath = "/alarms/anchorWatch/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAnchorWatchAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update an Anchor Watch Alarm Update an Anchor Watch Alarm with the supplied parameter.&lt;br&gt;See the \&quot;Parameters\&quot; section for detail of this parameter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update an Anchor Watch Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutAnchorWatchAlarmAsync (AlarmAnchorWatchInputRestDto body, int? id)
        {
             await PutAnchorWatchAlarmAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Update an Anchor Watch Alarm Update an Anchor Watch Alarm with the supplied parameter.&lt;br&gt;See the \&quot;Parameters\&quot; section for detail of this parameter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update an Anchor Watch Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutAnchorWatchAlarmAsyncWithHttpInfo (AlarmAnchorWatchInputRestDto body, int? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PutAnchorWatchAlarm");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->PutAnchorWatchAlarm");

            var localVarPath = "/alarms/anchorWatch/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAnchorWatchAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update a CPA Alarm Update a CPA Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of these parameters.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to update a CPA Alarm.&lt;br&gt;Note that both distance and time are required.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500,&lt;br&gt;  &quot;time&quot;: 300&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns></returns>
        public void PutCpaAlarm (AlarmCpaInputRestDto body, int? id)
        {
             PutCpaAlarmWithHttpInfo(body, id);
        }

        /// <summary>
        /// Update a CPA Alarm Update a CPA Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of these parameters.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to update a CPA Alarm.&lt;br&gt;Note that both distance and time are required.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500,&lt;br&gt;  &quot;time&quot;: 300&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutCpaAlarmWithHttpInfo (AlarmCpaInputRestDto body, int? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PutCpaAlarm");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->PutCpaAlarm");

            var localVarPath = "/alarms/cpa/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCpaAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update a CPA Alarm Update a CPA Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of these parameters.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to update a CPA Alarm.&lt;br&gt;Note that both distance and time are required.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500,&lt;br&gt;  &quot;time&quot;: 300&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutCpaAlarmAsync (AlarmCpaInputRestDto body, int? id)
        {
             await PutCpaAlarmAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Update a CPA Alarm Update a CPA Alarm with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details of these parameters.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to update a CPA Alarm.&lt;br&gt;Note that both distance and time are required.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500,&lt;br&gt;  &quot;time&quot;: 300&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutCpaAlarmAsyncWithHttpInfo (AlarmCpaInputRestDto body, int? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PutCpaAlarm");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->PutCpaAlarm");

            var localVarPath = "/alarms/cpa/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCpaAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update a Proximity Alarm Update a Proximity Alarm with the supplied parameter.&lt;br&gt;See the \&quot;Parameters\&quot; section for detail of this parameter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a Proximity Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns></returns>
        public void PutProximityAlarm (AlarmProximityInputRestDto body, int? id)
        {
             PutProximityAlarmWithHttpInfo(body, id);
        }

        /// <summary>
        /// Update a Proximity Alarm Update a Proximity Alarm with the supplied parameter.&lt;br&gt;See the \&quot;Parameters\&quot; section for detail of this parameter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a Proximity Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutProximityAlarmWithHttpInfo (AlarmProximityInputRestDto body, int? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PutProximityAlarm");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->PutProximityAlarm");

            var localVarPath = "/alarms/proximity/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutProximityAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update a Proximity Alarm Update a Proximity Alarm with the supplied parameter.&lt;br&gt;See the \&quot;Parameters\&quot; section for detail of this parameter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a Proximity Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutProximityAlarmAsync (AlarmProximityInputRestDto body, int? id)
        {
             await PutProximityAlarmAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Update a Proximity Alarm Update a Proximity Alarm with the supplied parameter.&lt;br&gt;See the \&quot;Parameters\&quot; section for detail of this parameter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a Proximity Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutProximityAlarmAsyncWithHttpInfo (AlarmProximityInputRestDto body, int? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PutProximityAlarm");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->PutProximityAlarm");

            var localVarPath = "/alarms/proximity/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutProximityAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update a Shallow Depth Alarm Update a Shallow Depth Alarm with the supplied parameter.&lt;br&gt;See the \&quot;Parameters\&quot; section for detail of this parameter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a Shallow Depth Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns></returns>
        public void PutShallowDepthAlarm (AlarmShallowDepthInputRestDto body, int? id)
        {
             PutShallowDepthAlarmWithHttpInfo(body, id);
        }

        /// <summary>
        /// Update a Shallow Depth Alarm Update a Shallow Depth Alarm with the supplied parameter.&lt;br&gt;See the \&quot;Parameters\&quot; section for detail of this parameter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a Shallow Depth Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutShallowDepthAlarmWithHttpInfo (AlarmShallowDepthInputRestDto body, int? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PutShallowDepthAlarm");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->PutShallowDepthAlarm");

            var localVarPath = "/alarms/shallowDepth/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutShallowDepthAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update a Shallow Depth Alarm Update a Shallow Depth Alarm with the supplied parameter.&lt;br&gt;See the \&quot;Parameters\&quot; section for detail of this parameter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a Shallow Depth Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutShallowDepthAlarmAsync (AlarmShallowDepthInputRestDto body, int? id)
        {
             await PutShallowDepthAlarmAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Update a Shallow Depth Alarm Update a Shallow Depth Alarm with the supplied parameter.&lt;br&gt;See the \&quot;Parameters\&quot; section for detail of this parameter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a Shallow Depth Alarm.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;distance&quot;: 500&lt;br&gt;}</param>
        /// <param name="id">the alarm id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutShallowDepthAlarmAsyncWithHttpInfo (AlarmShallowDepthInputRestDto body, int? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PutShallowDepthAlarm");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->PutShallowDepthAlarm");

            var localVarPath = "/alarms/shallowDepth/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutShallowDepthAlarm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
