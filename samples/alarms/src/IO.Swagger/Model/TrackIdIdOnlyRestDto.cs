/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Container for a track ID and its links
    /// </summary>
    [DataContract]
        public partial class TrackIdIdOnlyRestDto :  IEquatable<TrackIdIdOnlyRestDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackIdIdOnlyRestDto" /> class.
        /// </summary>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI..</param>
        /// <param name="links">*method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria.</param>
        public TrackIdIdOnlyRestDto(string id = default(string), List<Link> links = default(List<Link>))
        {
            this.Id = id;
            this.Links = links;
        }
        
        /// <summary>
        /// the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.
        /// </summary>
        /// <value>the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// *method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria
        /// </summary>
        /// <value>*method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria</value>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrackIdIdOnlyRestDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrackIdIdOnlyRestDto);
        }

        /// <summary>
        /// Returns true if TrackIdIdOnlyRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of TrackIdIdOnlyRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrackIdIdOnlyRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
