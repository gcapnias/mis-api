/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a Graphic
        /// </summary>
        /// <remarks>
        /// Create a Graphic with the supplied parameters.&lt;br&gt;&lt;br&gt;When this request is made it will immediately respond with the graphic ID allocated and a pending state of pending creation.&lt;br&gt;Please note the following:&lt;br&gt;&amp;nbsp;&amp;nbsp;The RP Manager will not accept duplicate graphics (same shape and processing type). (This is one of the reasons for failure.)&lt;br&gt;&amp;nbsp;&amp;nbsp;To check on the status use follow-up GET requests (use the &#x27;single&#x27; GET and not the &#x27;multi&#x27; GET) to detect whether this request is fully accepted or not (timed-out and considered failed). Only the &#x27;single&#x27; GET will return a pending/failed create request. The graphic ID returned is made available to support this. &lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. &lt;br&gt;See the \&quot;Parameters\&quot; section for details of what to provide.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to create a Graphic.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{&lt;br&gt;&amp;nbsp;&quot;graphicProcessingType&quot;: &quot;ACQUISITION_WINDOW&quot;,&lt;br&gt;&amp;nbsp;&quot;circle&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&quot;center&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;latitude&quot;: 33.754257,&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;longitude&quot;: -118.216557&lt;br&gt;&amp;nbsp;&amp;nbsp; },&lt;br&gt;&amp;nbsp;&amp;nbsp; &quot;radius&quot;: 100&lt;br&gt;&amp;nbsp;}&lt;br&gt;}</param>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <returns>HttpEntityGraphicRestDto</returns>
        HttpEntityGraphicRestDto CreateGraphic (GraphicCreateInRestDto body, int? unitNumber);

        /// <summary>
        /// Create a Graphic
        /// </summary>
        /// <remarks>
        /// Create a Graphic with the supplied parameters.&lt;br&gt;&lt;br&gt;When this request is made it will immediately respond with the graphic ID allocated and a pending state of pending creation.&lt;br&gt;Please note the following:&lt;br&gt;&amp;nbsp;&amp;nbsp;The RP Manager will not accept duplicate graphics (same shape and processing type). (This is one of the reasons for failure.)&lt;br&gt;&amp;nbsp;&amp;nbsp;To check on the status use follow-up GET requests (use the &#x27;single&#x27; GET and not the &#x27;multi&#x27; GET) to detect whether this request is fully accepted or not (timed-out and considered failed). Only the &#x27;single&#x27; GET will return a pending/failed create request. The graphic ID returned is made available to support this. &lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. &lt;br&gt;See the \&quot;Parameters\&quot; section for details of what to provide.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to create a Graphic.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{&lt;br&gt;&amp;nbsp;&quot;graphicProcessingType&quot;: &quot;ACQUISITION_WINDOW&quot;,&lt;br&gt;&amp;nbsp;&quot;circle&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&quot;center&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;latitude&quot;: 33.754257,&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;longitude&quot;: -118.216557&lt;br&gt;&amp;nbsp;&amp;nbsp; },&lt;br&gt;&amp;nbsp;&amp;nbsp; &quot;radius&quot;: 100&lt;br&gt;&amp;nbsp;}&lt;br&gt;}</param>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <returns>ApiResponse of HttpEntityGraphicRestDto</returns>
        ApiResponse<HttpEntityGraphicRestDto> CreateGraphicWithHttpInfo (GraphicCreateInRestDto body, int? unitNumber);
        /// <summary>
        /// Delete graphic
        /// </summary>
        /// <remarks>
        /// Deletes a graphic at the given unit with the given id. Deletes are shown as &#x27;pending&#x27; until they are deleted by the RP Manager. Deletion can fail.&lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="graphicId">the graphic ID</param>
        /// <returns></returns>
        void DeleteGraphic (int? unitNumber, int? graphicId);

        /// <summary>
        /// Delete graphic
        /// </summary>
        /// <remarks>
        /// Deletes a graphic at the given unit with the given id. Deletes are shown as &#x27;pending&#x27; until they are deleted by the RP Manager. Deletion can fail.&lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="graphicId">the graphic ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGraphicWithHttpInfo (int? unitNumber, int? graphicId);
        /// <summary>
        /// Get Graphic
        /// </summary>
        /// <remarks>
        /// Request a specific Graphic by Unit Number and Graphic ID.&lt;br&gt;&lt;br&gt; This API (the &#x27;single&#x27; GET) is the only API which will show the pending status of a pending-create (as performed via POST) graphic. (And like the &#x27;multi&#x27; GET, it will show the data accepted at the RP and not that requested by MIS.) &lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="graphicId">the graphic ID</param>
        /// <returns>GraphicRestDto</returns>
        GraphicRestDto GetGraphic (int? unitNumber, int? graphicId);

        /// <summary>
        /// Get Graphic
        /// </summary>
        /// <remarks>
        /// Request a specific Graphic by Unit Number and Graphic ID.&lt;br&gt;&lt;br&gt; This API (the &#x27;single&#x27; GET) is the only API which will show the pending status of a pending-create (as performed via POST) graphic. (And like the &#x27;multi&#x27; GET, it will show the data accepted at the RP and not that requested by MIS.) &lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="graphicId">the graphic ID</param>
        /// <returns>ApiResponse of GraphicRestDto</returns>
        ApiResponse<GraphicRestDto> GetGraphicWithHttpInfo (int? unitNumber, int? graphicId);
        /// <summary>
        /// Get Graphics for the Unit
        /// </summary>
        /// <remarks>
        /// Get all Graphics matching the criteria for the specific Radar (Tracker). &lt;/br&gt;&lt;/br&gt; Note that only that which is accepted and known by the RP Manager is shown; no pending-create graphics are shown, and for pending-update the newest data is not shown, and pending-deletes are shown because they are not yet considered deleted. &lt;/br&gt;&lt;/br&gt; It is recommended to use the &#x27;GET /graphics/{unitNumber}/{graphicId} instead of this API to monitor the status of any pending graphic.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="updateSince">Returns graphics that have been updated since (greater than) a specific time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00.050Z specifies a year-month-day followed by 24-hour hours:minutes:seconds.milliseconds in GMT time&lt;br&gt;&lt;br&gt;Note that to support usability the pagination query is ignored with this argument; all matched items will be returned.&lt;/br&gt;&lt;/br&gt;While this will show updated graphics, it will not show when graphics are deleted. (optional)</param>
        /// <param name="graphicProcessingType">How tracks within this region are acquired or processed. Can search for one of the following: TRACK_LAND_MASK, IMAGE_LAND_MASK, ACQUISITION_WINDOW, GUARD_ALARM, THRESHOLD_BIAS_MAP, SPECIAL1, SPECIAL2, ACQUISITION_AIS, ACQUISITION_IFF, ACQUISITION_RESERVED_1, ACQUISITION_RESERVED_2, DEAD_RECKONING, MANEUVERING_SENSITIVITY (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>GraphicsRestDto</returns>
        GraphicsRestDto GetGraphicsForUnit (int? unitNumber, string updateSince = null, string graphicProcessingType = null, int? page = null, int? size = null);

        /// <summary>
        /// Get Graphics for the Unit
        /// </summary>
        /// <remarks>
        /// Get all Graphics matching the criteria for the specific Radar (Tracker). &lt;/br&gt;&lt;/br&gt; Note that only that which is accepted and known by the RP Manager is shown; no pending-create graphics are shown, and for pending-update the newest data is not shown, and pending-deletes are shown because they are not yet considered deleted. &lt;/br&gt;&lt;/br&gt; It is recommended to use the &#x27;GET /graphics/{unitNumber}/{graphicId} instead of this API to monitor the status of any pending graphic.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="updateSince">Returns graphics that have been updated since (greater than) a specific time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00.050Z specifies a year-month-day followed by 24-hour hours:minutes:seconds.milliseconds in GMT time&lt;br&gt;&lt;br&gt;Note that to support usability the pagination query is ignored with this argument; all matched items will be returned.&lt;/br&gt;&lt;/br&gt;While this will show updated graphics, it will not show when graphics are deleted. (optional)</param>
        /// <param name="graphicProcessingType">How tracks within this region are acquired or processed. Can search for one of the following: TRACK_LAND_MASK, IMAGE_LAND_MASK, ACQUISITION_WINDOW, GUARD_ALARM, THRESHOLD_BIAS_MAP, SPECIAL1, SPECIAL2, ACQUISITION_AIS, ACQUISITION_IFF, ACQUISITION_RESERVED_1, ACQUISITION_RESERVED_2, DEAD_RECKONING, MANEUVERING_SENSITIVITY (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>ApiResponse of GraphicsRestDto</returns>
        ApiResponse<GraphicsRestDto> GetGraphicsForUnitWithHttpInfo (int? unitNumber, string updateSince = null, string graphicProcessingType = null, int? page = null, int? size = null);
        /// <summary>
        /// Update a Graphic
        /// </summary>
        /// <remarks>
        /// Update a Graphic with the supplied parameters.&lt;br&gt;&lt;br&gt;When this request is made it will immediately respond with a pending state of pending update.&lt;br&gt;&lt;br&gt;Please note the following:&lt;br&gt;&amp;nbsp;&amp;nbsp;A PUT is not allowed if the graphic is waiting (pending) on any operation.&lt;br&gt;&amp;nbsp;&amp;nbsp;Attempting to change the type of graphic shape will fail (eg, can&#x27;t change from circle to polygon).&lt;br&gt;&amp;nbsp;&amp;nbsp;The RP Manager will not accept duplicate graphics (same shape and processing type). (This is one of the reasons for failure.)&lt;br&gt;&amp;nbsp;&amp;nbsp;To check on the status use follow-up GET requests to detect whether this request is fully accepted or not (timed-out and considered failed). &lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. &lt;br&gt;See the \&quot;Parameters\&quot; section for details of what to provide.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to update a Graphic.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{&lt;br&gt;&amp;nbsp;&quot;circle&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&quot;center&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;latitude&quot;: 33.754257,&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;longitude&quot;: -118.216557&lt;br&gt;&amp;nbsp;&amp;nbsp; },&lt;br&gt;&amp;nbsp;&amp;nbsp; &quot;radius&quot;: 100&lt;br&gt;&amp;nbsp;}&lt;br&gt;}</param>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="graphicId">the graphic ID</param>
        /// <returns></returns>
        void UpdateGraphic (GraphicUpdateInRestDto body, int? unitNumber, int? graphicId);

        /// <summary>
        /// Update a Graphic
        /// </summary>
        /// <remarks>
        /// Update a Graphic with the supplied parameters.&lt;br&gt;&lt;br&gt;When this request is made it will immediately respond with a pending state of pending update.&lt;br&gt;&lt;br&gt;Please note the following:&lt;br&gt;&amp;nbsp;&amp;nbsp;A PUT is not allowed if the graphic is waiting (pending) on any operation.&lt;br&gt;&amp;nbsp;&amp;nbsp;Attempting to change the type of graphic shape will fail (eg, can&#x27;t change from circle to polygon).&lt;br&gt;&amp;nbsp;&amp;nbsp;The RP Manager will not accept duplicate graphics (same shape and processing type). (This is one of the reasons for failure.)&lt;br&gt;&amp;nbsp;&amp;nbsp;To check on the status use follow-up GET requests to detect whether this request is fully accepted or not (timed-out and considered failed). &lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. &lt;br&gt;See the \&quot;Parameters\&quot; section for details of what to provide.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to update a Graphic.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{&lt;br&gt;&amp;nbsp;&quot;circle&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&quot;center&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;latitude&quot;: 33.754257,&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;longitude&quot;: -118.216557&lt;br&gt;&amp;nbsp;&amp;nbsp; },&lt;br&gt;&amp;nbsp;&amp;nbsp; &quot;radius&quot;: 100&lt;br&gt;&amp;nbsp;}&lt;br&gt;}</param>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="graphicId">the graphic ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateGraphicWithHttpInfo (GraphicUpdateInRestDto body, int? unitNumber, int? graphicId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a Graphic
        /// </summary>
        /// <remarks>
        /// Create a Graphic with the supplied parameters.&lt;br&gt;&lt;br&gt;When this request is made it will immediately respond with the graphic ID allocated and a pending state of pending creation.&lt;br&gt;Please note the following:&lt;br&gt;&amp;nbsp;&amp;nbsp;The RP Manager will not accept duplicate graphics (same shape and processing type). (This is one of the reasons for failure.)&lt;br&gt;&amp;nbsp;&amp;nbsp;To check on the status use follow-up GET requests (use the &#x27;single&#x27; GET and not the &#x27;multi&#x27; GET) to detect whether this request is fully accepted or not (timed-out and considered failed). Only the &#x27;single&#x27; GET will return a pending/failed create request. The graphic ID returned is made available to support this. &lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. &lt;br&gt;See the \&quot;Parameters\&quot; section for details of what to provide.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to create a Graphic.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{&lt;br&gt;&amp;nbsp;&quot;graphicProcessingType&quot;: &quot;ACQUISITION_WINDOW&quot;,&lt;br&gt;&amp;nbsp;&quot;circle&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&quot;center&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;latitude&quot;: 33.754257,&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;longitude&quot;: -118.216557&lt;br&gt;&amp;nbsp;&amp;nbsp; },&lt;br&gt;&amp;nbsp;&amp;nbsp; &quot;radius&quot;: 100&lt;br&gt;&amp;nbsp;}&lt;br&gt;}</param>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <returns>Task of HttpEntityGraphicRestDto</returns>
        System.Threading.Tasks.Task<HttpEntityGraphicRestDto> CreateGraphicAsync (GraphicCreateInRestDto body, int? unitNumber);

        /// <summary>
        /// Create a Graphic
        /// </summary>
        /// <remarks>
        /// Create a Graphic with the supplied parameters.&lt;br&gt;&lt;br&gt;When this request is made it will immediately respond with the graphic ID allocated and a pending state of pending creation.&lt;br&gt;Please note the following:&lt;br&gt;&amp;nbsp;&amp;nbsp;The RP Manager will not accept duplicate graphics (same shape and processing type). (This is one of the reasons for failure.)&lt;br&gt;&amp;nbsp;&amp;nbsp;To check on the status use follow-up GET requests (use the &#x27;single&#x27; GET and not the &#x27;multi&#x27; GET) to detect whether this request is fully accepted or not (timed-out and considered failed). Only the &#x27;single&#x27; GET will return a pending/failed create request. The graphic ID returned is made available to support this. &lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. &lt;br&gt;See the \&quot;Parameters\&quot; section for details of what to provide.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to create a Graphic.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{&lt;br&gt;&amp;nbsp;&quot;graphicProcessingType&quot;: &quot;ACQUISITION_WINDOW&quot;,&lt;br&gt;&amp;nbsp;&quot;circle&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&quot;center&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;latitude&quot;: 33.754257,&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;longitude&quot;: -118.216557&lt;br&gt;&amp;nbsp;&amp;nbsp; },&lt;br&gt;&amp;nbsp;&amp;nbsp; &quot;radius&quot;: 100&lt;br&gt;&amp;nbsp;}&lt;br&gt;}</param>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <returns>Task of ApiResponse (HttpEntityGraphicRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<HttpEntityGraphicRestDto>> CreateGraphicAsyncWithHttpInfo (GraphicCreateInRestDto body, int? unitNumber);
        /// <summary>
        /// Delete graphic
        /// </summary>
        /// <remarks>
        /// Deletes a graphic at the given unit with the given id. Deletes are shown as &#x27;pending&#x27; until they are deleted by the RP Manager. Deletion can fail.&lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="graphicId">the graphic ID</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGraphicAsync (int? unitNumber, int? graphicId);

        /// <summary>
        /// Delete graphic
        /// </summary>
        /// <remarks>
        /// Deletes a graphic at the given unit with the given id. Deletes are shown as &#x27;pending&#x27; until they are deleted by the RP Manager. Deletion can fail.&lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="graphicId">the graphic ID</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGraphicAsyncWithHttpInfo (int? unitNumber, int? graphicId);
        /// <summary>
        /// Get Graphic
        /// </summary>
        /// <remarks>
        /// Request a specific Graphic by Unit Number and Graphic ID.&lt;br&gt;&lt;br&gt; This API (the &#x27;single&#x27; GET) is the only API which will show the pending status of a pending-create (as performed via POST) graphic. (And like the &#x27;multi&#x27; GET, it will show the data accepted at the RP and not that requested by MIS.) &lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="graphicId">the graphic ID</param>
        /// <returns>Task of GraphicRestDto</returns>
        System.Threading.Tasks.Task<GraphicRestDto> GetGraphicAsync (int? unitNumber, int? graphicId);

        /// <summary>
        /// Get Graphic
        /// </summary>
        /// <remarks>
        /// Request a specific Graphic by Unit Number and Graphic ID.&lt;br&gt;&lt;br&gt; This API (the &#x27;single&#x27; GET) is the only API which will show the pending status of a pending-create (as performed via POST) graphic. (And like the &#x27;multi&#x27; GET, it will show the data accepted at the RP and not that requested by MIS.) &lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="graphicId">the graphic ID</param>
        /// <returns>Task of ApiResponse (GraphicRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<GraphicRestDto>> GetGraphicAsyncWithHttpInfo (int? unitNumber, int? graphicId);
        /// <summary>
        /// Get Graphics for the Unit
        /// </summary>
        /// <remarks>
        /// Get all Graphics matching the criteria for the specific Radar (Tracker). &lt;/br&gt;&lt;/br&gt; Note that only that which is accepted and known by the RP Manager is shown; no pending-create graphics are shown, and for pending-update the newest data is not shown, and pending-deletes are shown because they are not yet considered deleted. &lt;/br&gt;&lt;/br&gt; It is recommended to use the &#x27;GET /graphics/{unitNumber}/{graphicId} instead of this API to monitor the status of any pending graphic.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="updateSince">Returns graphics that have been updated since (greater than) a specific time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00.050Z specifies a year-month-day followed by 24-hour hours:minutes:seconds.milliseconds in GMT time&lt;br&gt;&lt;br&gt;Note that to support usability the pagination query is ignored with this argument; all matched items will be returned.&lt;/br&gt;&lt;/br&gt;While this will show updated graphics, it will not show when graphics are deleted. (optional)</param>
        /// <param name="graphicProcessingType">How tracks within this region are acquired or processed. Can search for one of the following: TRACK_LAND_MASK, IMAGE_LAND_MASK, ACQUISITION_WINDOW, GUARD_ALARM, THRESHOLD_BIAS_MAP, SPECIAL1, SPECIAL2, ACQUISITION_AIS, ACQUISITION_IFF, ACQUISITION_RESERVED_1, ACQUISITION_RESERVED_2, DEAD_RECKONING, MANEUVERING_SENSITIVITY (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of GraphicsRestDto</returns>
        System.Threading.Tasks.Task<GraphicsRestDto> GetGraphicsForUnitAsync (int? unitNumber, string updateSince = null, string graphicProcessingType = null, int? page = null, int? size = null);

        /// <summary>
        /// Get Graphics for the Unit
        /// </summary>
        /// <remarks>
        /// Get all Graphics matching the criteria for the specific Radar (Tracker). &lt;/br&gt;&lt;/br&gt; Note that only that which is accepted and known by the RP Manager is shown; no pending-create graphics are shown, and for pending-update the newest data is not shown, and pending-deletes are shown because they are not yet considered deleted. &lt;/br&gt;&lt;/br&gt; It is recommended to use the &#x27;GET /graphics/{unitNumber}/{graphicId} instead of this API to monitor the status of any pending graphic.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="updateSince">Returns graphics that have been updated since (greater than) a specific time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00.050Z specifies a year-month-day followed by 24-hour hours:minutes:seconds.milliseconds in GMT time&lt;br&gt;&lt;br&gt;Note that to support usability the pagination query is ignored with this argument; all matched items will be returned.&lt;/br&gt;&lt;/br&gt;While this will show updated graphics, it will not show when graphics are deleted. (optional)</param>
        /// <param name="graphicProcessingType">How tracks within this region are acquired or processed. Can search for one of the following: TRACK_LAND_MASK, IMAGE_LAND_MASK, ACQUISITION_WINDOW, GUARD_ALARM, THRESHOLD_BIAS_MAP, SPECIAL1, SPECIAL2, ACQUISITION_AIS, ACQUISITION_IFF, ACQUISITION_RESERVED_1, ACQUISITION_RESERVED_2, DEAD_RECKONING, MANEUVERING_SENSITIVITY (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (GraphicsRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<GraphicsRestDto>> GetGraphicsForUnitAsyncWithHttpInfo (int? unitNumber, string updateSince = null, string graphicProcessingType = null, int? page = null, int? size = null);
        /// <summary>
        /// Update a Graphic
        /// </summary>
        /// <remarks>
        /// Update a Graphic with the supplied parameters.&lt;br&gt;&lt;br&gt;When this request is made it will immediately respond with a pending state of pending update.&lt;br&gt;&lt;br&gt;Please note the following:&lt;br&gt;&amp;nbsp;&amp;nbsp;A PUT is not allowed if the graphic is waiting (pending) on any operation.&lt;br&gt;&amp;nbsp;&amp;nbsp;Attempting to change the type of graphic shape will fail (eg, can&#x27;t change from circle to polygon).&lt;br&gt;&amp;nbsp;&amp;nbsp;The RP Manager will not accept duplicate graphics (same shape and processing type). (This is one of the reasons for failure.)&lt;br&gt;&amp;nbsp;&amp;nbsp;To check on the status use follow-up GET requests to detect whether this request is fully accepted or not (timed-out and considered failed). &lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. &lt;br&gt;See the \&quot;Parameters\&quot; section for details of what to provide.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to update a Graphic.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{&lt;br&gt;&amp;nbsp;&quot;circle&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&quot;center&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;latitude&quot;: 33.754257,&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;longitude&quot;: -118.216557&lt;br&gt;&amp;nbsp;&amp;nbsp; },&lt;br&gt;&amp;nbsp;&amp;nbsp; &quot;radius&quot;: 100&lt;br&gt;&amp;nbsp;}&lt;br&gt;}</param>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="graphicId">the graphic ID</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateGraphicAsync (GraphicUpdateInRestDto body, int? unitNumber, int? graphicId);

        /// <summary>
        /// Update a Graphic
        /// </summary>
        /// <remarks>
        /// Update a Graphic with the supplied parameters.&lt;br&gt;&lt;br&gt;When this request is made it will immediately respond with a pending state of pending update.&lt;br&gt;&lt;br&gt;Please note the following:&lt;br&gt;&amp;nbsp;&amp;nbsp;A PUT is not allowed if the graphic is waiting (pending) on any operation.&lt;br&gt;&amp;nbsp;&amp;nbsp;Attempting to change the type of graphic shape will fail (eg, can&#x27;t change from circle to polygon).&lt;br&gt;&amp;nbsp;&amp;nbsp;The RP Manager will not accept duplicate graphics (same shape and processing type). (This is one of the reasons for failure.)&lt;br&gt;&amp;nbsp;&amp;nbsp;To check on the status use follow-up GET requests to detect whether this request is fully accepted or not (timed-out and considered failed). &lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. &lt;br&gt;See the \&quot;Parameters\&quot; section for details of what to provide.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to update a Graphic.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{&lt;br&gt;&amp;nbsp;&quot;circle&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&quot;center&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;latitude&quot;: 33.754257,&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;longitude&quot;: -118.216557&lt;br&gt;&amp;nbsp;&amp;nbsp; },&lt;br&gt;&amp;nbsp;&amp;nbsp; &quot;radius&quot;: 100&lt;br&gt;&amp;nbsp;}&lt;br&gt;}</param>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="graphicId">the graphic ID</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateGraphicAsyncWithHttpInfo (GraphicUpdateInRestDto body, int? unitNumber, int? graphicId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a Graphic Create a Graphic with the supplied parameters.&lt;br&gt;&lt;br&gt;When this request is made it will immediately respond with the graphic ID allocated and a pending state of pending creation.&lt;br&gt;Please note the following:&lt;br&gt;&amp;nbsp;&amp;nbsp;The RP Manager will not accept duplicate graphics (same shape and processing type). (This is one of the reasons for failure.)&lt;br&gt;&amp;nbsp;&amp;nbsp;To check on the status use follow-up GET requests (use the &#x27;single&#x27; GET and not the &#x27;multi&#x27; GET) to detect whether this request is fully accepted or not (timed-out and considered failed). Only the &#x27;single&#x27; GET will return a pending/failed create request. The graphic ID returned is made available to support this. &lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. &lt;br&gt;See the \&quot;Parameters\&quot; section for details of what to provide.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to create a Graphic.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{&lt;br&gt;&amp;nbsp;&quot;graphicProcessingType&quot;: &quot;ACQUISITION_WINDOW&quot;,&lt;br&gt;&amp;nbsp;&quot;circle&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&quot;center&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;latitude&quot;: 33.754257,&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;longitude&quot;: -118.216557&lt;br&gt;&amp;nbsp;&amp;nbsp; },&lt;br&gt;&amp;nbsp;&amp;nbsp; &quot;radius&quot;: 100&lt;br&gt;&amp;nbsp;}&lt;br&gt;}</param>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <returns>HttpEntityGraphicRestDto</returns>
        public HttpEntityGraphicRestDto CreateGraphic (GraphicCreateInRestDto body, int? unitNumber)
        {
             ApiResponse<HttpEntityGraphicRestDto> localVarResponse = CreateGraphicWithHttpInfo(body, unitNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Graphic Create a Graphic with the supplied parameters.&lt;br&gt;&lt;br&gt;When this request is made it will immediately respond with the graphic ID allocated and a pending state of pending creation.&lt;br&gt;Please note the following:&lt;br&gt;&amp;nbsp;&amp;nbsp;The RP Manager will not accept duplicate graphics (same shape and processing type). (This is one of the reasons for failure.)&lt;br&gt;&amp;nbsp;&amp;nbsp;To check on the status use follow-up GET requests (use the &#x27;single&#x27; GET and not the &#x27;multi&#x27; GET) to detect whether this request is fully accepted or not (timed-out and considered failed). Only the &#x27;single&#x27; GET will return a pending/failed create request. The graphic ID returned is made available to support this. &lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. &lt;br&gt;See the \&quot;Parameters\&quot; section for details of what to provide.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to create a Graphic.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{&lt;br&gt;&amp;nbsp;&quot;graphicProcessingType&quot;: &quot;ACQUISITION_WINDOW&quot;,&lt;br&gt;&amp;nbsp;&quot;circle&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&quot;center&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;latitude&quot;: 33.754257,&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;longitude&quot;: -118.216557&lt;br&gt;&amp;nbsp;&amp;nbsp; },&lt;br&gt;&amp;nbsp;&amp;nbsp; &quot;radius&quot;: 100&lt;br&gt;&amp;nbsp;}&lt;br&gt;}</param>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <returns>ApiResponse of HttpEntityGraphicRestDto</returns>
        public ApiResponse< HttpEntityGraphicRestDto > CreateGraphicWithHttpInfo (GraphicCreateInRestDto body, int? unitNumber)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CreateGraphic");
            // verify the required parameter 'unitNumber' is set
            if (unitNumber == null)
                throw new ApiException(400, "Missing required parameter 'unitNumber' when calling DefaultApi->CreateGraphic");

            var localVarPath = "/graphics/{unitNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unitNumber != null) localVarPathParams.Add("unitNumber", this.Configuration.ApiClient.ParameterToString(unitNumber)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGraphic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HttpEntityGraphicRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HttpEntityGraphicRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HttpEntityGraphicRestDto)));
        }

        /// <summary>
        /// Create a Graphic Create a Graphic with the supplied parameters.&lt;br&gt;&lt;br&gt;When this request is made it will immediately respond with the graphic ID allocated and a pending state of pending creation.&lt;br&gt;Please note the following:&lt;br&gt;&amp;nbsp;&amp;nbsp;The RP Manager will not accept duplicate graphics (same shape and processing type). (This is one of the reasons for failure.)&lt;br&gt;&amp;nbsp;&amp;nbsp;To check on the status use follow-up GET requests (use the &#x27;single&#x27; GET and not the &#x27;multi&#x27; GET) to detect whether this request is fully accepted or not (timed-out and considered failed). Only the &#x27;single&#x27; GET will return a pending/failed create request. The graphic ID returned is made available to support this. &lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. &lt;br&gt;See the \&quot;Parameters\&quot; section for details of what to provide.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to create a Graphic.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{&lt;br&gt;&amp;nbsp;&quot;graphicProcessingType&quot;: &quot;ACQUISITION_WINDOW&quot;,&lt;br&gt;&amp;nbsp;&quot;circle&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&quot;center&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;latitude&quot;: 33.754257,&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;longitude&quot;: -118.216557&lt;br&gt;&amp;nbsp;&amp;nbsp; },&lt;br&gt;&amp;nbsp;&amp;nbsp; &quot;radius&quot;: 100&lt;br&gt;&amp;nbsp;}&lt;br&gt;}</param>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <returns>Task of HttpEntityGraphicRestDto</returns>
        public async System.Threading.Tasks.Task<HttpEntityGraphicRestDto> CreateGraphicAsync (GraphicCreateInRestDto body, int? unitNumber)
        {
             ApiResponse<HttpEntityGraphicRestDto> localVarResponse = await CreateGraphicAsyncWithHttpInfo(body, unitNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Graphic Create a Graphic with the supplied parameters.&lt;br&gt;&lt;br&gt;When this request is made it will immediately respond with the graphic ID allocated and a pending state of pending creation.&lt;br&gt;Please note the following:&lt;br&gt;&amp;nbsp;&amp;nbsp;The RP Manager will not accept duplicate graphics (same shape and processing type). (This is one of the reasons for failure.)&lt;br&gt;&amp;nbsp;&amp;nbsp;To check on the status use follow-up GET requests (use the &#x27;single&#x27; GET and not the &#x27;multi&#x27; GET) to detect whether this request is fully accepted or not (timed-out and considered failed). Only the &#x27;single&#x27; GET will return a pending/failed create request. The graphic ID returned is made available to support this. &lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. &lt;br&gt;See the \&quot;Parameters\&quot; section for details of what to provide.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to create a Graphic.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{&lt;br&gt;&amp;nbsp;&quot;graphicProcessingType&quot;: &quot;ACQUISITION_WINDOW&quot;,&lt;br&gt;&amp;nbsp;&quot;circle&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&quot;center&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;latitude&quot;: 33.754257,&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;longitude&quot;: -118.216557&lt;br&gt;&amp;nbsp;&amp;nbsp; },&lt;br&gt;&amp;nbsp;&amp;nbsp; &quot;radius&quot;: 100&lt;br&gt;&amp;nbsp;}&lt;br&gt;}</param>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <returns>Task of ApiResponse (HttpEntityGraphicRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HttpEntityGraphicRestDto>> CreateGraphicAsyncWithHttpInfo (GraphicCreateInRestDto body, int? unitNumber)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CreateGraphic");
            // verify the required parameter 'unitNumber' is set
            if (unitNumber == null)
                throw new ApiException(400, "Missing required parameter 'unitNumber' when calling DefaultApi->CreateGraphic");

            var localVarPath = "/graphics/{unitNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unitNumber != null) localVarPathParams.Add("unitNumber", this.Configuration.ApiClient.ParameterToString(unitNumber)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGraphic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HttpEntityGraphicRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (HttpEntityGraphicRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HttpEntityGraphicRestDto)));
        }

        /// <summary>
        /// Delete graphic Deletes a graphic at the given unit with the given id. Deletes are shown as &#x27;pending&#x27; until they are deleted by the RP Manager. Deletion can fail.&lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="graphicId">the graphic ID</param>
        /// <returns></returns>
        public void DeleteGraphic (int? unitNumber, int? graphicId)
        {
             DeleteGraphicWithHttpInfo(unitNumber, graphicId);
        }

        /// <summary>
        /// Delete graphic Deletes a graphic at the given unit with the given id. Deletes are shown as &#x27;pending&#x27; until they are deleted by the RP Manager. Deletion can fail.&lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="graphicId">the graphic ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteGraphicWithHttpInfo (int? unitNumber, int? graphicId)
        {
            // verify the required parameter 'unitNumber' is set
            if (unitNumber == null)
                throw new ApiException(400, "Missing required parameter 'unitNumber' when calling DefaultApi->DeleteGraphic");
            // verify the required parameter 'graphicId' is set
            if (graphicId == null)
                throw new ApiException(400, "Missing required parameter 'graphicId' when calling DefaultApi->DeleteGraphic");

            var localVarPath = "/graphics/{unitNumber}/{graphicId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unitNumber != null) localVarPathParams.Add("unitNumber", this.Configuration.ApiClient.ParameterToString(unitNumber)); // path parameter
            if (graphicId != null) localVarPathParams.Add("graphicId", this.Configuration.ApiClient.ParameterToString(graphicId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGraphic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete graphic Deletes a graphic at the given unit with the given id. Deletes are shown as &#x27;pending&#x27; until they are deleted by the RP Manager. Deletion can fail.&lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="graphicId">the graphic ID</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGraphicAsync (int? unitNumber, int? graphicId)
        {
             await DeleteGraphicAsyncWithHttpInfo(unitNumber, graphicId);

        }

        /// <summary>
        /// Delete graphic Deletes a graphic at the given unit with the given id. Deletes are shown as &#x27;pending&#x27; until they are deleted by the RP Manager. Deletion can fail.&lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="graphicId">the graphic ID</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGraphicAsyncWithHttpInfo (int? unitNumber, int? graphicId)
        {
            // verify the required parameter 'unitNumber' is set
            if (unitNumber == null)
                throw new ApiException(400, "Missing required parameter 'unitNumber' when calling DefaultApi->DeleteGraphic");
            // verify the required parameter 'graphicId' is set
            if (graphicId == null)
                throw new ApiException(400, "Missing required parameter 'graphicId' when calling DefaultApi->DeleteGraphic");

            var localVarPath = "/graphics/{unitNumber}/{graphicId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unitNumber != null) localVarPathParams.Add("unitNumber", this.Configuration.ApiClient.ParameterToString(unitNumber)); // path parameter
            if (graphicId != null) localVarPathParams.Add("graphicId", this.Configuration.ApiClient.ParameterToString(graphicId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGraphic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Graphic Request a specific Graphic by Unit Number and Graphic ID.&lt;br&gt;&lt;br&gt; This API (the &#x27;single&#x27; GET) is the only API which will show the pending status of a pending-create (as performed via POST) graphic. (And like the &#x27;multi&#x27; GET, it will show the data accepted at the RP and not that requested by MIS.) &lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="graphicId">the graphic ID</param>
        /// <returns>GraphicRestDto</returns>
        public GraphicRestDto GetGraphic (int? unitNumber, int? graphicId)
        {
             ApiResponse<GraphicRestDto> localVarResponse = GetGraphicWithHttpInfo(unitNumber, graphicId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Graphic Request a specific Graphic by Unit Number and Graphic ID.&lt;br&gt;&lt;br&gt; This API (the &#x27;single&#x27; GET) is the only API which will show the pending status of a pending-create (as performed via POST) graphic. (And like the &#x27;multi&#x27; GET, it will show the data accepted at the RP and not that requested by MIS.) &lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="graphicId">the graphic ID</param>
        /// <returns>ApiResponse of GraphicRestDto</returns>
        public ApiResponse< GraphicRestDto > GetGraphicWithHttpInfo (int? unitNumber, int? graphicId)
        {
            // verify the required parameter 'unitNumber' is set
            if (unitNumber == null)
                throw new ApiException(400, "Missing required parameter 'unitNumber' when calling DefaultApi->GetGraphic");
            // verify the required parameter 'graphicId' is set
            if (graphicId == null)
                throw new ApiException(400, "Missing required parameter 'graphicId' when calling DefaultApi->GetGraphic");

            var localVarPath = "/graphics/{unitNumber}/{graphicId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unitNumber != null) localVarPathParams.Add("unitNumber", this.Configuration.ApiClient.ParameterToString(unitNumber)); // path parameter
            if (graphicId != null) localVarPathParams.Add("graphicId", this.Configuration.ApiClient.ParameterToString(graphicId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGraphic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GraphicRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GraphicRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GraphicRestDto)));
        }

        /// <summary>
        /// Get Graphic Request a specific Graphic by Unit Number and Graphic ID.&lt;br&gt;&lt;br&gt; This API (the &#x27;single&#x27; GET) is the only API which will show the pending status of a pending-create (as performed via POST) graphic. (And like the &#x27;multi&#x27; GET, it will show the data accepted at the RP and not that requested by MIS.) &lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="graphicId">the graphic ID</param>
        /// <returns>Task of GraphicRestDto</returns>
        public async System.Threading.Tasks.Task<GraphicRestDto> GetGraphicAsync (int? unitNumber, int? graphicId)
        {
             ApiResponse<GraphicRestDto> localVarResponse = await GetGraphicAsyncWithHttpInfo(unitNumber, graphicId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Graphic Request a specific Graphic by Unit Number and Graphic ID.&lt;br&gt;&lt;br&gt; This API (the &#x27;single&#x27; GET) is the only API which will show the pending status of a pending-create (as performed via POST) graphic. (And like the &#x27;multi&#x27; GET, it will show the data accepted at the RP and not that requested by MIS.) &lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="graphicId">the graphic ID</param>
        /// <returns>Task of ApiResponse (GraphicRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GraphicRestDto>> GetGraphicAsyncWithHttpInfo (int? unitNumber, int? graphicId)
        {
            // verify the required parameter 'unitNumber' is set
            if (unitNumber == null)
                throw new ApiException(400, "Missing required parameter 'unitNumber' when calling DefaultApi->GetGraphic");
            // verify the required parameter 'graphicId' is set
            if (graphicId == null)
                throw new ApiException(400, "Missing required parameter 'graphicId' when calling DefaultApi->GetGraphic");

            var localVarPath = "/graphics/{unitNumber}/{graphicId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unitNumber != null) localVarPathParams.Add("unitNumber", this.Configuration.ApiClient.ParameterToString(unitNumber)); // path parameter
            if (graphicId != null) localVarPathParams.Add("graphicId", this.Configuration.ApiClient.ParameterToString(graphicId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGraphic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GraphicRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GraphicRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GraphicRestDto)));
        }

        /// <summary>
        /// Get Graphics for the Unit Get all Graphics matching the criteria for the specific Radar (Tracker). &lt;/br&gt;&lt;/br&gt; Note that only that which is accepted and known by the RP Manager is shown; no pending-create graphics are shown, and for pending-update the newest data is not shown, and pending-deletes are shown because they are not yet considered deleted. &lt;/br&gt;&lt;/br&gt; It is recommended to use the &#x27;GET /graphics/{unitNumber}/{graphicId} instead of this API to monitor the status of any pending graphic.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="updateSince">Returns graphics that have been updated since (greater than) a specific time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00.050Z specifies a year-month-day followed by 24-hour hours:minutes:seconds.milliseconds in GMT time&lt;br&gt;&lt;br&gt;Note that to support usability the pagination query is ignored with this argument; all matched items will be returned.&lt;/br&gt;&lt;/br&gt;While this will show updated graphics, it will not show when graphics are deleted. (optional)</param>
        /// <param name="graphicProcessingType">How tracks within this region are acquired or processed. Can search for one of the following: TRACK_LAND_MASK, IMAGE_LAND_MASK, ACQUISITION_WINDOW, GUARD_ALARM, THRESHOLD_BIAS_MAP, SPECIAL1, SPECIAL2, ACQUISITION_AIS, ACQUISITION_IFF, ACQUISITION_RESERVED_1, ACQUISITION_RESERVED_2, DEAD_RECKONING, MANEUVERING_SENSITIVITY (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>GraphicsRestDto</returns>
        public GraphicsRestDto GetGraphicsForUnit (int? unitNumber, string updateSince = null, string graphicProcessingType = null, int? page = null, int? size = null)
        {
             ApiResponse<GraphicsRestDto> localVarResponse = GetGraphicsForUnitWithHttpInfo(unitNumber, updateSince, graphicProcessingType, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Graphics for the Unit Get all Graphics matching the criteria for the specific Radar (Tracker). &lt;/br&gt;&lt;/br&gt; Note that only that which is accepted and known by the RP Manager is shown; no pending-create graphics are shown, and for pending-update the newest data is not shown, and pending-deletes are shown because they are not yet considered deleted. &lt;/br&gt;&lt;/br&gt; It is recommended to use the &#x27;GET /graphics/{unitNumber}/{graphicId} instead of this API to monitor the status of any pending graphic.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="updateSince">Returns graphics that have been updated since (greater than) a specific time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00.050Z specifies a year-month-day followed by 24-hour hours:minutes:seconds.milliseconds in GMT time&lt;br&gt;&lt;br&gt;Note that to support usability the pagination query is ignored with this argument; all matched items will be returned.&lt;/br&gt;&lt;/br&gt;While this will show updated graphics, it will not show when graphics are deleted. (optional)</param>
        /// <param name="graphicProcessingType">How tracks within this region are acquired or processed. Can search for one of the following: TRACK_LAND_MASK, IMAGE_LAND_MASK, ACQUISITION_WINDOW, GUARD_ALARM, THRESHOLD_BIAS_MAP, SPECIAL1, SPECIAL2, ACQUISITION_AIS, ACQUISITION_IFF, ACQUISITION_RESERVED_1, ACQUISITION_RESERVED_2, DEAD_RECKONING, MANEUVERING_SENSITIVITY (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>ApiResponse of GraphicsRestDto</returns>
        public ApiResponse< GraphicsRestDto > GetGraphicsForUnitWithHttpInfo (int? unitNumber, string updateSince = null, string graphicProcessingType = null, int? page = null, int? size = null)
        {
            // verify the required parameter 'unitNumber' is set
            if (unitNumber == null)
                throw new ApiException(400, "Missing required parameter 'unitNumber' when calling DefaultApi->GetGraphicsForUnit");

            var localVarPath = "/graphics/{unitNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unitNumber != null) localVarPathParams.Add("unitNumber", this.Configuration.ApiClient.ParameterToString(unitNumber)); // path parameter
            if (updateSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateSince", updateSince)); // query parameter
            if (graphicProcessingType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "graphicProcessingType", graphicProcessingType)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGraphicsForUnit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GraphicsRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GraphicsRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GraphicsRestDto)));
        }

        /// <summary>
        /// Get Graphics for the Unit Get all Graphics matching the criteria for the specific Radar (Tracker). &lt;/br&gt;&lt;/br&gt; Note that only that which is accepted and known by the RP Manager is shown; no pending-create graphics are shown, and for pending-update the newest data is not shown, and pending-deletes are shown because they are not yet considered deleted. &lt;/br&gt;&lt;/br&gt; It is recommended to use the &#x27;GET /graphics/{unitNumber}/{graphicId} instead of this API to monitor the status of any pending graphic.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="updateSince">Returns graphics that have been updated since (greater than) a specific time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00.050Z specifies a year-month-day followed by 24-hour hours:minutes:seconds.milliseconds in GMT time&lt;br&gt;&lt;br&gt;Note that to support usability the pagination query is ignored with this argument; all matched items will be returned.&lt;/br&gt;&lt;/br&gt;While this will show updated graphics, it will not show when graphics are deleted. (optional)</param>
        /// <param name="graphicProcessingType">How tracks within this region are acquired or processed. Can search for one of the following: TRACK_LAND_MASK, IMAGE_LAND_MASK, ACQUISITION_WINDOW, GUARD_ALARM, THRESHOLD_BIAS_MAP, SPECIAL1, SPECIAL2, ACQUISITION_AIS, ACQUISITION_IFF, ACQUISITION_RESERVED_1, ACQUISITION_RESERVED_2, DEAD_RECKONING, MANEUVERING_SENSITIVITY (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of GraphicsRestDto</returns>
        public async System.Threading.Tasks.Task<GraphicsRestDto> GetGraphicsForUnitAsync (int? unitNumber, string updateSince = null, string graphicProcessingType = null, int? page = null, int? size = null)
        {
             ApiResponse<GraphicsRestDto> localVarResponse = await GetGraphicsForUnitAsyncWithHttpInfo(unitNumber, updateSince, graphicProcessingType, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Graphics for the Unit Get all Graphics matching the criteria for the specific Radar (Tracker). &lt;/br&gt;&lt;/br&gt; Note that only that which is accepted and known by the RP Manager is shown; no pending-create graphics are shown, and for pending-update the newest data is not shown, and pending-deletes are shown because they are not yet considered deleted. &lt;/br&gt;&lt;/br&gt; It is recommended to use the &#x27;GET /graphics/{unitNumber}/{graphicId} instead of this API to monitor the status of any pending graphic.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="updateSince">Returns graphics that have been updated since (greater than) a specific time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00.050Z specifies a year-month-day followed by 24-hour hours:minutes:seconds.milliseconds in GMT time&lt;br&gt;&lt;br&gt;Note that to support usability the pagination query is ignored with this argument; all matched items will be returned.&lt;/br&gt;&lt;/br&gt;While this will show updated graphics, it will not show when graphics are deleted. (optional)</param>
        /// <param name="graphicProcessingType">How tracks within this region are acquired or processed. Can search for one of the following: TRACK_LAND_MASK, IMAGE_LAND_MASK, ACQUISITION_WINDOW, GUARD_ALARM, THRESHOLD_BIAS_MAP, SPECIAL1, SPECIAL2, ACQUISITION_AIS, ACQUISITION_IFF, ACQUISITION_RESERVED_1, ACQUISITION_RESERVED_2, DEAD_RECKONING, MANEUVERING_SENSITIVITY (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (GraphicsRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GraphicsRestDto>> GetGraphicsForUnitAsyncWithHttpInfo (int? unitNumber, string updateSince = null, string graphicProcessingType = null, int? page = null, int? size = null)
        {
            // verify the required parameter 'unitNumber' is set
            if (unitNumber == null)
                throw new ApiException(400, "Missing required parameter 'unitNumber' when calling DefaultApi->GetGraphicsForUnit");

            var localVarPath = "/graphics/{unitNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unitNumber != null) localVarPathParams.Add("unitNumber", this.Configuration.ApiClient.ParameterToString(unitNumber)); // path parameter
            if (updateSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateSince", updateSince)); // query parameter
            if (graphicProcessingType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "graphicProcessingType", graphicProcessingType)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGraphicsForUnit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GraphicsRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GraphicsRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GraphicsRestDto)));
        }

        /// <summary>
        /// Update a Graphic Update a Graphic with the supplied parameters.&lt;br&gt;&lt;br&gt;When this request is made it will immediately respond with a pending state of pending update.&lt;br&gt;&lt;br&gt;Please note the following:&lt;br&gt;&amp;nbsp;&amp;nbsp;A PUT is not allowed if the graphic is waiting (pending) on any operation.&lt;br&gt;&amp;nbsp;&amp;nbsp;Attempting to change the type of graphic shape will fail (eg, can&#x27;t change from circle to polygon).&lt;br&gt;&amp;nbsp;&amp;nbsp;The RP Manager will not accept duplicate graphics (same shape and processing type). (This is one of the reasons for failure.)&lt;br&gt;&amp;nbsp;&amp;nbsp;To check on the status use follow-up GET requests to detect whether this request is fully accepted or not (timed-out and considered failed). &lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. &lt;br&gt;See the \&quot;Parameters\&quot; section for details of what to provide.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to update a Graphic.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{&lt;br&gt;&amp;nbsp;&quot;circle&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&quot;center&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;latitude&quot;: 33.754257,&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;longitude&quot;: -118.216557&lt;br&gt;&amp;nbsp;&amp;nbsp; },&lt;br&gt;&amp;nbsp;&amp;nbsp; &quot;radius&quot;: 100&lt;br&gt;&amp;nbsp;}&lt;br&gt;}</param>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="graphicId">the graphic ID</param>
        /// <returns></returns>
        public void UpdateGraphic (GraphicUpdateInRestDto body, int? unitNumber, int? graphicId)
        {
             UpdateGraphicWithHttpInfo(body, unitNumber, graphicId);
        }

        /// <summary>
        /// Update a Graphic Update a Graphic with the supplied parameters.&lt;br&gt;&lt;br&gt;When this request is made it will immediately respond with a pending state of pending update.&lt;br&gt;&lt;br&gt;Please note the following:&lt;br&gt;&amp;nbsp;&amp;nbsp;A PUT is not allowed if the graphic is waiting (pending) on any operation.&lt;br&gt;&amp;nbsp;&amp;nbsp;Attempting to change the type of graphic shape will fail (eg, can&#x27;t change from circle to polygon).&lt;br&gt;&amp;nbsp;&amp;nbsp;The RP Manager will not accept duplicate graphics (same shape and processing type). (This is one of the reasons for failure.)&lt;br&gt;&amp;nbsp;&amp;nbsp;To check on the status use follow-up GET requests to detect whether this request is fully accepted or not (timed-out and considered failed). &lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. &lt;br&gt;See the \&quot;Parameters\&quot; section for details of what to provide.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to update a Graphic.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{&lt;br&gt;&amp;nbsp;&quot;circle&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&quot;center&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;latitude&quot;: 33.754257,&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;longitude&quot;: -118.216557&lt;br&gt;&amp;nbsp;&amp;nbsp; },&lt;br&gt;&amp;nbsp;&amp;nbsp; &quot;radius&quot;: 100&lt;br&gt;&amp;nbsp;}&lt;br&gt;}</param>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="graphicId">the graphic ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateGraphicWithHttpInfo (GraphicUpdateInRestDto body, int? unitNumber, int? graphicId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UpdateGraphic");
            // verify the required parameter 'unitNumber' is set
            if (unitNumber == null)
                throw new ApiException(400, "Missing required parameter 'unitNumber' when calling DefaultApi->UpdateGraphic");
            // verify the required parameter 'graphicId' is set
            if (graphicId == null)
                throw new ApiException(400, "Missing required parameter 'graphicId' when calling DefaultApi->UpdateGraphic");

            var localVarPath = "/graphics/{unitNumber}/{graphicId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unitNumber != null) localVarPathParams.Add("unitNumber", this.Configuration.ApiClient.ParameterToString(unitNumber)); // path parameter
            if (graphicId != null) localVarPathParams.Add("graphicId", this.Configuration.ApiClient.ParameterToString(graphicId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGraphic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update a Graphic Update a Graphic with the supplied parameters.&lt;br&gt;&lt;br&gt;When this request is made it will immediately respond with a pending state of pending update.&lt;br&gt;&lt;br&gt;Please note the following:&lt;br&gt;&amp;nbsp;&amp;nbsp;A PUT is not allowed if the graphic is waiting (pending) on any operation.&lt;br&gt;&amp;nbsp;&amp;nbsp;Attempting to change the type of graphic shape will fail (eg, can&#x27;t change from circle to polygon).&lt;br&gt;&amp;nbsp;&amp;nbsp;The RP Manager will not accept duplicate graphics (same shape and processing type). (This is one of the reasons for failure.)&lt;br&gt;&amp;nbsp;&amp;nbsp;To check on the status use follow-up GET requests to detect whether this request is fully accepted or not (timed-out and considered failed). &lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. &lt;br&gt;See the \&quot;Parameters\&quot; section for details of what to provide.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to update a Graphic.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{&lt;br&gt;&amp;nbsp;&quot;circle&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&quot;center&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;latitude&quot;: 33.754257,&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;longitude&quot;: -118.216557&lt;br&gt;&amp;nbsp;&amp;nbsp; },&lt;br&gt;&amp;nbsp;&amp;nbsp; &quot;radius&quot;: 100&lt;br&gt;&amp;nbsp;}&lt;br&gt;}</param>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="graphicId">the graphic ID</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateGraphicAsync (GraphicUpdateInRestDto body, int? unitNumber, int? graphicId)
        {
             await UpdateGraphicAsyncWithHttpInfo(body, unitNumber, graphicId);

        }

        /// <summary>
        /// Update a Graphic Update a Graphic with the supplied parameters.&lt;br&gt;&lt;br&gt;When this request is made it will immediately respond with a pending state of pending update.&lt;br&gt;&lt;br&gt;Please note the following:&lt;br&gt;&amp;nbsp;&amp;nbsp;A PUT is not allowed if the graphic is waiting (pending) on any operation.&lt;br&gt;&amp;nbsp;&amp;nbsp;Attempting to change the type of graphic shape will fail (eg, can&#x27;t change from circle to polygon).&lt;br&gt;&amp;nbsp;&amp;nbsp;The RP Manager will not accept duplicate graphics (same shape and processing type). (This is one of the reasons for failure.)&lt;br&gt;&amp;nbsp;&amp;nbsp;To check on the status use follow-up GET requests to detect whether this request is fully accepted or not (timed-out and considered failed). &lt;br&gt;&lt;br&gt; Note that if many graphic change requests (add/delete/update) are made close together in time then there will be a delay in the response from the Graphics server (RP Manager). &lt;br&gt;This results in a false timeout being reported by MIS. &lt;br&gt;And note that for this case the graphics will be accepted and will eventually be seen. &lt;br&gt;For example, if there are 40 adds done with each one spaced a few seconds apart, this will result in a false timeout but the graphics will eventually be seen. &lt;br&gt;This situation needs to be considered by clients to MIS. &lt;br&gt;See the \&quot;Parameters\&quot; section for details of what to provide.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to update a Graphic.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{&lt;br&gt;&amp;nbsp;&quot;circle&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&quot;center&quot;: {&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;latitude&quot;: 33.754257,&lt;br&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&quot;longitude&quot;: -118.216557&lt;br&gt;&amp;nbsp;&amp;nbsp; },&lt;br&gt;&amp;nbsp;&amp;nbsp; &quot;radius&quot;: 100&lt;br&gt;&amp;nbsp;}&lt;br&gt;}</param>
        /// <param name="unitNumber">the unit number (id) of the rp or tracker</param>
        /// <param name="graphicId">the graphic ID</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateGraphicAsyncWithHttpInfo (GraphicUpdateInRestDto body, int? unitNumber, int? graphicId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UpdateGraphic");
            // verify the required parameter 'unitNumber' is set
            if (unitNumber == null)
                throw new ApiException(400, "Missing required parameter 'unitNumber' when calling DefaultApi->UpdateGraphic");
            // verify the required parameter 'graphicId' is set
            if (graphicId == null)
                throw new ApiException(400, "Missing required parameter 'graphicId' when calling DefaultApi->UpdateGraphic");

            var localVarPath = "/graphics/{unitNumber}/{graphicId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unitNumber != null) localVarPathParams.Add("unitNumber", this.Configuration.ApiClient.ParameterToString(unitNumber)); // path parameter
            if (graphicId != null) localVarPathParams.Add("graphicId", this.Configuration.ApiClient.ParameterToString(graphicId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGraphic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
