/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        /// <summary>
        /// Test CreateGraphic
        /// </summary>
        [Test]
        public void CreateGraphicTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GraphicCreateInRestDto body = null;
            //int? unitNumber = null;
            //var response = instance.CreateGraphic(body, unitNumber);
            //Assert.IsInstanceOf<HttpEntityGraphicRestDto> (response, "response is HttpEntityGraphicRestDto");
        }
        /// <summary>
        /// Test DeleteGraphic
        /// </summary>
        [Test]
        public void DeleteGraphicTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? unitNumber = null;
            //int? graphicId = null;
            //instance.DeleteGraphic(unitNumber, graphicId);
            
        }
        /// <summary>
        /// Test GetGraphic
        /// </summary>
        [Test]
        public void GetGraphicTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? unitNumber = null;
            //int? graphicId = null;
            //var response = instance.GetGraphic(unitNumber, graphicId);
            //Assert.IsInstanceOf<GraphicRestDto> (response, "response is GraphicRestDto");
        }
        /// <summary>
        /// Test GetGraphicsForUnit
        /// </summary>
        [Test]
        public void GetGraphicsForUnitTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? unitNumber = null;
            //string updateSince = null;
            //string graphicProcessingType = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetGraphicsForUnit(unitNumber, updateSince, graphicProcessingType, page, size);
            //Assert.IsInstanceOf<GraphicsRestDto> (response, "response is GraphicsRestDto");
        }
        /// <summary>
        /// Test UpdateGraphic
        /// </summary>
        [Test]
        public void UpdateGraphicTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GraphicUpdateInRestDto body = null;
            //int? unitNumber = null;
            //int? graphicId = null;
            //instance.UpdateGraphic(body, unitNumber, graphicId);
            
        }
    }

}
