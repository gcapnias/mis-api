/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        /// <summary>
        /// Test DeleteTrack
        /// </summary>
        [Test]
        public void DeleteTrackTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DeleteTrack(id);
            
        }
        /// <summary>
        /// Test DeleteTracks
        /// </summary>
        [Test]
        public void DeleteTracksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.DeleteTracks();
            
        }
        /// <summary>
        /// Test GetCompositeTrackType
        /// </summary>
        [Test]
        public void GetCompositeTrackTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string expand = null;
            //var response = instance.GetCompositeTrackType(id, expand);
            //Assert.IsInstanceOf<TrackRestDto> (response, "response is TrackRestDto");
        }
        /// <summary>
        /// Test GetCompositeTrackTypes
        /// </summary>
        [Test]
        public void GetCompositeTrackTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string boundingRect = null;
            //string expand = null;
            //string name = null;
            //string sensorSrc = null;
            //string updateSince = null;
            //string updateSrc = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetCompositeTrackTypes(boundingRect, expand, name, sensorSrc, updateSince, updateSrc, page, size);
            //Assert.IsInstanceOf<TracksRestDto> (response, "response is TracksRestDto");
        }
        /// <summary>
        /// Test GetTrackDetail
        /// </summary>
        [Test]
        public void GetTrackDetailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetTrackDetail(id);
            //Assert.IsInstanceOf<TrackDetailRestDto> (response, "response is TrackDetailRestDto");
        }
        /// <summary>
        /// Test GetTrackIff
        /// </summary>
        [Test]
        public void GetTrackIffTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetTrackIff(id);
            //Assert.IsInstanceOf<TrackIffRestDto> (response, "response is TrackIffRestDto");
        }
        /// <summary>
        /// Test PostTrack
        /// </summary>
        [Test]
        public void PostTrackTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TrackPostParametersRestDto body = null;
            //instance.PostTrack(body);
            
        }
        /// <summary>
        /// Test UpdateTrackAffiliation
        /// </summary>
        [Test]
        public void UpdateTrackAffiliationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TrackAffiliationRestDto body = null;
            //string id = null;
            //instance.UpdateTrackAffiliation(body, id);
            
        }
        /// <summary>
        /// Test UpdateTrackBoarding
        /// </summary>
        [Test]
        public void UpdateTrackBoardingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TrackBoardingRestDto body = null;
            //string id = null;
            //instance.UpdateTrackBoarding(body, id);
            
        }
        /// <summary>
        /// Test UpdateTrackClassification
        /// </summary>
        [Test]
        public void UpdateTrackClassificationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TrackClassificationRestDto body = null;
            //string id = null;
            //instance.UpdateTrackClassification(body, id);
            
        }
        /// <summary>
        /// Test UpdateTrackKinematics
        /// </summary>
        [Test]
        public void UpdateTrackKinematicsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //KinematicsRestDto body = null;
            //string id = null;
            //instance.UpdateTrackKinematics(body, id);
            
        }
        /// <summary>
        /// Test UpdateTrackName
        /// </summary>
        [Test]
        public void UpdateTrackNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TrackNameRestDto body = null;
            //string id = null;
            //instance.UpdateTrackName(body, id);
            
        }
        /// <summary>
        /// Test UpdateTrackPosition
        /// </summary>
        [Test]
        public void UpdateTrackPositionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GeoPosRestDto body = null;
            //string id = null;
            //instance.UpdateTrackPosition(body, id);
            
        }
    }

}
