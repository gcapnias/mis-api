/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a Track
        /// </summary>
        /// <remarks>
        /// Deletes the specified track from the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns></returns>
        void DeleteTrack (string id);

        /// <summary>
        /// Delete a Track
        /// </summary>
        /// <remarks>
        /// Deletes the specified track from the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTrackWithHttpInfo (string id);
        /// <summary>
        /// Delete all Tracks from the System
        /// </summary>
        /// <remarks>
        /// Delete all tracks from the system; both those automatically acquired and manual.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteTracks ();

        /// <summary>
        /// Delete all Tracks from the System
        /// </summary>
        /// <remarks>
        /// Delete all tracks from the system; both those automatically acquired and manual.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTracksWithHttpInfo ();
        /// <summary>
        /// Get Track
        /// </summary>
        /// <remarks>
        /// Root representation of a specific track object; providing sufficient identification and kinematic information to represent the track object to the user. In addition to this data, it provides links to children and other associated objects, allowing one to gather all available information about a real-time track.&lt;br&gt;Please note:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;isSourceGtc (6/2021):&lt;br&gt;Added to indicate that the source of the /tracks endpoint data is from the GTC Tracker, not the Composite Tracker. (Availability of data on the /tracks endpoint is provided as a convenience to users of this endpoint. There is generally only one Tracker type running within the system so this data would not otherwise be available.) However, there are several implications of this: &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- the data fields are to be interpreted based on the GTC track field&#x27;s descriptions instead (eg, the &#x27;quality&#x27; field has a different range when the data is sourced by GTC), &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- and the track reporting interval follows the GTC track reporting interval. (See the GTC track field &#x27;maxDelayInterval&#x27; to see more information on this.)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <param name="expand">Allows links to be expanded inline.&lt;br&gt;Values: any combination of [detail, iff]&lt;br&gt;Example Value: detail,iff.&lt;br&gt;&lt;br&gt;Permissions Note: Users without RadarTracks permission may not ask for IFF data.&lt;br&gt; (optional)</param>
        /// <returns>TrackRestDto</returns>
        TrackRestDto GetCompositeTrackType (string id, string expand = null);

        /// <summary>
        /// Get Track
        /// </summary>
        /// <remarks>
        /// Root representation of a specific track object; providing sufficient identification and kinematic information to represent the track object to the user. In addition to this data, it provides links to children and other associated objects, allowing one to gather all available information about a real-time track.&lt;br&gt;Please note:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;isSourceGtc (6/2021):&lt;br&gt;Added to indicate that the source of the /tracks endpoint data is from the GTC Tracker, not the Composite Tracker. (Availability of data on the /tracks endpoint is provided as a convenience to users of this endpoint. There is generally only one Tracker type running within the system so this data would not otherwise be available.) However, there are several implications of this: &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- the data fields are to be interpreted based on the GTC track field&#x27;s descriptions instead (eg, the &#x27;quality&#x27; field has a different range when the data is sourced by GTC), &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- and the track reporting interval follows the GTC track reporting interval. (See the GTC track field &#x27;maxDelayInterval&#x27; to see more information on this.)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <param name="expand">Allows links to be expanded inline.&lt;br&gt;Values: any combination of [detail, iff]&lt;br&gt;Example Value: detail,iff.&lt;br&gt;&lt;br&gt;Permissions Note: Users without RadarTracks permission may not ask for IFF data.&lt;br&gt; (optional)</param>
        /// <returns>ApiResponse of TrackRestDto</returns>
        ApiResponse<TrackRestDto> GetCompositeTrackTypeWithHttpInfo (string id, string expand = null);
        /// <summary>
        /// Get Tracks
        /// </summary>
        /// <remarks>
        /// This is the primary means of searching the real-time tracks in the system. An array of tracks is returned, allowing a client to select the desired track for more detailed information.&lt;br&gt;&lt;br&gt;Please note that:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Multiple query types (see &#x27;Parameter&#x27;) can be applied,&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;isSourceGtc (6/2021):&lt;br&gt;Added to indicate that the source of the /tracks endpoint data is from the GTC Tracker, not the Composite Tracker. (Availability of data on the /tracks endpoint is provided as a convenience to users of this endpoint. There is generally only one Tracker type running within the system so this data would not otherwise be available.) However, there are several implications of this: &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- the data fields are to be interpreted based on the GTC track field&#x27;s descriptions instead (eg, the &#x27;quality&#x27; field has a different range when the data is sourced by GTC), &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- and the track reporting interval follows the GTC track reporting interval. (See the GTC track field &#x27;maxDelayInterval&#x27; to see more information on this.)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boundingRect">Filters tracks to a bounding rectangular region whose sides parallel the latitude and longitude axes.&lt;br&gt;(Decimal Degrees, North Positive / East Positive)&lt;/br&gt; Format is &amp;lt;upper lat&amp;gt;, &amp;lt;left lon&amp;gt;, &amp;lt;lower lat&amp;gt;, &amp;lt;right lon&amp;gt;&lt;br&gt;Example Value: 33.75,-118.50,33.25,-118.19 (optional)</param>
        /// <param name="expand">Allows links to be expanded inline.&lt;br&gt;Values: any combination of [detail, iff]&lt;br&gt;Example Value: detail,iff.&lt;br&gt;&lt;br&gt;Permissions Note: Users without RadarTracks permission may not ask for IFF data.&lt;br&gt; (optional)</param>
        /// <param name="name">Returns tracks that have a complete or partial name match. (optional)</param>
        /// <param name="sensorSrc">Returns tracks that have correlation with specific sensor type(s).&lt;br&gt;Values: Special combination of [Radar, AIS, IFF, DF, Generic, Video, Sonar, AIS-A, AIS-B, Air]&lt;br&gt;Note that &#x27;AIS&#x27; is a convenience for including both AIS Class A and AIS Class B tracks.&lt;br&gt;Several different operations are accepted:&lt;br&gt;- --Provide a single Sensor,&lt;br&gt;- --Provide &#x27;AND&#x27; or &#x27;OR&#x27; to require all of (AND) or one of (OR) sensors to be present in the track,&lt;br&gt;   (requires multiple sensors as arguments),&lt;br&gt;- --Provide &#x27;NOT&#x27; to exclude tracks having the sensor(s) present,&lt;br&gt;- --Provide &#x27;ONLY&#x27; to include tracks which match the given sensor.&lt;br&gt;   (requres a single sensor as argument),&lt;br&gt;Example 1: &#x27;Radar&#x27; returns Radar correlated tracks.&lt;br&gt;Example 2: &#x27;AND(Radar,AIS)&#x27; returns tracks correlated with both Radar AND any combo of AIS-A or AIS-B.&lt;br&gt;Example 3: &#x27;OR(Radar,AIS)&#x27; returns tracks correlated with Radar OR AIS-A OR AIS-B.&lt;br&gt;Example 4: &#x27;ONLY(AIS)&#x27; returns tracks correlated ONLY WITH AIS (any combo of AIS-A or AIS-B).&lt;br&gt;Example 5: &#x27;NOT(Radar,AIS)&#x27; returns tracks NOT correlated with Radar or AIS-A or AIS-B.&lt;br&gt;&lt;br&gt;Permissions Note: Users without RadarTracks permission will have all Radar-only tracks and radar data filtered out.&lt;br&gt; (optional)</param>
        /// <param name="updateSince">Returns tracks that have been updated since (greater than) a specific time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00Z specifies a year-month-day followed by 24-hour hours:minutes:seconds in GMT time&lt;br&gt;&lt;br&gt;Note that to support usability the pagination query is ignored with this argument; all matched items will be returned. (optional)</param>
        /// <param name="updateSrc">Returns tracks that have been updated with a specific sensor.&lt;br&gt;Value: [RP&amp;lt;unit_num&amp;gt;, AIS, GEN&amp;lt;unit_num&amp;gt;]&lt;br&gt;Example Values: RP4, RP04&lt;br&gt;Permissions Note: Users without RadarTracks permission will not be allowed to query for Radar (RP) type of tracks.&lt;br&gt; (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>TracksRestDto</returns>
        TracksRestDto GetCompositeTrackTypes (string boundingRect = null, string expand = null, string name = null, string sensorSrc = null, string updateSince = null, string updateSrc = null, int? page = null, int? size = null);

        /// <summary>
        /// Get Tracks
        /// </summary>
        /// <remarks>
        /// This is the primary means of searching the real-time tracks in the system. An array of tracks is returned, allowing a client to select the desired track for more detailed information.&lt;br&gt;&lt;br&gt;Please note that:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Multiple query types (see &#x27;Parameter&#x27;) can be applied,&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;isSourceGtc (6/2021):&lt;br&gt;Added to indicate that the source of the /tracks endpoint data is from the GTC Tracker, not the Composite Tracker. (Availability of data on the /tracks endpoint is provided as a convenience to users of this endpoint. There is generally only one Tracker type running within the system so this data would not otherwise be available.) However, there are several implications of this: &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- the data fields are to be interpreted based on the GTC track field&#x27;s descriptions instead (eg, the &#x27;quality&#x27; field has a different range when the data is sourced by GTC), &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- and the track reporting interval follows the GTC track reporting interval. (See the GTC track field &#x27;maxDelayInterval&#x27; to see more information on this.)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boundingRect">Filters tracks to a bounding rectangular region whose sides parallel the latitude and longitude axes.&lt;br&gt;(Decimal Degrees, North Positive / East Positive)&lt;/br&gt; Format is &amp;lt;upper lat&amp;gt;, &amp;lt;left lon&amp;gt;, &amp;lt;lower lat&amp;gt;, &amp;lt;right lon&amp;gt;&lt;br&gt;Example Value: 33.75,-118.50,33.25,-118.19 (optional)</param>
        /// <param name="expand">Allows links to be expanded inline.&lt;br&gt;Values: any combination of [detail, iff]&lt;br&gt;Example Value: detail,iff.&lt;br&gt;&lt;br&gt;Permissions Note: Users without RadarTracks permission may not ask for IFF data.&lt;br&gt; (optional)</param>
        /// <param name="name">Returns tracks that have a complete or partial name match. (optional)</param>
        /// <param name="sensorSrc">Returns tracks that have correlation with specific sensor type(s).&lt;br&gt;Values: Special combination of [Radar, AIS, IFF, DF, Generic, Video, Sonar, AIS-A, AIS-B, Air]&lt;br&gt;Note that &#x27;AIS&#x27; is a convenience for including both AIS Class A and AIS Class B tracks.&lt;br&gt;Several different operations are accepted:&lt;br&gt;- --Provide a single Sensor,&lt;br&gt;- --Provide &#x27;AND&#x27; or &#x27;OR&#x27; to require all of (AND) or one of (OR) sensors to be present in the track,&lt;br&gt;   (requires multiple sensors as arguments),&lt;br&gt;- --Provide &#x27;NOT&#x27; to exclude tracks having the sensor(s) present,&lt;br&gt;- --Provide &#x27;ONLY&#x27; to include tracks which match the given sensor.&lt;br&gt;   (requres a single sensor as argument),&lt;br&gt;Example 1: &#x27;Radar&#x27; returns Radar correlated tracks.&lt;br&gt;Example 2: &#x27;AND(Radar,AIS)&#x27; returns tracks correlated with both Radar AND any combo of AIS-A or AIS-B.&lt;br&gt;Example 3: &#x27;OR(Radar,AIS)&#x27; returns tracks correlated with Radar OR AIS-A OR AIS-B.&lt;br&gt;Example 4: &#x27;ONLY(AIS)&#x27; returns tracks correlated ONLY WITH AIS (any combo of AIS-A or AIS-B).&lt;br&gt;Example 5: &#x27;NOT(Radar,AIS)&#x27; returns tracks NOT correlated with Radar or AIS-A or AIS-B.&lt;br&gt;&lt;br&gt;Permissions Note: Users without RadarTracks permission will have all Radar-only tracks and radar data filtered out.&lt;br&gt; (optional)</param>
        /// <param name="updateSince">Returns tracks that have been updated since (greater than) a specific time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00Z specifies a year-month-day followed by 24-hour hours:minutes:seconds in GMT time&lt;br&gt;&lt;br&gt;Note that to support usability the pagination query is ignored with this argument; all matched items will be returned. (optional)</param>
        /// <param name="updateSrc">Returns tracks that have been updated with a specific sensor.&lt;br&gt;Value: [RP&amp;lt;unit_num&amp;gt;, AIS, GEN&amp;lt;unit_num&amp;gt;]&lt;br&gt;Example Values: RP4, RP04&lt;br&gt;Permissions Note: Users without RadarTracks permission will not be allowed to query for Radar (RP) type of tracks.&lt;br&gt; (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>ApiResponse of TracksRestDto</returns>
        ApiResponse<TracksRestDto> GetCompositeTrackTypesWithHttpInfo (string boundingRect = null, string expand = null, string name = null, string sensorSrc = null, string updateSince = null, string updateSrc = null, int? page = null, int? size = null);
        /// <summary>
        /// Get Track&#x27;s details
        /// </summary>
        /// <remarks>
        /// This endpoint returns additional track details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>TrackDetailRestDto</returns>
        TrackDetailRestDto GetTrackDetail (string id);

        /// <summary>
        /// Get Track&#x27;s details
        /// </summary>
        /// <remarks>
        /// This endpoint returns additional track details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>ApiResponse of TrackDetailRestDto</returns>
        ApiResponse<TrackDetailRestDto> GetTrackDetailWithHttpInfo (string id);
        /// <summary>
        /// Get Track&#x27;s IFF information
        /// </summary>
        /// <remarks>
        /// This endpoint returns additional information on IFF tracks. This information is only provided if IFF PCRPs are included in the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>TrackIffRestDto</returns>
        TrackIffRestDto GetTrackIff (string id);

        /// <summary>
        /// Get Track&#x27;s IFF information
        /// </summary>
        /// <remarks>
        /// This endpoint returns additional information on IFF tracks. This information is only provided if IFF PCRPs are included in the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>ApiResponse of TrackIffRestDto</returns>
        ApiResponse<TrackIffRestDto> GetTrackIffWithHttpInfo (string id);
        /// <summary>
        /// Create a Manual Track
        /// </summary>
        /// <remarks>
        /// Create a manual track with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to create a track.&lt;br&gt;Note that only the latitude and longitude parameters are required; defaults are provided for others or capabilities are not provided.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;location&quot;: {&lt;br&gt;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;latitude&quot;: 33.73301,&lt;br&gt;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;longitude&quot;: -118.18548&lt;br&gt;  },&lt;br&gt; &quot;extTrkId&quot;: 101&lt;br&gt;}</param>
        /// <returns></returns>
        void PostTrack (TrackPostParametersRestDto body);

        /// <summary>
        /// Create a Manual Track
        /// </summary>
        /// <remarks>
        /// Create a manual track with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to create a track.&lt;br&gt;Note that only the latitude and longitude parameters are required; defaults are provided for others or capabilities are not provided.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;location&quot;: {&lt;br&gt;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;latitude&quot;: 33.73301,&lt;br&gt;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;longitude&quot;: -118.18548&lt;br&gt;  },&lt;br&gt; &quot;extTrkId&quot;: 101&lt;br&gt;}</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTrackWithHttpInfo (TrackPostParametersRestDto body);
        /// <summary>
        /// Update the Track Affiliation
        /// </summary>
        /// <remarks>
        /// Update the track&#x27;s affiliation by changing the &#x27;affiliation&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s affiliation.&lt;br&gt;For example:&lt;br&gt;{  &quot;affiliation&quot;:&quot;Friendly&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns></returns>
        void UpdateTrackAffiliation (TrackAffiliationRestDto body, string id);

        /// <summary>
        /// Update the Track Affiliation
        /// </summary>
        /// <remarks>
        /// Update the track&#x27;s affiliation by changing the &#x27;affiliation&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s affiliation.&lt;br&gt;For example:&lt;br&gt;{  &quot;affiliation&quot;:&quot;Friendly&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTrackAffiliationWithHttpInfo (TrackAffiliationRestDto body, string id);
        /// <summary>
        /// Update the Track Boarding
        /// </summary>
        /// <remarks>
        /// Update the track&#x27;s boarding status by changing the &#x27;boarding&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s boarding status.&lt;br&gt;For example:&lt;br&gt;{  &quot;boarding&quot;:&quot;Interest&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns></returns>
        void UpdateTrackBoarding (TrackBoardingRestDto body, string id);

        /// <summary>
        /// Update the Track Boarding
        /// </summary>
        /// <remarks>
        /// Update the track&#x27;s boarding status by changing the &#x27;boarding&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s boarding status.&lt;br&gt;For example:&lt;br&gt;{  &quot;boarding&quot;:&quot;Interest&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTrackBoardingWithHttpInfo (TrackBoardingRestDto body, string id);
        /// <summary>
        /// Update the Track Classification
        /// </summary>
        /// <remarks>
        /// Update the track&#x27;s classification status by changing the &#x27;classification&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s classification status.&lt;br&gt;For example:&lt;br&gt;{  &quot;classification&quot;:&quot;Unknown&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns></returns>
        void UpdateTrackClassification (TrackClassificationRestDto body, string id);

        /// <summary>
        /// Update the Track Classification
        /// </summary>
        /// <remarks>
        /// Update the track&#x27;s classification status by changing the &#x27;classification&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s classification status.&lt;br&gt;For example:&lt;br&gt;{  &quot;classification&quot;:&quot;Unknown&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTrackClassificationWithHttpInfo (TrackClassificationRestDto body, string id);
        /// <summary>
        /// Update the Track Kinematics
        /// </summary>
        /// <remarks>
        /// Update the track&#x27;s kinematics by changing the &#x27;kinematics&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s kinematics.&lt;br&gt;For example:&lt;br&gt;{ &quot;course&quot;:90.0, &quot;speed&quot;:10.3 } </param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns></returns>
        void UpdateTrackKinematics (KinematicsRestDto body, string id);

        /// <summary>
        /// Update the Track Kinematics
        /// </summary>
        /// <remarks>
        /// Update the track&#x27;s kinematics by changing the &#x27;kinematics&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s kinematics.&lt;br&gt;For example:&lt;br&gt;{ &quot;course&quot;:90.0, &quot;speed&quot;:10.3 } </param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTrackKinematicsWithHttpInfo (KinematicsRestDto body, string id);
        /// <summary>
        /// Update the Track Name
        /// </summary>
        /// <remarks>
        /// Update the track name by changing the &#x27;name&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s name.&lt;br&gt;For example:&lt;br&gt;{  &quot;name&quot;: &quot;myTrack&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns></returns>
        void UpdateTrackName (TrackNameRestDto body, string id);

        /// <summary>
        /// Update the Track Name
        /// </summary>
        /// <remarks>
        /// Update the track name by changing the &#x27;name&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s name.&lt;br&gt;For example:&lt;br&gt;{  &quot;name&quot;: &quot;myTrack&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTrackNameWithHttpInfo (TrackNameRestDto body, string id);
        /// <summary>
        /// Update the Track Position
        /// </summary>
        /// <remarks>
        /// Update the track position by changing the &#x27;position&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s position.&lt;br&gt;For example:&lt;br&gt;{ &quot;latitude&quot;:33.7, &quot;longitude&quot;:-118 } </param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns></returns>
        void UpdateTrackPosition (GeoPosRestDto body, string id);

        /// <summary>
        /// Update the Track Position
        /// </summary>
        /// <remarks>
        /// Update the track position by changing the &#x27;position&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s position.&lt;br&gt;For example:&lt;br&gt;{ &quot;latitude&quot;:33.7, &quot;longitude&quot;:-118 } </param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTrackPositionWithHttpInfo (GeoPosRestDto body, string id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a Track
        /// </summary>
        /// <remarks>
        /// Deletes the specified track from the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTrackAsync (string id);

        /// <summary>
        /// Delete a Track
        /// </summary>
        /// <remarks>
        /// Deletes the specified track from the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTrackAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete all Tracks from the System
        /// </summary>
        /// <remarks>
        /// Delete all tracks from the system; both those automatically acquired and manual.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTracksAsync ();

        /// <summary>
        /// Delete all Tracks from the System
        /// </summary>
        /// <remarks>
        /// Delete all tracks from the system; both those automatically acquired and manual.&lt;br&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTracksAsyncWithHttpInfo ();
        /// <summary>
        /// Get Track
        /// </summary>
        /// <remarks>
        /// Root representation of a specific track object; providing sufficient identification and kinematic information to represent the track object to the user. In addition to this data, it provides links to children and other associated objects, allowing one to gather all available information about a real-time track.&lt;br&gt;Please note:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;isSourceGtc (6/2021):&lt;br&gt;Added to indicate that the source of the /tracks endpoint data is from the GTC Tracker, not the Composite Tracker. (Availability of data on the /tracks endpoint is provided as a convenience to users of this endpoint. There is generally only one Tracker type running within the system so this data would not otherwise be available.) However, there are several implications of this: &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- the data fields are to be interpreted based on the GTC track field&#x27;s descriptions instead (eg, the &#x27;quality&#x27; field has a different range when the data is sourced by GTC), &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- and the track reporting interval follows the GTC track reporting interval. (See the GTC track field &#x27;maxDelayInterval&#x27; to see more information on this.)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <param name="expand">Allows links to be expanded inline.&lt;br&gt;Values: any combination of [detail, iff]&lt;br&gt;Example Value: detail,iff.&lt;br&gt;&lt;br&gt;Permissions Note: Users without RadarTracks permission may not ask for IFF data.&lt;br&gt; (optional)</param>
        /// <returns>Task of TrackRestDto</returns>
        System.Threading.Tasks.Task<TrackRestDto> GetCompositeTrackTypeAsync (string id, string expand = null);

        /// <summary>
        /// Get Track
        /// </summary>
        /// <remarks>
        /// Root representation of a specific track object; providing sufficient identification and kinematic information to represent the track object to the user. In addition to this data, it provides links to children and other associated objects, allowing one to gather all available information about a real-time track.&lt;br&gt;Please note:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;isSourceGtc (6/2021):&lt;br&gt;Added to indicate that the source of the /tracks endpoint data is from the GTC Tracker, not the Composite Tracker. (Availability of data on the /tracks endpoint is provided as a convenience to users of this endpoint. There is generally only one Tracker type running within the system so this data would not otherwise be available.) However, there are several implications of this: &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- the data fields are to be interpreted based on the GTC track field&#x27;s descriptions instead (eg, the &#x27;quality&#x27; field has a different range when the data is sourced by GTC), &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- and the track reporting interval follows the GTC track reporting interval. (See the GTC track field &#x27;maxDelayInterval&#x27; to see more information on this.)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <param name="expand">Allows links to be expanded inline.&lt;br&gt;Values: any combination of [detail, iff]&lt;br&gt;Example Value: detail,iff.&lt;br&gt;&lt;br&gt;Permissions Note: Users without RadarTracks permission may not ask for IFF data.&lt;br&gt; (optional)</param>
        /// <returns>Task of ApiResponse (TrackRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackRestDto>> GetCompositeTrackTypeAsyncWithHttpInfo (string id, string expand = null);
        /// <summary>
        /// Get Tracks
        /// </summary>
        /// <remarks>
        /// This is the primary means of searching the real-time tracks in the system. An array of tracks is returned, allowing a client to select the desired track for more detailed information.&lt;br&gt;&lt;br&gt;Please note that:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Multiple query types (see &#x27;Parameter&#x27;) can be applied,&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;isSourceGtc (6/2021):&lt;br&gt;Added to indicate that the source of the /tracks endpoint data is from the GTC Tracker, not the Composite Tracker. (Availability of data on the /tracks endpoint is provided as a convenience to users of this endpoint. There is generally only one Tracker type running within the system so this data would not otherwise be available.) However, there are several implications of this: &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- the data fields are to be interpreted based on the GTC track field&#x27;s descriptions instead (eg, the &#x27;quality&#x27; field has a different range when the data is sourced by GTC), &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- and the track reporting interval follows the GTC track reporting interval. (See the GTC track field &#x27;maxDelayInterval&#x27; to see more information on this.)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boundingRect">Filters tracks to a bounding rectangular region whose sides parallel the latitude and longitude axes.&lt;br&gt;(Decimal Degrees, North Positive / East Positive)&lt;/br&gt; Format is &amp;lt;upper lat&amp;gt;, &amp;lt;left lon&amp;gt;, &amp;lt;lower lat&amp;gt;, &amp;lt;right lon&amp;gt;&lt;br&gt;Example Value: 33.75,-118.50,33.25,-118.19 (optional)</param>
        /// <param name="expand">Allows links to be expanded inline.&lt;br&gt;Values: any combination of [detail, iff]&lt;br&gt;Example Value: detail,iff.&lt;br&gt;&lt;br&gt;Permissions Note: Users without RadarTracks permission may not ask for IFF data.&lt;br&gt; (optional)</param>
        /// <param name="name">Returns tracks that have a complete or partial name match. (optional)</param>
        /// <param name="sensorSrc">Returns tracks that have correlation with specific sensor type(s).&lt;br&gt;Values: Special combination of [Radar, AIS, IFF, DF, Generic, Video, Sonar, AIS-A, AIS-B, Air]&lt;br&gt;Note that &#x27;AIS&#x27; is a convenience for including both AIS Class A and AIS Class B tracks.&lt;br&gt;Several different operations are accepted:&lt;br&gt;- --Provide a single Sensor,&lt;br&gt;- --Provide &#x27;AND&#x27; or &#x27;OR&#x27; to require all of (AND) or one of (OR) sensors to be present in the track,&lt;br&gt;   (requires multiple sensors as arguments),&lt;br&gt;- --Provide &#x27;NOT&#x27; to exclude tracks having the sensor(s) present,&lt;br&gt;- --Provide &#x27;ONLY&#x27; to include tracks which match the given sensor.&lt;br&gt;   (requres a single sensor as argument),&lt;br&gt;Example 1: &#x27;Radar&#x27; returns Radar correlated tracks.&lt;br&gt;Example 2: &#x27;AND(Radar,AIS)&#x27; returns tracks correlated with both Radar AND any combo of AIS-A or AIS-B.&lt;br&gt;Example 3: &#x27;OR(Radar,AIS)&#x27; returns tracks correlated with Radar OR AIS-A OR AIS-B.&lt;br&gt;Example 4: &#x27;ONLY(AIS)&#x27; returns tracks correlated ONLY WITH AIS (any combo of AIS-A or AIS-B).&lt;br&gt;Example 5: &#x27;NOT(Radar,AIS)&#x27; returns tracks NOT correlated with Radar or AIS-A or AIS-B.&lt;br&gt;&lt;br&gt;Permissions Note: Users without RadarTracks permission will have all Radar-only tracks and radar data filtered out.&lt;br&gt; (optional)</param>
        /// <param name="updateSince">Returns tracks that have been updated since (greater than) a specific time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00Z specifies a year-month-day followed by 24-hour hours:minutes:seconds in GMT time&lt;br&gt;&lt;br&gt;Note that to support usability the pagination query is ignored with this argument; all matched items will be returned. (optional)</param>
        /// <param name="updateSrc">Returns tracks that have been updated with a specific sensor.&lt;br&gt;Value: [RP&amp;lt;unit_num&amp;gt;, AIS, GEN&amp;lt;unit_num&amp;gt;]&lt;br&gt;Example Values: RP4, RP04&lt;br&gt;Permissions Note: Users without RadarTracks permission will not be allowed to query for Radar (RP) type of tracks.&lt;br&gt; (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of TracksRestDto</returns>
        System.Threading.Tasks.Task<TracksRestDto> GetCompositeTrackTypesAsync (string boundingRect = null, string expand = null, string name = null, string sensorSrc = null, string updateSince = null, string updateSrc = null, int? page = null, int? size = null);

        /// <summary>
        /// Get Tracks
        /// </summary>
        /// <remarks>
        /// This is the primary means of searching the real-time tracks in the system. An array of tracks is returned, allowing a client to select the desired track for more detailed information.&lt;br&gt;&lt;br&gt;Please note that:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Multiple query types (see &#x27;Parameter&#x27;) can be applied,&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;isSourceGtc (6/2021):&lt;br&gt;Added to indicate that the source of the /tracks endpoint data is from the GTC Tracker, not the Composite Tracker. (Availability of data on the /tracks endpoint is provided as a convenience to users of this endpoint. There is generally only one Tracker type running within the system so this data would not otherwise be available.) However, there are several implications of this: &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- the data fields are to be interpreted based on the GTC track field&#x27;s descriptions instead (eg, the &#x27;quality&#x27; field has a different range when the data is sourced by GTC), &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- and the track reporting interval follows the GTC track reporting interval. (See the GTC track field &#x27;maxDelayInterval&#x27; to see more information on this.)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boundingRect">Filters tracks to a bounding rectangular region whose sides parallel the latitude and longitude axes.&lt;br&gt;(Decimal Degrees, North Positive / East Positive)&lt;/br&gt; Format is &amp;lt;upper lat&amp;gt;, &amp;lt;left lon&amp;gt;, &amp;lt;lower lat&amp;gt;, &amp;lt;right lon&amp;gt;&lt;br&gt;Example Value: 33.75,-118.50,33.25,-118.19 (optional)</param>
        /// <param name="expand">Allows links to be expanded inline.&lt;br&gt;Values: any combination of [detail, iff]&lt;br&gt;Example Value: detail,iff.&lt;br&gt;&lt;br&gt;Permissions Note: Users without RadarTracks permission may not ask for IFF data.&lt;br&gt; (optional)</param>
        /// <param name="name">Returns tracks that have a complete or partial name match. (optional)</param>
        /// <param name="sensorSrc">Returns tracks that have correlation with specific sensor type(s).&lt;br&gt;Values: Special combination of [Radar, AIS, IFF, DF, Generic, Video, Sonar, AIS-A, AIS-B, Air]&lt;br&gt;Note that &#x27;AIS&#x27; is a convenience for including both AIS Class A and AIS Class B tracks.&lt;br&gt;Several different operations are accepted:&lt;br&gt;- --Provide a single Sensor,&lt;br&gt;- --Provide &#x27;AND&#x27; or &#x27;OR&#x27; to require all of (AND) or one of (OR) sensors to be present in the track,&lt;br&gt;   (requires multiple sensors as arguments),&lt;br&gt;- --Provide &#x27;NOT&#x27; to exclude tracks having the sensor(s) present,&lt;br&gt;- --Provide &#x27;ONLY&#x27; to include tracks which match the given sensor.&lt;br&gt;   (requres a single sensor as argument),&lt;br&gt;Example 1: &#x27;Radar&#x27; returns Radar correlated tracks.&lt;br&gt;Example 2: &#x27;AND(Radar,AIS)&#x27; returns tracks correlated with both Radar AND any combo of AIS-A or AIS-B.&lt;br&gt;Example 3: &#x27;OR(Radar,AIS)&#x27; returns tracks correlated with Radar OR AIS-A OR AIS-B.&lt;br&gt;Example 4: &#x27;ONLY(AIS)&#x27; returns tracks correlated ONLY WITH AIS (any combo of AIS-A or AIS-B).&lt;br&gt;Example 5: &#x27;NOT(Radar,AIS)&#x27; returns tracks NOT correlated with Radar or AIS-A or AIS-B.&lt;br&gt;&lt;br&gt;Permissions Note: Users without RadarTracks permission will have all Radar-only tracks and radar data filtered out.&lt;br&gt; (optional)</param>
        /// <param name="updateSince">Returns tracks that have been updated since (greater than) a specific time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00Z specifies a year-month-day followed by 24-hour hours:minutes:seconds in GMT time&lt;br&gt;&lt;br&gt;Note that to support usability the pagination query is ignored with this argument; all matched items will be returned. (optional)</param>
        /// <param name="updateSrc">Returns tracks that have been updated with a specific sensor.&lt;br&gt;Value: [RP&amp;lt;unit_num&amp;gt;, AIS, GEN&amp;lt;unit_num&amp;gt;]&lt;br&gt;Example Values: RP4, RP04&lt;br&gt;Permissions Note: Users without RadarTracks permission will not be allowed to query for Radar (RP) type of tracks.&lt;br&gt; (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (TracksRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TracksRestDto>> GetCompositeTrackTypesAsyncWithHttpInfo (string boundingRect = null, string expand = null, string name = null, string sensorSrc = null, string updateSince = null, string updateSrc = null, int? page = null, int? size = null);
        /// <summary>
        /// Get Track&#x27;s details
        /// </summary>
        /// <remarks>
        /// This endpoint returns additional track details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of TrackDetailRestDto</returns>
        System.Threading.Tasks.Task<TrackDetailRestDto> GetTrackDetailAsync (string id);

        /// <summary>
        /// Get Track&#x27;s details
        /// </summary>
        /// <remarks>
        /// This endpoint returns additional track details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of ApiResponse (TrackDetailRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackDetailRestDto>> GetTrackDetailAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get Track&#x27;s IFF information
        /// </summary>
        /// <remarks>
        /// This endpoint returns additional information on IFF tracks. This information is only provided if IFF PCRPs are included in the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of TrackIffRestDto</returns>
        System.Threading.Tasks.Task<TrackIffRestDto> GetTrackIffAsync (string id);

        /// <summary>
        /// Get Track&#x27;s IFF information
        /// </summary>
        /// <remarks>
        /// This endpoint returns additional information on IFF tracks. This information is only provided if IFF PCRPs are included in the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of ApiResponse (TrackIffRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackIffRestDto>> GetTrackIffAsyncWithHttpInfo (string id);
        /// <summary>
        /// Create a Manual Track
        /// </summary>
        /// <remarks>
        /// Create a manual track with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to create a track.&lt;br&gt;Note that only the latitude and longitude parameters are required; defaults are provided for others or capabilities are not provided.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;location&quot;: {&lt;br&gt;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;latitude&quot;: 33.73301,&lt;br&gt;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;longitude&quot;: -118.18548&lt;br&gt;  },&lt;br&gt; &quot;extTrkId&quot;: 101&lt;br&gt;}</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostTrackAsync (TrackPostParametersRestDto body);

        /// <summary>
        /// Create a Manual Track
        /// </summary>
        /// <remarks>
        /// Create a manual track with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to create a track.&lt;br&gt;Note that only the latitude and longitude parameters are required; defaults are provided for others or capabilities are not provided.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;location&quot;: {&lt;br&gt;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;latitude&quot;: 33.73301,&lt;br&gt;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;longitude&quot;: -118.18548&lt;br&gt;  },&lt;br&gt; &quot;extTrkId&quot;: 101&lt;br&gt;}</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostTrackAsyncWithHttpInfo (TrackPostParametersRestDto body);
        /// <summary>
        /// Update the Track Affiliation
        /// </summary>
        /// <remarks>
        /// Update the track&#x27;s affiliation by changing the &#x27;affiliation&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s affiliation.&lt;br&gt;For example:&lt;br&gt;{  &quot;affiliation&quot;:&quot;Friendly&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTrackAffiliationAsync (TrackAffiliationRestDto body, string id);

        /// <summary>
        /// Update the Track Affiliation
        /// </summary>
        /// <remarks>
        /// Update the track&#x27;s affiliation by changing the &#x27;affiliation&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s affiliation.&lt;br&gt;For example:&lt;br&gt;{  &quot;affiliation&quot;:&quot;Friendly&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTrackAffiliationAsyncWithHttpInfo (TrackAffiliationRestDto body, string id);
        /// <summary>
        /// Update the Track Boarding
        /// </summary>
        /// <remarks>
        /// Update the track&#x27;s boarding status by changing the &#x27;boarding&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s boarding status.&lt;br&gt;For example:&lt;br&gt;{  &quot;boarding&quot;:&quot;Interest&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTrackBoardingAsync (TrackBoardingRestDto body, string id);

        /// <summary>
        /// Update the Track Boarding
        /// </summary>
        /// <remarks>
        /// Update the track&#x27;s boarding status by changing the &#x27;boarding&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s boarding status.&lt;br&gt;For example:&lt;br&gt;{  &quot;boarding&quot;:&quot;Interest&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTrackBoardingAsyncWithHttpInfo (TrackBoardingRestDto body, string id);
        /// <summary>
        /// Update the Track Classification
        /// </summary>
        /// <remarks>
        /// Update the track&#x27;s classification status by changing the &#x27;classification&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s classification status.&lt;br&gt;For example:&lt;br&gt;{  &quot;classification&quot;:&quot;Unknown&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTrackClassificationAsync (TrackClassificationRestDto body, string id);

        /// <summary>
        /// Update the Track Classification
        /// </summary>
        /// <remarks>
        /// Update the track&#x27;s classification status by changing the &#x27;classification&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s classification status.&lt;br&gt;For example:&lt;br&gt;{  &quot;classification&quot;:&quot;Unknown&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTrackClassificationAsyncWithHttpInfo (TrackClassificationRestDto body, string id);
        /// <summary>
        /// Update the Track Kinematics
        /// </summary>
        /// <remarks>
        /// Update the track&#x27;s kinematics by changing the &#x27;kinematics&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s kinematics.&lt;br&gt;For example:&lt;br&gt;{ &quot;course&quot;:90.0, &quot;speed&quot;:10.3 } </param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTrackKinematicsAsync (KinematicsRestDto body, string id);

        /// <summary>
        /// Update the Track Kinematics
        /// </summary>
        /// <remarks>
        /// Update the track&#x27;s kinematics by changing the &#x27;kinematics&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s kinematics.&lt;br&gt;For example:&lt;br&gt;{ &quot;course&quot;:90.0, &quot;speed&quot;:10.3 } </param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTrackKinematicsAsyncWithHttpInfo (KinematicsRestDto body, string id);
        /// <summary>
        /// Update the Track Name
        /// </summary>
        /// <remarks>
        /// Update the track name by changing the &#x27;name&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s name.&lt;br&gt;For example:&lt;br&gt;{  &quot;name&quot;: &quot;myTrack&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTrackNameAsync (TrackNameRestDto body, string id);

        /// <summary>
        /// Update the Track Name
        /// </summary>
        /// <remarks>
        /// Update the track name by changing the &#x27;name&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s name.&lt;br&gt;For example:&lt;br&gt;{  &quot;name&quot;: &quot;myTrack&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTrackNameAsyncWithHttpInfo (TrackNameRestDto body, string id);
        /// <summary>
        /// Update the Track Position
        /// </summary>
        /// <remarks>
        /// Update the track position by changing the &#x27;position&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s position.&lt;br&gt;For example:&lt;br&gt;{ &quot;latitude&quot;:33.7, &quot;longitude&quot;:-118 } </param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTrackPositionAsync (GeoPosRestDto body, string id);

        /// <summary>
        /// Update the Track Position
        /// </summary>
        /// <remarks>
        /// Update the track position by changing the &#x27;position&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s position.&lt;br&gt;For example:&lt;br&gt;{ &quot;latitude&quot;:33.7, &quot;longitude&quot;:-118 } </param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTrackPositionAsyncWithHttpInfo (GeoPosRestDto body, string id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a Track Deletes the specified track from the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns></returns>
        public void DeleteTrack (string id)
        {
             DeleteTrackWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a Track Deletes the specified track from the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTrackWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->DeleteTrack");

            var localVarPath = "/tracks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTrack", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a Track Deletes the specified track from the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTrackAsync (string id)
        {
             await DeleteTrackAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a Track Deletes the specified track from the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTrackAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->DeleteTrack");

            var localVarPath = "/tracks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTrack", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete all Tracks from the System Delete all tracks from the system; both those automatically acquired and manual.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteTracks ()
        {
             DeleteTracksWithHttpInfo();
        }

        /// <summary>
        /// Delete all Tracks from the System Delete all tracks from the system; both those automatically acquired and manual.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTracksWithHttpInfo ()
        {

            var localVarPath = "/tracks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTracks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete all Tracks from the System Delete all tracks from the system; both those automatically acquired and manual.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTracksAsync ()
        {
             await DeleteTracksAsyncWithHttpInfo();

        }

        /// <summary>
        /// Delete all Tracks from the System Delete all tracks from the system; both those automatically acquired and manual.&lt;br&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTracksAsyncWithHttpInfo ()
        {

            var localVarPath = "/tracks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTracks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Track Root representation of a specific track object; providing sufficient identification and kinematic information to represent the track object to the user. In addition to this data, it provides links to children and other associated objects, allowing one to gather all available information about a real-time track.&lt;br&gt;Please note:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;isSourceGtc (6/2021):&lt;br&gt;Added to indicate that the source of the /tracks endpoint data is from the GTC Tracker, not the Composite Tracker. (Availability of data on the /tracks endpoint is provided as a convenience to users of this endpoint. There is generally only one Tracker type running within the system so this data would not otherwise be available.) However, there are several implications of this: &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- the data fields are to be interpreted based on the GTC track field&#x27;s descriptions instead (eg, the &#x27;quality&#x27; field has a different range when the data is sourced by GTC), &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- and the track reporting interval follows the GTC track reporting interval. (See the GTC track field &#x27;maxDelayInterval&#x27; to see more information on this.)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <param name="expand">Allows links to be expanded inline.&lt;br&gt;Values: any combination of [detail, iff]&lt;br&gt;Example Value: detail,iff.&lt;br&gt;&lt;br&gt;Permissions Note: Users without RadarTracks permission may not ask for IFF data.&lt;br&gt; (optional)</param>
        /// <returns>TrackRestDto</returns>
        public TrackRestDto GetCompositeTrackType (string id, string expand = null)
        {
             ApiResponse<TrackRestDto> localVarResponse = GetCompositeTrackTypeWithHttpInfo(id, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Track Root representation of a specific track object; providing sufficient identification and kinematic information to represent the track object to the user. In addition to this data, it provides links to children and other associated objects, allowing one to gather all available information about a real-time track.&lt;br&gt;Please note:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;isSourceGtc (6/2021):&lt;br&gt;Added to indicate that the source of the /tracks endpoint data is from the GTC Tracker, not the Composite Tracker. (Availability of data on the /tracks endpoint is provided as a convenience to users of this endpoint. There is generally only one Tracker type running within the system so this data would not otherwise be available.) However, there are several implications of this: &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- the data fields are to be interpreted based on the GTC track field&#x27;s descriptions instead (eg, the &#x27;quality&#x27; field has a different range when the data is sourced by GTC), &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- and the track reporting interval follows the GTC track reporting interval. (See the GTC track field &#x27;maxDelayInterval&#x27; to see more information on this.)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <param name="expand">Allows links to be expanded inline.&lt;br&gt;Values: any combination of [detail, iff]&lt;br&gt;Example Value: detail,iff.&lt;br&gt;&lt;br&gt;Permissions Note: Users without RadarTracks permission may not ask for IFF data.&lt;br&gt; (optional)</param>
        /// <returns>ApiResponse of TrackRestDto</returns>
        public ApiResponse< TrackRestDto > GetCompositeTrackTypeWithHttpInfo (string id, string expand = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetCompositeTrackType");

            var localVarPath = "/tracks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCompositeTrackType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TrackRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackRestDto)));
        }

        /// <summary>
        /// Get Track Root representation of a specific track object; providing sufficient identification and kinematic information to represent the track object to the user. In addition to this data, it provides links to children and other associated objects, allowing one to gather all available information about a real-time track.&lt;br&gt;Please note:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;isSourceGtc (6/2021):&lt;br&gt;Added to indicate that the source of the /tracks endpoint data is from the GTC Tracker, not the Composite Tracker. (Availability of data on the /tracks endpoint is provided as a convenience to users of this endpoint. There is generally only one Tracker type running within the system so this data would not otherwise be available.) However, there are several implications of this: &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- the data fields are to be interpreted based on the GTC track field&#x27;s descriptions instead (eg, the &#x27;quality&#x27; field has a different range when the data is sourced by GTC), &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- and the track reporting interval follows the GTC track reporting interval. (See the GTC track field &#x27;maxDelayInterval&#x27; to see more information on this.)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <param name="expand">Allows links to be expanded inline.&lt;br&gt;Values: any combination of [detail, iff]&lt;br&gt;Example Value: detail,iff.&lt;br&gt;&lt;br&gt;Permissions Note: Users without RadarTracks permission may not ask for IFF data.&lt;br&gt; (optional)</param>
        /// <returns>Task of TrackRestDto</returns>
        public async System.Threading.Tasks.Task<TrackRestDto> GetCompositeTrackTypeAsync (string id, string expand = null)
        {
             ApiResponse<TrackRestDto> localVarResponse = await GetCompositeTrackTypeAsyncWithHttpInfo(id, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Track Root representation of a specific track object; providing sufficient identification and kinematic information to represent the track object to the user. In addition to this data, it provides links to children and other associated objects, allowing one to gather all available information about a real-time track.&lt;br&gt;Please note:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;isSourceGtc (6/2021):&lt;br&gt;Added to indicate that the source of the /tracks endpoint data is from the GTC Tracker, not the Composite Tracker. (Availability of data on the /tracks endpoint is provided as a convenience to users of this endpoint. There is generally only one Tracker type running within the system so this data would not otherwise be available.) However, there are several implications of this: &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- the data fields are to be interpreted based on the GTC track field&#x27;s descriptions instead (eg, the &#x27;quality&#x27; field has a different range when the data is sourced by GTC), &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- and the track reporting interval follows the GTC track reporting interval. (See the GTC track field &#x27;maxDelayInterval&#x27; to see more information on this.)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <param name="expand">Allows links to be expanded inline.&lt;br&gt;Values: any combination of [detail, iff]&lt;br&gt;Example Value: detail,iff.&lt;br&gt;&lt;br&gt;Permissions Note: Users without RadarTracks permission may not ask for IFF data.&lt;br&gt; (optional)</param>
        /// <returns>Task of ApiResponse (TrackRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrackRestDto>> GetCompositeTrackTypeAsyncWithHttpInfo (string id, string expand = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetCompositeTrackType");

            var localVarPath = "/tracks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCompositeTrackType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TrackRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackRestDto)));
        }

        /// <summary>
        /// Get Tracks This is the primary means of searching the real-time tracks in the system. An array of tracks is returned, allowing a client to select the desired track for more detailed information.&lt;br&gt;&lt;br&gt;Please note that:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Multiple query types (see &#x27;Parameter&#x27;) can be applied,&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;isSourceGtc (6/2021):&lt;br&gt;Added to indicate that the source of the /tracks endpoint data is from the GTC Tracker, not the Composite Tracker. (Availability of data on the /tracks endpoint is provided as a convenience to users of this endpoint. There is generally only one Tracker type running within the system so this data would not otherwise be available.) However, there are several implications of this: &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- the data fields are to be interpreted based on the GTC track field&#x27;s descriptions instead (eg, the &#x27;quality&#x27; field has a different range when the data is sourced by GTC), &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- and the track reporting interval follows the GTC track reporting interval. (See the GTC track field &#x27;maxDelayInterval&#x27; to see more information on this.)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boundingRect">Filters tracks to a bounding rectangular region whose sides parallel the latitude and longitude axes.&lt;br&gt;(Decimal Degrees, North Positive / East Positive)&lt;/br&gt; Format is &amp;lt;upper lat&amp;gt;, &amp;lt;left lon&amp;gt;, &amp;lt;lower lat&amp;gt;, &amp;lt;right lon&amp;gt;&lt;br&gt;Example Value: 33.75,-118.50,33.25,-118.19 (optional)</param>
        /// <param name="expand">Allows links to be expanded inline.&lt;br&gt;Values: any combination of [detail, iff]&lt;br&gt;Example Value: detail,iff.&lt;br&gt;&lt;br&gt;Permissions Note: Users without RadarTracks permission may not ask for IFF data.&lt;br&gt; (optional)</param>
        /// <param name="name">Returns tracks that have a complete or partial name match. (optional)</param>
        /// <param name="sensorSrc">Returns tracks that have correlation with specific sensor type(s).&lt;br&gt;Values: Special combination of [Radar, AIS, IFF, DF, Generic, Video, Sonar, AIS-A, AIS-B, Air]&lt;br&gt;Note that &#x27;AIS&#x27; is a convenience for including both AIS Class A and AIS Class B tracks.&lt;br&gt;Several different operations are accepted:&lt;br&gt;- --Provide a single Sensor,&lt;br&gt;- --Provide &#x27;AND&#x27; or &#x27;OR&#x27; to require all of (AND) or one of (OR) sensors to be present in the track,&lt;br&gt;   (requires multiple sensors as arguments),&lt;br&gt;- --Provide &#x27;NOT&#x27; to exclude tracks having the sensor(s) present,&lt;br&gt;- --Provide &#x27;ONLY&#x27; to include tracks which match the given sensor.&lt;br&gt;   (requres a single sensor as argument),&lt;br&gt;Example 1: &#x27;Radar&#x27; returns Radar correlated tracks.&lt;br&gt;Example 2: &#x27;AND(Radar,AIS)&#x27; returns tracks correlated with both Radar AND any combo of AIS-A or AIS-B.&lt;br&gt;Example 3: &#x27;OR(Radar,AIS)&#x27; returns tracks correlated with Radar OR AIS-A OR AIS-B.&lt;br&gt;Example 4: &#x27;ONLY(AIS)&#x27; returns tracks correlated ONLY WITH AIS (any combo of AIS-A or AIS-B).&lt;br&gt;Example 5: &#x27;NOT(Radar,AIS)&#x27; returns tracks NOT correlated with Radar or AIS-A or AIS-B.&lt;br&gt;&lt;br&gt;Permissions Note: Users without RadarTracks permission will have all Radar-only tracks and radar data filtered out.&lt;br&gt; (optional)</param>
        /// <param name="updateSince">Returns tracks that have been updated since (greater than) a specific time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00Z specifies a year-month-day followed by 24-hour hours:minutes:seconds in GMT time&lt;br&gt;&lt;br&gt;Note that to support usability the pagination query is ignored with this argument; all matched items will be returned. (optional)</param>
        /// <param name="updateSrc">Returns tracks that have been updated with a specific sensor.&lt;br&gt;Value: [RP&amp;lt;unit_num&amp;gt;, AIS, GEN&amp;lt;unit_num&amp;gt;]&lt;br&gt;Example Values: RP4, RP04&lt;br&gt;Permissions Note: Users without RadarTracks permission will not be allowed to query for Radar (RP) type of tracks.&lt;br&gt; (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>TracksRestDto</returns>
        public TracksRestDto GetCompositeTrackTypes (string boundingRect = null, string expand = null, string name = null, string sensorSrc = null, string updateSince = null, string updateSrc = null, int? page = null, int? size = null)
        {
             ApiResponse<TracksRestDto> localVarResponse = GetCompositeTrackTypesWithHttpInfo(boundingRect, expand, name, sensorSrc, updateSince, updateSrc, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tracks This is the primary means of searching the real-time tracks in the system. An array of tracks is returned, allowing a client to select the desired track for more detailed information.&lt;br&gt;&lt;br&gt;Please note that:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Multiple query types (see &#x27;Parameter&#x27;) can be applied,&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;isSourceGtc (6/2021):&lt;br&gt;Added to indicate that the source of the /tracks endpoint data is from the GTC Tracker, not the Composite Tracker. (Availability of data on the /tracks endpoint is provided as a convenience to users of this endpoint. There is generally only one Tracker type running within the system so this data would not otherwise be available.) However, there are several implications of this: &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- the data fields are to be interpreted based on the GTC track field&#x27;s descriptions instead (eg, the &#x27;quality&#x27; field has a different range when the data is sourced by GTC), &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- and the track reporting interval follows the GTC track reporting interval. (See the GTC track field &#x27;maxDelayInterval&#x27; to see more information on this.)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boundingRect">Filters tracks to a bounding rectangular region whose sides parallel the latitude and longitude axes.&lt;br&gt;(Decimal Degrees, North Positive / East Positive)&lt;/br&gt; Format is &amp;lt;upper lat&amp;gt;, &amp;lt;left lon&amp;gt;, &amp;lt;lower lat&amp;gt;, &amp;lt;right lon&amp;gt;&lt;br&gt;Example Value: 33.75,-118.50,33.25,-118.19 (optional)</param>
        /// <param name="expand">Allows links to be expanded inline.&lt;br&gt;Values: any combination of [detail, iff]&lt;br&gt;Example Value: detail,iff.&lt;br&gt;&lt;br&gt;Permissions Note: Users without RadarTracks permission may not ask for IFF data.&lt;br&gt; (optional)</param>
        /// <param name="name">Returns tracks that have a complete or partial name match. (optional)</param>
        /// <param name="sensorSrc">Returns tracks that have correlation with specific sensor type(s).&lt;br&gt;Values: Special combination of [Radar, AIS, IFF, DF, Generic, Video, Sonar, AIS-A, AIS-B, Air]&lt;br&gt;Note that &#x27;AIS&#x27; is a convenience for including both AIS Class A and AIS Class B tracks.&lt;br&gt;Several different operations are accepted:&lt;br&gt;- --Provide a single Sensor,&lt;br&gt;- --Provide &#x27;AND&#x27; or &#x27;OR&#x27; to require all of (AND) or one of (OR) sensors to be present in the track,&lt;br&gt;   (requires multiple sensors as arguments),&lt;br&gt;- --Provide &#x27;NOT&#x27; to exclude tracks having the sensor(s) present,&lt;br&gt;- --Provide &#x27;ONLY&#x27; to include tracks which match the given sensor.&lt;br&gt;   (requres a single sensor as argument),&lt;br&gt;Example 1: &#x27;Radar&#x27; returns Radar correlated tracks.&lt;br&gt;Example 2: &#x27;AND(Radar,AIS)&#x27; returns tracks correlated with both Radar AND any combo of AIS-A or AIS-B.&lt;br&gt;Example 3: &#x27;OR(Radar,AIS)&#x27; returns tracks correlated with Radar OR AIS-A OR AIS-B.&lt;br&gt;Example 4: &#x27;ONLY(AIS)&#x27; returns tracks correlated ONLY WITH AIS (any combo of AIS-A or AIS-B).&lt;br&gt;Example 5: &#x27;NOT(Radar,AIS)&#x27; returns tracks NOT correlated with Radar or AIS-A or AIS-B.&lt;br&gt;&lt;br&gt;Permissions Note: Users without RadarTracks permission will have all Radar-only tracks and radar data filtered out.&lt;br&gt; (optional)</param>
        /// <param name="updateSince">Returns tracks that have been updated since (greater than) a specific time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00Z specifies a year-month-day followed by 24-hour hours:minutes:seconds in GMT time&lt;br&gt;&lt;br&gt;Note that to support usability the pagination query is ignored with this argument; all matched items will be returned. (optional)</param>
        /// <param name="updateSrc">Returns tracks that have been updated with a specific sensor.&lt;br&gt;Value: [RP&amp;lt;unit_num&amp;gt;, AIS, GEN&amp;lt;unit_num&amp;gt;]&lt;br&gt;Example Values: RP4, RP04&lt;br&gt;Permissions Note: Users without RadarTracks permission will not be allowed to query for Radar (RP) type of tracks.&lt;br&gt; (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>ApiResponse of TracksRestDto</returns>
        public ApiResponse< TracksRestDto > GetCompositeTrackTypesWithHttpInfo (string boundingRect = null, string expand = null, string name = null, string sensorSrc = null, string updateSince = null, string updateSrc = null, int? page = null, int? size = null)
        {

            var localVarPath = "/tracks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boundingRect != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "boundingRect", boundingRect)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (sensorSrc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sensorSrc", sensorSrc)); // query parameter
            if (updateSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateSince", updateSince)); // query parameter
            if (updateSrc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateSrc", updateSrc)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCompositeTrackTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TracksRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TracksRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TracksRestDto)));
        }

        /// <summary>
        /// Get Tracks This is the primary means of searching the real-time tracks in the system. An array of tracks is returned, allowing a client to select the desired track for more detailed information.&lt;br&gt;&lt;br&gt;Please note that:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Multiple query types (see &#x27;Parameter&#x27;) can be applied,&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;isSourceGtc (6/2021):&lt;br&gt;Added to indicate that the source of the /tracks endpoint data is from the GTC Tracker, not the Composite Tracker. (Availability of data on the /tracks endpoint is provided as a convenience to users of this endpoint. There is generally only one Tracker type running within the system so this data would not otherwise be available.) However, there are several implications of this: &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- the data fields are to be interpreted based on the GTC track field&#x27;s descriptions instead (eg, the &#x27;quality&#x27; field has a different range when the data is sourced by GTC), &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- and the track reporting interval follows the GTC track reporting interval. (See the GTC track field &#x27;maxDelayInterval&#x27; to see more information on this.)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boundingRect">Filters tracks to a bounding rectangular region whose sides parallel the latitude and longitude axes.&lt;br&gt;(Decimal Degrees, North Positive / East Positive)&lt;/br&gt; Format is &amp;lt;upper lat&amp;gt;, &amp;lt;left lon&amp;gt;, &amp;lt;lower lat&amp;gt;, &amp;lt;right lon&amp;gt;&lt;br&gt;Example Value: 33.75,-118.50,33.25,-118.19 (optional)</param>
        /// <param name="expand">Allows links to be expanded inline.&lt;br&gt;Values: any combination of [detail, iff]&lt;br&gt;Example Value: detail,iff.&lt;br&gt;&lt;br&gt;Permissions Note: Users without RadarTracks permission may not ask for IFF data.&lt;br&gt; (optional)</param>
        /// <param name="name">Returns tracks that have a complete or partial name match. (optional)</param>
        /// <param name="sensorSrc">Returns tracks that have correlation with specific sensor type(s).&lt;br&gt;Values: Special combination of [Radar, AIS, IFF, DF, Generic, Video, Sonar, AIS-A, AIS-B, Air]&lt;br&gt;Note that &#x27;AIS&#x27; is a convenience for including both AIS Class A and AIS Class B tracks.&lt;br&gt;Several different operations are accepted:&lt;br&gt;- --Provide a single Sensor,&lt;br&gt;- --Provide &#x27;AND&#x27; or &#x27;OR&#x27; to require all of (AND) or one of (OR) sensors to be present in the track,&lt;br&gt;   (requires multiple sensors as arguments),&lt;br&gt;- --Provide &#x27;NOT&#x27; to exclude tracks having the sensor(s) present,&lt;br&gt;- --Provide &#x27;ONLY&#x27; to include tracks which match the given sensor.&lt;br&gt;   (requres a single sensor as argument),&lt;br&gt;Example 1: &#x27;Radar&#x27; returns Radar correlated tracks.&lt;br&gt;Example 2: &#x27;AND(Radar,AIS)&#x27; returns tracks correlated with both Radar AND any combo of AIS-A or AIS-B.&lt;br&gt;Example 3: &#x27;OR(Radar,AIS)&#x27; returns tracks correlated with Radar OR AIS-A OR AIS-B.&lt;br&gt;Example 4: &#x27;ONLY(AIS)&#x27; returns tracks correlated ONLY WITH AIS (any combo of AIS-A or AIS-B).&lt;br&gt;Example 5: &#x27;NOT(Radar,AIS)&#x27; returns tracks NOT correlated with Radar or AIS-A or AIS-B.&lt;br&gt;&lt;br&gt;Permissions Note: Users without RadarTracks permission will have all Radar-only tracks and radar data filtered out.&lt;br&gt; (optional)</param>
        /// <param name="updateSince">Returns tracks that have been updated since (greater than) a specific time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00Z specifies a year-month-day followed by 24-hour hours:minutes:seconds in GMT time&lt;br&gt;&lt;br&gt;Note that to support usability the pagination query is ignored with this argument; all matched items will be returned. (optional)</param>
        /// <param name="updateSrc">Returns tracks that have been updated with a specific sensor.&lt;br&gt;Value: [RP&amp;lt;unit_num&amp;gt;, AIS, GEN&amp;lt;unit_num&amp;gt;]&lt;br&gt;Example Values: RP4, RP04&lt;br&gt;Permissions Note: Users without RadarTracks permission will not be allowed to query for Radar (RP) type of tracks.&lt;br&gt; (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of TracksRestDto</returns>
        public async System.Threading.Tasks.Task<TracksRestDto> GetCompositeTrackTypesAsync (string boundingRect = null, string expand = null, string name = null, string sensorSrc = null, string updateSince = null, string updateSrc = null, int? page = null, int? size = null)
        {
             ApiResponse<TracksRestDto> localVarResponse = await GetCompositeTrackTypesAsyncWithHttpInfo(boundingRect, expand, name, sensorSrc, updateSince, updateSrc, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Tracks This is the primary means of searching the real-time tracks in the system. An array of tracks is returned, allowing a client to select the desired track for more detailed information.&lt;br&gt;&lt;br&gt;Please note that:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Permissions assigned to the user will automatically and implicitly limit what is retrieved (eg, &#x27;Radar&#x27; permission is required to see any Radar track data     and &#x27;BFT&#x27; permission is required to see data sourced from such)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Multiple query types (see &#x27;Parameter&#x27;) can be applied,&lt;br&gt;&lt;br&gt;&lt;b&gt;List of recently introduced fields:&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;isSourceGtc (6/2021):&lt;br&gt;Added to indicate that the source of the /tracks endpoint data is from the GTC Tracker, not the Composite Tracker. (Availability of data on the /tracks endpoint is provided as a convenience to users of this endpoint. There is generally only one Tracker type running within the system so this data would not otherwise be available.) However, there are several implications of this: &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- the data fields are to be interpreted based on the GTC track field&#x27;s descriptions instead (eg, the &#x27;quality&#x27; field has a different range when the data is sourced by GTC), &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- and the track reporting interval follows the GTC track reporting interval. (See the GTC track field &#x27;maxDelayInterval&#x27; to see more information on this.)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="boundingRect">Filters tracks to a bounding rectangular region whose sides parallel the latitude and longitude axes.&lt;br&gt;(Decimal Degrees, North Positive / East Positive)&lt;/br&gt; Format is &amp;lt;upper lat&amp;gt;, &amp;lt;left lon&amp;gt;, &amp;lt;lower lat&amp;gt;, &amp;lt;right lon&amp;gt;&lt;br&gt;Example Value: 33.75,-118.50,33.25,-118.19 (optional)</param>
        /// <param name="expand">Allows links to be expanded inline.&lt;br&gt;Values: any combination of [detail, iff]&lt;br&gt;Example Value: detail,iff.&lt;br&gt;&lt;br&gt;Permissions Note: Users without RadarTracks permission may not ask for IFF data.&lt;br&gt; (optional)</param>
        /// <param name="name">Returns tracks that have a complete or partial name match. (optional)</param>
        /// <param name="sensorSrc">Returns tracks that have correlation with specific sensor type(s).&lt;br&gt;Values: Special combination of [Radar, AIS, IFF, DF, Generic, Video, Sonar, AIS-A, AIS-B, Air]&lt;br&gt;Note that &#x27;AIS&#x27; is a convenience for including both AIS Class A and AIS Class B tracks.&lt;br&gt;Several different operations are accepted:&lt;br&gt;- --Provide a single Sensor,&lt;br&gt;- --Provide &#x27;AND&#x27; or &#x27;OR&#x27; to require all of (AND) or one of (OR) sensors to be present in the track,&lt;br&gt;   (requires multiple sensors as arguments),&lt;br&gt;- --Provide &#x27;NOT&#x27; to exclude tracks having the sensor(s) present,&lt;br&gt;- --Provide &#x27;ONLY&#x27; to include tracks which match the given sensor.&lt;br&gt;   (requres a single sensor as argument),&lt;br&gt;Example 1: &#x27;Radar&#x27; returns Radar correlated tracks.&lt;br&gt;Example 2: &#x27;AND(Radar,AIS)&#x27; returns tracks correlated with both Radar AND any combo of AIS-A or AIS-B.&lt;br&gt;Example 3: &#x27;OR(Radar,AIS)&#x27; returns tracks correlated with Radar OR AIS-A OR AIS-B.&lt;br&gt;Example 4: &#x27;ONLY(AIS)&#x27; returns tracks correlated ONLY WITH AIS (any combo of AIS-A or AIS-B).&lt;br&gt;Example 5: &#x27;NOT(Radar,AIS)&#x27; returns tracks NOT correlated with Radar or AIS-A or AIS-B.&lt;br&gt;&lt;br&gt;Permissions Note: Users without RadarTracks permission will have all Radar-only tracks and radar data filtered out.&lt;br&gt; (optional)</param>
        /// <param name="updateSince">Returns tracks that have been updated since (greater than) a specific time.&lt;br&gt;This is useful for clients that are continually polling the server.&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Example Value: 2019-03-14T14:55:00Z specifies a year-month-day followed by 24-hour hours:minutes:seconds in GMT time&lt;br&gt;&lt;br&gt;Note that to support usability the pagination query is ignored with this argument; all matched items will be returned. (optional)</param>
        /// <param name="updateSrc">Returns tracks that have been updated with a specific sensor.&lt;br&gt;Value: [RP&amp;lt;unit_num&amp;gt;, AIS, GEN&amp;lt;unit_num&amp;gt;]&lt;br&gt;Example Values: RP4, RP04&lt;br&gt;Permissions Note: Users without RadarTracks permission will not be allowed to query for Radar (RP) type of tracks.&lt;br&gt; (optional)</param>
        /// <param name="page">1-based page number (optional, default to 1)</param>
        /// <param name="size">size of each page (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (TracksRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TracksRestDto>> GetCompositeTrackTypesAsyncWithHttpInfo (string boundingRect = null, string expand = null, string name = null, string sensorSrc = null, string updateSince = null, string updateSrc = null, int? page = null, int? size = null)
        {

            var localVarPath = "/tracks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (boundingRect != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "boundingRect", boundingRect)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (sensorSrc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sensorSrc", sensorSrc)); // query parameter
            if (updateSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateSince", updateSince)); // query parameter
            if (updateSrc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateSrc", updateSrc)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCompositeTrackTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TracksRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TracksRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TracksRestDto)));
        }

        /// <summary>
        /// Get Track&#x27;s details This endpoint returns additional track details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>TrackDetailRestDto</returns>
        public TrackDetailRestDto GetTrackDetail (string id)
        {
             ApiResponse<TrackDetailRestDto> localVarResponse = GetTrackDetailWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Track&#x27;s details This endpoint returns additional track details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>ApiResponse of TrackDetailRestDto</returns>
        public ApiResponse< TrackDetailRestDto > GetTrackDetailWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetTrackDetail");

            var localVarPath = "/tracks/{id}/detail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTrackDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackDetailRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TrackDetailRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackDetailRestDto)));
        }

        /// <summary>
        /// Get Track&#x27;s details This endpoint returns additional track details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of TrackDetailRestDto</returns>
        public async System.Threading.Tasks.Task<TrackDetailRestDto> GetTrackDetailAsync (string id)
        {
             ApiResponse<TrackDetailRestDto> localVarResponse = await GetTrackDetailAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Track&#x27;s details This endpoint returns additional track details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of ApiResponse (TrackDetailRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrackDetailRestDto>> GetTrackDetailAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetTrackDetail");

            var localVarPath = "/tracks/{id}/detail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTrackDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackDetailRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TrackDetailRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackDetailRestDto)));
        }

        /// <summary>
        /// Get Track&#x27;s IFF information This endpoint returns additional information on IFF tracks. This information is only provided if IFF PCRPs are included in the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>TrackIffRestDto</returns>
        public TrackIffRestDto GetTrackIff (string id)
        {
             ApiResponse<TrackIffRestDto> localVarResponse = GetTrackIffWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Track&#x27;s IFF information This endpoint returns additional information on IFF tracks. This information is only provided if IFF PCRPs are included in the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>ApiResponse of TrackIffRestDto</returns>
        public ApiResponse< TrackIffRestDto > GetTrackIffWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetTrackIff");

            var localVarPath = "/tracks/{id}/iff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTrackIff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackIffRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TrackIffRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackIffRestDto)));
        }

        /// <summary>
        /// Get Track&#x27;s IFF information This endpoint returns additional information on IFF tracks. This information is only provided if IFF PCRPs are included in the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of TrackIffRestDto</returns>
        public async System.Threading.Tasks.Task<TrackIffRestDto> GetTrackIffAsync (string id)
        {
             ApiResponse<TrackIffRestDto> localVarResponse = await GetTrackIffAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Track&#x27;s IFF information This endpoint returns additional information on IFF tracks. This information is only provided if IFF PCRPs are included in the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of ApiResponse (TrackIffRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrackIffRestDto>> GetTrackIffAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetTrackIff");

            var localVarPath = "/tracks/{id}/iff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTrackIff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackIffRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TrackIffRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackIffRestDto)));
        }

        /// <summary>
        /// Create a Manual Track Create a manual track with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to create a track.&lt;br&gt;Note that only the latitude and longitude parameters are required; defaults are provided for others or capabilities are not provided.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;location&quot;: {&lt;br&gt;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;latitude&quot;: 33.73301,&lt;br&gt;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;longitude&quot;: -118.18548&lt;br&gt;  },&lt;br&gt; &quot;extTrkId&quot;: 101&lt;br&gt;}</param>
        /// <returns></returns>
        public void PostTrack (TrackPostParametersRestDto body)
        {
             PostTrackWithHttpInfo(body);
        }

        /// <summary>
        /// Create a Manual Track Create a manual track with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to create a track.&lt;br&gt;Note that only the latitude and longitude parameters are required; defaults are provided for others or capabilities are not provided.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;location&quot;: {&lt;br&gt;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;latitude&quot;: 33.73301,&lt;br&gt;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;longitude&quot;: -118.18548&lt;br&gt;  },&lt;br&gt; &quot;extTrkId&quot;: 101&lt;br&gt;}</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostTrackWithHttpInfo (TrackPostParametersRestDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PostTrack");

            var localVarPath = "/tracks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTrack", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create a Manual Track Create a manual track with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to create a track.&lt;br&gt;Note that only the latitude and longitude parameters are required; defaults are provided for others or capabilities are not provided.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;location&quot;: {&lt;br&gt;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;latitude&quot;: 33.73301,&lt;br&gt;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;longitude&quot;: -118.18548&lt;br&gt;  },&lt;br&gt; &quot;extTrkId&quot;: 101&lt;br&gt;}</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostTrackAsync (TrackPostParametersRestDto body)
        {
             await PostTrackAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create a Manual Track Create a manual track with the supplied parameters.&lt;br&gt;See the \&quot;Parameters\&quot; section for details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to create a track.&lt;br&gt;Note that only the latitude and longitude parameters are required; defaults are provided for others or capabilities are not provided.&lt;br&gt;A copy and pastable example of settings is:&lt;br&gt;{  &quot;location&quot;: {&lt;br&gt;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;latitude&quot;: 33.73301,&lt;br&gt;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;longitude&quot;: -118.18548&lt;br&gt;  },&lt;br&gt; &quot;extTrkId&quot;: 101&lt;br&gt;}</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostTrackAsyncWithHttpInfo (TrackPostParametersRestDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->PostTrack");

            var localVarPath = "/tracks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTrack", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update the Track Affiliation Update the track&#x27;s affiliation by changing the &#x27;affiliation&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s affiliation.&lt;br&gt;For example:&lt;br&gt;{  &quot;affiliation&quot;:&quot;Friendly&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns></returns>
        public void UpdateTrackAffiliation (TrackAffiliationRestDto body, string id)
        {
             UpdateTrackAffiliationWithHttpInfo(body, id);
        }

        /// <summary>
        /// Update the Track Affiliation Update the track&#x27;s affiliation by changing the &#x27;affiliation&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s affiliation.&lt;br&gt;For example:&lt;br&gt;{  &quot;affiliation&quot;:&quot;Friendly&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateTrackAffiliationWithHttpInfo (TrackAffiliationRestDto body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UpdateTrackAffiliation");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->UpdateTrackAffiliation");

            var localVarPath = "/tracks/{id}/affiliation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTrackAffiliation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update the Track Affiliation Update the track&#x27;s affiliation by changing the &#x27;affiliation&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s affiliation.&lt;br&gt;For example:&lt;br&gt;{  &quot;affiliation&quot;:&quot;Friendly&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTrackAffiliationAsync (TrackAffiliationRestDto body, string id)
        {
             await UpdateTrackAffiliationAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Update the Track Affiliation Update the track&#x27;s affiliation by changing the &#x27;affiliation&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s affiliation.&lt;br&gt;For example:&lt;br&gt;{  &quot;affiliation&quot;:&quot;Friendly&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTrackAffiliationAsyncWithHttpInfo (TrackAffiliationRestDto body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UpdateTrackAffiliation");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->UpdateTrackAffiliation");

            var localVarPath = "/tracks/{id}/affiliation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTrackAffiliation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update the Track Boarding Update the track&#x27;s boarding status by changing the &#x27;boarding&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s boarding status.&lt;br&gt;For example:&lt;br&gt;{  &quot;boarding&quot;:&quot;Interest&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns></returns>
        public void UpdateTrackBoarding (TrackBoardingRestDto body, string id)
        {
             UpdateTrackBoardingWithHttpInfo(body, id);
        }

        /// <summary>
        /// Update the Track Boarding Update the track&#x27;s boarding status by changing the &#x27;boarding&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s boarding status.&lt;br&gt;For example:&lt;br&gt;{  &quot;boarding&quot;:&quot;Interest&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateTrackBoardingWithHttpInfo (TrackBoardingRestDto body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UpdateTrackBoarding");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->UpdateTrackBoarding");

            var localVarPath = "/tracks/{id}/boarding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTrackBoarding", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update the Track Boarding Update the track&#x27;s boarding status by changing the &#x27;boarding&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s boarding status.&lt;br&gt;For example:&lt;br&gt;{  &quot;boarding&quot;:&quot;Interest&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTrackBoardingAsync (TrackBoardingRestDto body, string id)
        {
             await UpdateTrackBoardingAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Update the Track Boarding Update the track&#x27;s boarding status by changing the &#x27;boarding&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s boarding status.&lt;br&gt;For example:&lt;br&gt;{  &quot;boarding&quot;:&quot;Interest&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTrackBoardingAsyncWithHttpInfo (TrackBoardingRestDto body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UpdateTrackBoarding");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->UpdateTrackBoarding");

            var localVarPath = "/tracks/{id}/boarding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTrackBoarding", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update the Track Classification Update the track&#x27;s classification status by changing the &#x27;classification&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s classification status.&lt;br&gt;For example:&lt;br&gt;{  &quot;classification&quot;:&quot;Unknown&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns></returns>
        public void UpdateTrackClassification (TrackClassificationRestDto body, string id)
        {
             UpdateTrackClassificationWithHttpInfo(body, id);
        }

        /// <summary>
        /// Update the Track Classification Update the track&#x27;s classification status by changing the &#x27;classification&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s classification status.&lt;br&gt;For example:&lt;br&gt;{  &quot;classification&quot;:&quot;Unknown&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateTrackClassificationWithHttpInfo (TrackClassificationRestDto body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UpdateTrackClassification");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->UpdateTrackClassification");

            var localVarPath = "/tracks/{id}/classification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTrackClassification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update the Track Classification Update the track&#x27;s classification status by changing the &#x27;classification&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s classification status.&lt;br&gt;For example:&lt;br&gt;{  &quot;classification&quot;:&quot;Unknown&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTrackClassificationAsync (TrackClassificationRestDto body, string id)
        {
             await UpdateTrackClassificationAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Update the Track Classification Update the track&#x27;s classification status by changing the &#x27;classification&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s classification status.&lt;br&gt;For example:&lt;br&gt;{  &quot;classification&quot;:&quot;Unknown&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTrackClassificationAsyncWithHttpInfo (TrackClassificationRestDto body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UpdateTrackClassification");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->UpdateTrackClassification");

            var localVarPath = "/tracks/{id}/classification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTrackClassification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update the Track Kinematics Update the track&#x27;s kinematics by changing the &#x27;kinematics&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s kinematics.&lt;br&gt;For example:&lt;br&gt;{ &quot;course&quot;:90.0, &quot;speed&quot;:10.3 } </param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns></returns>
        public void UpdateTrackKinematics (KinematicsRestDto body, string id)
        {
             UpdateTrackKinematicsWithHttpInfo(body, id);
        }

        /// <summary>
        /// Update the Track Kinematics Update the track&#x27;s kinematics by changing the &#x27;kinematics&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s kinematics.&lt;br&gt;For example:&lt;br&gt;{ &quot;course&quot;:90.0, &quot;speed&quot;:10.3 } </param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateTrackKinematicsWithHttpInfo (KinematicsRestDto body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UpdateTrackKinematics");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->UpdateTrackKinematics");

            var localVarPath = "/tracks/{id}/kinematics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTrackKinematics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update the Track Kinematics Update the track&#x27;s kinematics by changing the &#x27;kinematics&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s kinematics.&lt;br&gt;For example:&lt;br&gt;{ &quot;course&quot;:90.0, &quot;speed&quot;:10.3 } </param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTrackKinematicsAsync (KinematicsRestDto body, string id)
        {
             await UpdateTrackKinematicsAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Update the Track Kinematics Update the track&#x27;s kinematics by changing the &#x27;kinematics&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s kinematics.&lt;br&gt;For example:&lt;br&gt;{ &quot;course&quot;:90.0, &quot;speed&quot;:10.3 } </param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTrackKinematicsAsyncWithHttpInfo (KinematicsRestDto body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UpdateTrackKinematics");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->UpdateTrackKinematics");

            var localVarPath = "/tracks/{id}/kinematics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTrackKinematics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update the Track Name Update the track name by changing the &#x27;name&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s name.&lt;br&gt;For example:&lt;br&gt;{  &quot;name&quot;: &quot;myTrack&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns></returns>
        public void UpdateTrackName (TrackNameRestDto body, string id)
        {
             UpdateTrackNameWithHttpInfo(body, id);
        }

        /// <summary>
        /// Update the Track Name Update the track name by changing the &#x27;name&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s name.&lt;br&gt;For example:&lt;br&gt;{  &quot;name&quot;: &quot;myTrack&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateTrackNameWithHttpInfo (TrackNameRestDto body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UpdateTrackName");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->UpdateTrackName");

            var localVarPath = "/tracks/{id}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTrackName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update the Track Name Update the track name by changing the &#x27;name&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s name.&lt;br&gt;For example:&lt;br&gt;{  &quot;name&quot;: &quot;myTrack&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTrackNameAsync (TrackNameRestDto body, string id)
        {
             await UpdateTrackNameAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Update the Track Name Update the track name by changing the &#x27;name&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s name.&lt;br&gt;For example:&lt;br&gt;{  &quot;name&quot;: &quot;myTrack&quot;}</param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTrackNameAsyncWithHttpInfo (TrackNameRestDto body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UpdateTrackName");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->UpdateTrackName");

            var localVarPath = "/tracks/{id}/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTrackName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update the Track Position Update the track position by changing the &#x27;position&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s position.&lt;br&gt;For example:&lt;br&gt;{ &quot;latitude&quot;:33.7, &quot;longitude&quot;:-118 } </param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns></returns>
        public void UpdateTrackPosition (GeoPosRestDto body, string id)
        {
             UpdateTrackPositionWithHttpInfo(body, id);
        }

        /// <summary>
        /// Update the Track Position Update the track position by changing the &#x27;position&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s position.&lt;br&gt;For example:&lt;br&gt;{ &quot;latitude&quot;:33.7, &quot;longitude&quot;:-118 } </param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateTrackPositionWithHttpInfo (GeoPosRestDto body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UpdateTrackPosition");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->UpdateTrackPosition");

            var localVarPath = "/tracks/{id}/position";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTrackPosition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update the Track Position Update the track position by changing the &#x27;position&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s position.&lt;br&gt;For example:&lt;br&gt;{ &quot;latitude&quot;:33.7, &quot;longitude&quot;:-118 } </param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTrackPositionAsync (GeoPosRestDto body, string id)
        {
             await UpdateTrackPositionAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Update the Track Position Update the track position by changing the &#x27;position&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameter to update a track&#x27;s position.&lt;br&gt;For example:&lt;br&gt;{ &quot;latitude&quot;:33.7, &quot;longitude&quot;:-118 } </param>
        /// <param name="id">the track id (e.g. &#x27;COM0100100&#x27;).&lt;br&gt;Format is &amp;lt;\&quot;COM\&quot;|\&quot;SYS\&quot;|\&quot;SEN\&quot;&amp;gt;&amp;lt;TSI&amp;gt; &amp;lt;CTI&amp;gt;&lt;br&gt;&lt;br&gt;The first three characters represent the current tracker mode,&lt;br&gt;&amp;nbsp;&amp;nbsp;COM&#x3D;Composite Tracker,&lt;br&gt;&amp;nbsp;&amp;nbsp;SYS&#x3D;System Tracker and&lt;br&gt;&amp;nbsp;&amp;nbsp;SEN &#x3D; Sensor Tracker.&lt;br&gt;The next 2 digits represent the Tracker Unit Number (TSI).&lt;br&gt;The last 5 digits represent the Local Track ID (CTI)&lt;br&gt;(and must be exactly 5 digits long to be valid).&lt;br&gt;&lt;br&gt;Example Value: &#x27;COM0100002&#x27; is from the Composite Tracker, uses 1 as the TSI and 2 as the CTI.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTrackPositionAsyncWithHttpInfo (GeoPosRestDto body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UpdateTrackPosition");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->UpdateTrackPosition");

            var localVarPath = "/tracks/{id}/position";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTrackPosition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
