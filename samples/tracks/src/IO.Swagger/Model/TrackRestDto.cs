/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Real-time track object
    /// </summary>
    [DataContract]
        public partial class TrackRestDto :  IEquatable<TrackRestDto>, IValidatableObject
    {
        /// <summary>
        /// Affiliation of this track
        /// </summary>
        /// <value>Affiliation of this track</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum AffiliationEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,
            /// <summary>
            /// Enum Friendly for value: Friendly
            /// </summary>
            [EnumMember(Value = "Friendly")]
            Friendly = 2,
            /// <summary>
            /// Enum Hostile for value: Hostile
            /// </summary>
            [EnumMember(Value = "Hostile")]
            Hostile = 3,
            /// <summary>
            /// Enum Neutral for value: Neutral
            /// </summary>
            [EnumMember(Value = "Neutral")]
            Neutral = 4,
            /// <summary>
            /// Enum Ownship for value: Ownship
            /// </summary>
            [EnumMember(Value = "Ownship")]
            Ownship = 5,
            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending = 6,
            /// <summary>
            /// Enum FriendlyAssumed for value: FriendlyAssumed
            /// </summary>
            [EnumMember(Value = "FriendlyAssumed")]
            FriendlyAssumed = 7,
            /// <summary>
            /// Enum HostileSuspected for value: HostileSuspected
            /// </summary>
            [EnumMember(Value = "HostileSuspected")]
            HostileSuspected = 8,
            /// <summary>
            /// Enum HostileJoker for value: HostileJoker
            /// </summary>
            [EnumMember(Value = "HostileJoker")]
            HostileJoker = 9,
            /// <summary>
            /// Enum HostileFaker for value: HostileFaker
            /// </summary>
            [EnumMember(Value = "HostileFaker")]
            HostileFaker = 10,
            /// <summary>
            /// Enum TrackOfInterest for value: TrackOfInterest
            /// </summary>
            [EnumMember(Value = "TrackOfInterest")]
            TrackOfInterest = 11        }
        /// <summary>
        /// Affiliation of this track
        /// </summary>
        /// <value>Affiliation of this track</value>
        [DataMember(Name="affiliation", EmitDefaultValue=false)]
        public AffiliationEnum? Affiliation { get; set; }
        /// <summary>
        /// Current boarding status of this track, used for Boarding Operations
        /// </summary>
        /// <value>Current boarding status of this track, used for Boarding Operations</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum BoardingEnum
        {
            /// <summary>
            /// Enum NoInterest for value: NoInterest
            /// </summary>
            [EnumMember(Value = "NoInterest")]
            NoInterest = 1,
            /// <summary>
            /// Enum Interest for value: Interest
            /// </summary>
            [EnumMember(Value = "Interest")]
            Interest = 2,
            /// <summary>
            /// Enum OnBoard for value: OnBoard
            /// </summary>
            [EnumMember(Value = "OnBoard")]
            OnBoard = 3,
            /// <summary>
            /// Enum Boarded for value: Boarded
            /// </summary>
            [EnumMember(Value = "Boarded")]
            Boarded = 4        }
        /// <summary>
        /// Current boarding status of this track, used for Boarding Operations
        /// </summary>
        /// <value>Current boarding status of this track, used for Boarding Operations</value>
        [DataMember(Name="boarding", EmitDefaultValue=false)]
        public BoardingEnum? Boarding { get; set; }
        /// <summary>
        /// Classification of this track
        /// </summary>
        /// <value>Classification of this track</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ClassificationEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,
            /// <summary>
            /// Enum SurfaceUnknown for value: SurfaceUnknown
            /// </summary>
            [EnumMember(Value = "SurfaceUnknown")]
            SurfaceUnknown = 2,
            /// <summary>
            /// Enum Merchant for value: Merchant
            /// </summary>
            [EnumMember(Value = "Merchant")]
            Merchant = 3,
            /// <summary>
            /// Enum Cargo for value: Cargo
            /// </summary>
            [EnumMember(Value = "Cargo")]
            Cargo = 4,
            /// <summary>
            /// Enum SearchCenter for value: SearchCenter
            /// </summary>
            [EnumMember(Value = "SearchCenter")]
            SearchCenter = 5,
            /// <summary>
            /// Enum Navy for value: Navy
            /// </summary>
            [EnumMember(Value = "Navy")]
            Navy = 6,
            /// <summary>
            /// Enum Tug for value: Tug
            /// </summary>
            [EnumMember(Value = "Tug")]
            Tug = 7,
            /// <summary>
            /// Enum Ferry for value: Ferry
            /// </summary>
            [EnumMember(Value = "Ferry")]
            Ferry = 8,
            /// <summary>
            /// Enum Passenger for value: Passenger
            /// </summary>
            [EnumMember(Value = "Passenger")]
            Passenger = 9,
            /// <summary>
            /// Enum CoastGuard for value: CoastGuard
            /// </summary>
            [EnumMember(Value = "CoastGuard")]
            CoastGuard = 10,
            /// <summary>
            /// Enum Hazmat for value: Hazmat
            /// </summary>
            [EnumMember(Value = "Hazmat")]
            Hazmat = 11,
            /// <summary>
            /// Enum Towing for value: Towing
            /// </summary>
            [EnumMember(Value = "Towing")]
            Towing = 12,
            /// <summary>
            /// Enum Fishing for value: Fishing
            /// </summary>
            [EnumMember(Value = "Fishing")]
            Fishing = 13,
            /// <summary>
            /// Enum Drifter for value: Drifter
            /// </summary>
            [EnumMember(Value = "Drifter")]
            Drifter = 14,
            /// <summary>
            /// Enum Dredge for value: Dredge
            /// </summary>
            [EnumMember(Value = "Dredge")]
            Dredge = 15,
            /// <summary>
            /// Enum Trawler for value: Trawler
            /// </summary>
            [EnumMember(Value = "Trawler")]
            Trawler = 16,
            /// <summary>
            /// Enum Leisure for value: Leisure
            /// </summary>
            [EnumMember(Value = "Leisure")]
            Leisure = 17,
            /// <summary>
            /// Enum Hovercraft for value: Hovercraft
            /// </summary>
            [EnumMember(Value = "Hovercraft")]
            Hovercraft = 18,
            /// <summary>
            /// Enum MarineLife for value: MarineLife
            /// </summary>
            [EnumMember(Value = "MarineLife")]
            MarineLife = 19,
            /// <summary>
            /// Enum Iceberg for value: Iceberg
            /// </summary>
            [EnumMember(Value = "Iceberg")]
            Iceberg = 20,
            /// <summary>
            /// Enum DitchedAircraft for value: DitchedAircraft
            /// </summary>
            [EnumMember(Value = "DitchedAircraft")]
            DitchedAircraft = 21,
            /// <summary>
            /// Enum ManInWater for value: ManInWater
            /// </summary>
            [EnumMember(Value = "ManInWater")]
            ManInWater = 22,
            /// <summary>
            /// Enum DistressedVessel for value: DistressedVessel
            /// </summary>
            [EnumMember(Value = "DistressedVessel")]
            DistressedVessel = 23,
            /// <summary>
            /// Enum OilPlatform for value: OilPlatform
            /// </summary>
            [EnumMember(Value = "OilPlatform")]
            OilPlatform = 24,
            /// <summary>
            /// Enum AirHelo for value: AirHelo
            /// </summary>
            [EnumMember(Value = "AirHelo")]
            AirHelo = 25,
            /// <summary>
            /// Enum AirFixedWing for value: AirFixedWing
            /// </summary>
            [EnumMember(Value = "AirFixedWing")]
            AirFixedWing = 26,
            /// <summary>
            /// Enum SubsurfaceUnknown for value: SubsurfaceUnknown
            /// </summary>
            [EnumMember(Value = "SubsurfaceUnknown")]
            SubsurfaceUnknown = 27,
            /// <summary>
            /// Enum AirUnknown for value: AirUnknown
            /// </summary>
            [EnumMember(Value = "AirUnknown")]
            AirUnknown = 28,
            /// <summary>
            /// Enum Ownship for value: Ownship
            /// </summary>
            [EnumMember(Value = "Ownship")]
            Ownship = 29,
            /// <summary>
            /// Enum Land for value: Land
            /// </summary>
            [EnumMember(Value = "Land")]
            Land = 30,
            /// <summary>
            /// Enum Buoy for value: Buoy
            /// </summary>
            [EnumMember(Value = "Buoy")]
            Buoy = 31,
            /// <summary>
            /// Enum AirUAV for value: AirUAV
            /// </summary>
            [EnumMember(Value = "AirUAV")]
            AirUAV = 32,
            /// <summary>
            /// Enum RigidHullInflatable for value: RigidHullInflatable
            /// </summary>
            [EnumMember(Value = "RigidHullInflatable")]
            RigidHullInflatable = 33,
            /// <summary>
            /// Enum Speedboat for value: Speedboat
            /// </summary>
            [EnumMember(Value = "Speedboat")]
            Speedboat = 34,
            /// <summary>
            /// Enum OilTanker for value: OilTanker
            /// </summary>
            [EnumMember(Value = "OilTanker")]
            OilTanker = 35        }
        /// <summary>
        /// Classification of this track
        /// </summary>
        /// <value>Classification of this track</value>
        [DataMember(Name="classification", EmitDefaultValue=false)]
        public ClassificationEnum? Classification { get; set; }
        /// <summary>
        /// current state of this track (&#x27;Dropped&#x27; means track has either been specifically dropped OR has not been updated by the tracker and will be removed from the system)
        /// </summary>
        /// <value>current state of this track (&#x27;Dropped&#x27; means track has either been specifically dropped OR has not been updated by the tracker and will be removed from the system)</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StateEnum
        {
            /// <summary>
            /// Enum NonSteady for value: NonSteady
            /// </summary>
            [EnumMember(Value = "NonSteady")]
            NonSteady = 1,
            /// <summary>
            /// Enum Steady for value: Steady
            /// </summary>
            [EnumMember(Value = "Steady")]
            Steady = 2,
            /// <summary>
            /// Enum SteadyCoasted for value: SteadyCoasted
            /// </summary>
            [EnumMember(Value = "SteadyCoasted")]
            SteadyCoasted = 3,
            /// <summary>
            /// Enum Parked for value: Parked
            /// </summary>
            [EnumMember(Value = "Parked")]
            Parked = 4,
            /// <summary>
            /// Enum Dropped for value: Dropped
            /// </summary>
            [EnumMember(Value = "Dropped")]
            Dropped = 5        }
        /// <summary>
        /// current state of this track (&#x27;Dropped&#x27; means track has either been specifically dropped OR has not been updated by the tracker and will be removed from the system)
        /// </summary>
        /// <value>current state of this track (&#x27;Dropped&#x27; means track has either been specifically dropped OR has not been updated by the tracker and will be removed from the system)</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackRestDto" /> class.
        /// </summary>
        /// <param name="affiliation">Affiliation of this track.</param>
        /// <param name="aisHeading">Heading of this track (degrees true) {Source AIS Transponder}.</param>
        /// <param name="aisNavStatus">aisNavStatus.</param>
        /// <param name="aisTurnRate">[-12.0 to 12.0]: Turn rate of this track (degrees per second) {Source AIS Transponder}.</param>
        /// <param name="aisUpdateDelta">[0 to 255]: delta time since the last AIS message was received from the track&#x27;s AIS transponder (seconds).</param>
        /// <param name="bearing">[0.0 to 359.9]: track&#x27;s bearing from the reference point (degrees true) {Landbased: w.r.t Tracker Position, Shipboard: w.r.t Ownship Position} (required).</param>
        /// <param name="boarding">Current boarding status of this track, used for Boarding Operations.</param>
        /// <param name="classification">Classification of this track.</param>
        /// <param name="details">details.</param>
        /// <param name="id">the resource identifier; the track id (like &#x27;COM0100100&#x27;).</param>
        /// <param name="iff">iff.</param>
        /// <param name="isSourceGtc">if this gets reported as &#x27;true&#x27; then it signifies the source of all tracks is from the GTC tracker instead of the Composite Tracker. (This field is absent means the same as &#x27;false&#x27;.) This means the data fields are to be interpreted based on the GTC track field&#x27;s descriptions and the track reporting interval follows the GTC track reporting interval. (See the GTC track field &#x27;maxDelayInterval&#x27; to see more information on this.) This is reported at the top-level enclosing object; ie, it is not reported for each single track if it&#x27;s a multi-track lookup.</param>
        /// <param name="kinematics">kinematics.</param>
        /// <param name="links">*method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;rel/detail&#x27; link references this track&#x27;s detailed information,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;rel/iff&#x27; link references this track&#x27;s IFF information, and exists if there is IFF information,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;rel/ship&#x27; link references this track&#x27;s associated Ship, and exists if one can be found in the system..</param>
        /// <param name="name">name of the track as set by AIS or user (required).</param>
        /// <param name="posUncertainty">area of positional uncertainty around this track (meters) (required).</param>
        /// <param name="position">position (required).</param>
        /// <param name="quality">[Auto Tracks: 0-36, Manual Tracks: 0-120]: quality of this track (required).</param>
        /// <param name="range">track&#x27;s range from the reference point (meters) {Landbased: w.r.t Tracker Position, Shipboard: w.r.t Ownship Position} (required).</param>
        /// <param name="sensorSrcs">String array representing all the sensors contributing to this track.</param>
        /// <param name="state">current state of this track (&#x27;Dropped&#x27; means track has either been specifically dropped OR has not been updated by the tracker and will be removed from the system) (required).</param>
        /// <param name="time">time this track was updated by the Composite Tracker (required).</param>
        /// <param name="trackIDsResetTime">this value is used to communicate if the Track Ids are reset and no longer related to their past Ids. This value gets changed if the Tracker is restarted or all tracks are dropped. Compare this with the previous track id reset time to know if the IDs represent the same track. This is reported at the top-level enclosing object; ie, it is not reported for each single track if it&#x27;s a multi-track lookup.</param>
        /// <param name="updatingSrc">[&#x27;NA&#x27; or &#x27;RP01&#x27;-&#x27;RP64&#x27; or &#x27;AIS&#x27; or &#x27;GEN01&#x27;-&#x27;GEN16&#x27;]: last updating source for this track.</param>
        public TrackRestDto(AffiliationEnum? affiliation = default(AffiliationEnum?), int? aisHeading = default(int?), AisNavStatusRestDto aisNavStatus = default(AisNavStatusRestDto), float? aisTurnRate = default(float?), int? aisUpdateDelta = default(int?), float? bearing = default(float?), BoardingEnum? boarding = default(BoardingEnum?), ClassificationEnum? classification = default(ClassificationEnum?), TrackDetailRestDto details = default(TrackDetailRestDto), string id = default(string), TrackIffRestDto iff = default(TrackIffRestDto), bool? isSourceGtc = default(bool?), KinematicsRestDto kinematics = default(KinematicsRestDto), List<Link> links = default(List<Link>), string name = default(string), int? posUncertainty = default(int?), GeoPosRestDto position = default(GeoPosRestDto), int? quality = default(int?), float? range = default(float?), List<string> sensorSrcs = default(List<string>), StateEnum state = default(StateEnum), string time = default(string), int? trackIDsResetTime = default(int?), string updatingSrc = default(string))
        {
            // to ensure "bearing" is required (not null)
            if (bearing == null)
            {
                throw new InvalidDataException("bearing is a required property for TrackRestDto and cannot be null");
            }
            else
            {
                this.Bearing = bearing;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for TrackRestDto and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "posUncertainty" is required (not null)
            if (posUncertainty == null)
            {
                throw new InvalidDataException("posUncertainty is a required property for TrackRestDto and cannot be null");
            }
            else
            {
                this.PosUncertainty = posUncertainty;
            }
            // to ensure "position" is required (not null)
            if (position == null)
            {
                throw new InvalidDataException("position is a required property for TrackRestDto and cannot be null");
            }
            else
            {
                this.Position = position;
            }
            // to ensure "quality" is required (not null)
            if (quality == null)
            {
                throw new InvalidDataException("quality is a required property for TrackRestDto and cannot be null");
            }
            else
            {
                this.Quality = quality;
            }
            // to ensure "range" is required (not null)
            if (range == null)
            {
                throw new InvalidDataException("range is a required property for TrackRestDto and cannot be null");
            }
            else
            {
                this.Range = range;
            }
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new InvalidDataException("state is a required property for TrackRestDto and cannot be null");
            }
            else
            {
                this.State = state;
            }
            // to ensure "time" is required (not null)
            if (time == null)
            {
                throw new InvalidDataException("time is a required property for TrackRestDto and cannot be null");
            }
            else
            {
                this.Time = time;
            }
            this.Affiliation = affiliation;
            this.AisHeading = aisHeading;
            this.AisNavStatus = aisNavStatus;
            this.AisTurnRate = aisTurnRate;
            this.AisUpdateDelta = aisUpdateDelta;
            this.Boarding = boarding;
            this.Classification = classification;
            this.Details = details;
            this.Id = id;
            this.Iff = iff;
            this.IsSourceGtc = isSourceGtc;
            this.Kinematics = kinematics;
            this.Links = links;
            this.SensorSrcs = sensorSrcs;
            this.TrackIDsResetTime = trackIDsResetTime;
            this.UpdatingSrc = updatingSrc;
        }
        

        /// <summary>
        /// Heading of this track (degrees true) {Source AIS Transponder}
        /// </summary>
        /// <value>Heading of this track (degrees true) {Source AIS Transponder}</value>
        [DataMember(Name="aisHeading", EmitDefaultValue=false)]
        public int? AisHeading { get; set; }

        /// <summary>
        /// Gets or Sets AisNavStatus
        /// </summary>
        [DataMember(Name="aisNavStatus", EmitDefaultValue=false)]
        public AisNavStatusRestDto AisNavStatus { get; set; }

        /// <summary>
        /// [-12.0 to 12.0]: Turn rate of this track (degrees per second) {Source AIS Transponder}
        /// </summary>
        /// <value>[-12.0 to 12.0]: Turn rate of this track (degrees per second) {Source AIS Transponder}</value>
        [DataMember(Name="aisTurnRate", EmitDefaultValue=false)]
        public float? AisTurnRate { get; set; }

        /// <summary>
        /// [0 to 255]: delta time since the last AIS message was received from the track&#x27;s AIS transponder (seconds)
        /// </summary>
        /// <value>[0 to 255]: delta time since the last AIS message was received from the track&#x27;s AIS transponder (seconds)</value>
        [DataMember(Name="aisUpdateDelta", EmitDefaultValue=false)]
        public int? AisUpdateDelta { get; set; }

        /// <summary>
        /// [0.0 to 359.9]: track&#x27;s bearing from the reference point (degrees true) {Landbased: w.r.t Tracker Position, Shipboard: w.r.t Ownship Position}
        /// </summary>
        /// <value>[0.0 to 359.9]: track&#x27;s bearing from the reference point (degrees true) {Landbased: w.r.t Tracker Position, Shipboard: w.r.t Ownship Position}</value>
        [DataMember(Name="bearing", EmitDefaultValue=false)]
        public float? Bearing { get; set; }



        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public TrackDetailRestDto Details { get; set; }

        /// <summary>
        /// the resource identifier; the track id (like &#x27;COM0100100&#x27;)
        /// </summary>
        /// <value>the resource identifier; the track id (like &#x27;COM0100100&#x27;)</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Iff
        /// </summary>
        [DataMember(Name="iff", EmitDefaultValue=false)]
        public TrackIffRestDto Iff { get; set; }

        /// <summary>
        /// if this gets reported as &#x27;true&#x27; then it signifies the source of all tracks is from the GTC tracker instead of the Composite Tracker. (This field is absent means the same as &#x27;false&#x27;.) This means the data fields are to be interpreted based on the GTC track field&#x27;s descriptions and the track reporting interval follows the GTC track reporting interval. (See the GTC track field &#x27;maxDelayInterval&#x27; to see more information on this.) This is reported at the top-level enclosing object; ie, it is not reported for each single track if it&#x27;s a multi-track lookup
        /// </summary>
        /// <value>if this gets reported as &#x27;true&#x27; then it signifies the source of all tracks is from the GTC tracker instead of the Composite Tracker. (This field is absent means the same as &#x27;false&#x27;.) This means the data fields are to be interpreted based on the GTC track field&#x27;s descriptions and the track reporting interval follows the GTC track reporting interval. (See the GTC track field &#x27;maxDelayInterval&#x27; to see more information on this.) This is reported at the top-level enclosing object; ie, it is not reported for each single track if it&#x27;s a multi-track lookup</value>
        [DataMember(Name="isSourceGtc", EmitDefaultValue=false)]
        public bool? IsSourceGtc { get; set; }

        /// <summary>
        /// Gets or Sets Kinematics
        /// </summary>
        [DataMember(Name="kinematics", EmitDefaultValue=false)]
        public KinematicsRestDto Kinematics { get; set; }

        /// <summary>
        /// *method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;rel/detail&#x27; link references this track&#x27;s detailed information,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;rel/iff&#x27; link references this track&#x27;s IFF information, and exists if there is IFF information,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;rel/ship&#x27; link references this track&#x27;s associated Ship, and exists if one can be found in the system.
        /// </summary>
        /// <value>*method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;rel/detail&#x27; link references this track&#x27;s detailed information,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;rel/iff&#x27; link references this track&#x27;s IFF information, and exists if there is IFF information,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;rel/ship&#x27; link references this track&#x27;s associated Ship, and exists if one can be found in the system.</value>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// name of the track as set by AIS or user
        /// </summary>
        /// <value>name of the track as set by AIS or user</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// area of positional uncertainty around this track (meters)
        /// </summary>
        /// <value>area of positional uncertainty around this track (meters)</value>
        [DataMember(Name="posUncertainty", EmitDefaultValue=false)]
        public int? PosUncertainty { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public GeoPosRestDto Position { get; set; }

        /// <summary>
        /// [Auto Tracks: 0-36, Manual Tracks: 0-120]: quality of this track
        /// </summary>
        /// <value>[Auto Tracks: 0-36, Manual Tracks: 0-120]: quality of this track</value>
        [DataMember(Name="quality", EmitDefaultValue=false)]
        public int? Quality { get; set; }

        /// <summary>
        /// track&#x27;s range from the reference point (meters) {Landbased: w.r.t Tracker Position, Shipboard: w.r.t Ownship Position}
        /// </summary>
        /// <value>track&#x27;s range from the reference point (meters) {Landbased: w.r.t Tracker Position, Shipboard: w.r.t Ownship Position}</value>
        [DataMember(Name="range", EmitDefaultValue=false)]
        public float? Range { get; set; }

        /// <summary>
        /// String array representing all the sensors contributing to this track
        /// </summary>
        /// <value>String array representing all the sensors contributing to this track</value>
        [DataMember(Name="sensorSrcs", EmitDefaultValue=false)]
        public List<string> SensorSrcs { get; set; }


        /// <summary>
        /// time this track was updated by the Composite Tracker
        /// </summary>
        /// <value>time this track was updated by the Composite Tracker</value>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public string Time { get; set; }

        /// <summary>
        /// this value is used to communicate if the Track Ids are reset and no longer related to their past Ids. This value gets changed if the Tracker is restarted or all tracks are dropped. Compare this with the previous track id reset time to know if the IDs represent the same track. This is reported at the top-level enclosing object; ie, it is not reported for each single track if it&#x27;s a multi-track lookup
        /// </summary>
        /// <value>this value is used to communicate if the Track Ids are reset and no longer related to their past Ids. This value gets changed if the Tracker is restarted or all tracks are dropped. Compare this with the previous track id reset time to know if the IDs represent the same track. This is reported at the top-level enclosing object; ie, it is not reported for each single track if it&#x27;s a multi-track lookup</value>
        [DataMember(Name="trackIDsResetTime", EmitDefaultValue=false)]
        public int? TrackIDsResetTime { get; set; }

        /// <summary>
        /// [&#x27;NA&#x27; or &#x27;RP01&#x27;-&#x27;RP64&#x27; or &#x27;AIS&#x27; or &#x27;GEN01&#x27;-&#x27;GEN16&#x27;]: last updating source for this track
        /// </summary>
        /// <value>[&#x27;NA&#x27; or &#x27;RP01&#x27;-&#x27;RP64&#x27; or &#x27;AIS&#x27; or &#x27;GEN01&#x27;-&#x27;GEN16&#x27;]: last updating source for this track</value>
        [DataMember(Name="updatingSrc", EmitDefaultValue=false)]
        public string UpdatingSrc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrackRestDto {\n");
            sb.Append("  Affiliation: ").Append(Affiliation).Append("\n");
            sb.Append("  AisHeading: ").Append(AisHeading).Append("\n");
            sb.Append("  AisNavStatus: ").Append(AisNavStatus).Append("\n");
            sb.Append("  AisTurnRate: ").Append(AisTurnRate).Append("\n");
            sb.Append("  AisUpdateDelta: ").Append(AisUpdateDelta).Append("\n");
            sb.Append("  Bearing: ").Append(Bearing).Append("\n");
            sb.Append("  Boarding: ").Append(Boarding).Append("\n");
            sb.Append("  Classification: ").Append(Classification).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Iff: ").Append(Iff).Append("\n");
            sb.Append("  IsSourceGtc: ").Append(IsSourceGtc).Append("\n");
            sb.Append("  Kinematics: ").Append(Kinematics).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PosUncertainty: ").Append(PosUncertainty).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Quality: ").Append(Quality).Append("\n");
            sb.Append("  Range: ").Append(Range).Append("\n");
            sb.Append("  SensorSrcs: ").Append(SensorSrcs).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  TrackIDsResetTime: ").Append(TrackIDsResetTime).Append("\n");
            sb.Append("  UpdatingSrc: ").Append(UpdatingSrc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrackRestDto);
        }

        /// <summary>
        /// Returns true if TrackRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of TrackRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrackRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Affiliation == input.Affiliation ||
                    (this.Affiliation != null &&
                    this.Affiliation.Equals(input.Affiliation))
                ) && 
                (
                    this.AisHeading == input.AisHeading ||
                    (this.AisHeading != null &&
                    this.AisHeading.Equals(input.AisHeading))
                ) && 
                (
                    this.AisNavStatus == input.AisNavStatus ||
                    (this.AisNavStatus != null &&
                    this.AisNavStatus.Equals(input.AisNavStatus))
                ) && 
                (
                    this.AisTurnRate == input.AisTurnRate ||
                    (this.AisTurnRate != null &&
                    this.AisTurnRate.Equals(input.AisTurnRate))
                ) && 
                (
                    this.AisUpdateDelta == input.AisUpdateDelta ||
                    (this.AisUpdateDelta != null &&
                    this.AisUpdateDelta.Equals(input.AisUpdateDelta))
                ) && 
                (
                    this.Bearing == input.Bearing ||
                    (this.Bearing != null &&
                    this.Bearing.Equals(input.Bearing))
                ) && 
                (
                    this.Boarding == input.Boarding ||
                    (this.Boarding != null &&
                    this.Boarding.Equals(input.Boarding))
                ) && 
                (
                    this.Classification == input.Classification ||
                    (this.Classification != null &&
                    this.Classification.Equals(input.Classification))
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Iff == input.Iff ||
                    (this.Iff != null &&
                    this.Iff.Equals(input.Iff))
                ) && 
                (
                    this.IsSourceGtc == input.IsSourceGtc ||
                    (this.IsSourceGtc != null &&
                    this.IsSourceGtc.Equals(input.IsSourceGtc))
                ) && 
                (
                    this.Kinematics == input.Kinematics ||
                    (this.Kinematics != null &&
                    this.Kinematics.Equals(input.Kinematics))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PosUncertainty == input.PosUncertainty ||
                    (this.PosUncertainty != null &&
                    this.PosUncertainty.Equals(input.PosUncertainty))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Quality == input.Quality ||
                    (this.Quality != null &&
                    this.Quality.Equals(input.Quality))
                ) && 
                (
                    this.Range == input.Range ||
                    (this.Range != null &&
                    this.Range.Equals(input.Range))
                ) && 
                (
                    this.SensorSrcs == input.SensorSrcs ||
                    this.SensorSrcs != null &&
                    input.SensorSrcs != null &&
                    this.SensorSrcs.SequenceEqual(input.SensorSrcs)
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.TrackIDsResetTime == input.TrackIDsResetTime ||
                    (this.TrackIDsResetTime != null &&
                    this.TrackIDsResetTime.Equals(input.TrackIDsResetTime))
                ) && 
                (
                    this.UpdatingSrc == input.UpdatingSrc ||
                    (this.UpdatingSrc != null &&
                    this.UpdatingSrc.Equals(input.UpdatingSrc))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Affiliation != null)
                    hashCode = hashCode * 59 + this.Affiliation.GetHashCode();
                if (this.AisHeading != null)
                    hashCode = hashCode * 59 + this.AisHeading.GetHashCode();
                if (this.AisNavStatus != null)
                    hashCode = hashCode * 59 + this.AisNavStatus.GetHashCode();
                if (this.AisTurnRate != null)
                    hashCode = hashCode * 59 + this.AisTurnRate.GetHashCode();
                if (this.AisUpdateDelta != null)
                    hashCode = hashCode * 59 + this.AisUpdateDelta.GetHashCode();
                if (this.Bearing != null)
                    hashCode = hashCode * 59 + this.Bearing.GetHashCode();
                if (this.Boarding != null)
                    hashCode = hashCode * 59 + this.Boarding.GetHashCode();
                if (this.Classification != null)
                    hashCode = hashCode * 59 + this.Classification.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Iff != null)
                    hashCode = hashCode * 59 + this.Iff.GetHashCode();
                if (this.IsSourceGtc != null)
                    hashCode = hashCode * 59 + this.IsSourceGtc.GetHashCode();
                if (this.Kinematics != null)
                    hashCode = hashCode * 59 + this.Kinematics.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PosUncertainty != null)
                    hashCode = hashCode * 59 + this.PosUncertainty.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Quality != null)
                    hashCode = hashCode * 59 + this.Quality.GetHashCode();
                if (this.Range != null)
                    hashCode = hashCode * 59 + this.Range.GetHashCode();
                if (this.SensorSrcs != null)
                    hashCode = hashCode * 59 + this.SensorSrcs.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                if (this.TrackIDsResetTime != null)
                    hashCode = hashCode * 59 + this.TrackIDsResetTime.GetHashCode();
                if (this.UpdatingSrc != null)
                    hashCode = hashCode * 59 + this.UpdatingSrc.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
