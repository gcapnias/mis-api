/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// IffModeRestDto
    /// </summary>
    [DataContract]
        public partial class IffModeRestDto :  IEquatable<IffModeRestDto>, IValidatableObject
    {
        /// <summary>
        /// The validity of the response, generated from the IFF Response processor
        /// </summary>
        /// <value>The validity of the response, generated from the IFF Response processor</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ValidityEnum
        {
            /// <summary>
            /// Enum Clear for value: Clear
            /// </summary>
            [EnumMember(Value = "Clear")]
            Clear = 1,
            /// <summary>
            /// Enum Interleaved for value: Interleaved
            /// </summary>
            [EnumMember(Value = "Interleaved")]
            Interleaved = 2,
            /// <summary>
            /// Enum CloselySpaced for value: CloselySpaced
            /// </summary>
            [EnumMember(Value = "CloselySpaced")]
            CloselySpaced = 3,
            /// <summary>
            /// Enum Garbled for value: Garbled
            /// </summary>
            [EnumMember(Value = "Garbled")]
            Garbled = 4,
            /// <summary>
            /// Enum Phantom for value: Phantom
            /// </summary>
            [EnumMember(Value = "Phantom")]
            Phantom = 5        }
        /// <summary>
        /// The validity of the response, generated from the IFF Response processor
        /// </summary>
        /// <value>The validity of the response, generated from the IFF Response processor</value>
        [DataMember(Name="validity", EmitDefaultValue=false)]
        public ValidityEnum Validity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IffModeRestDto" /> class.
        /// </summary>
        /// <param name="code">[0 to 4095]: The value of the IFF tracks&#x27; response to the interrogation (required).</param>
        /// <param name="validity">The validity of the response, generated from the IFF Response processor (required).</param>
        public IffModeRestDto(int? code = default(int?), ValidityEnum validity = default(ValidityEnum))
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new InvalidDataException("code is a required property for IffModeRestDto and cannot be null");
            }
            else
            {
                this.Code = code;
            }
            // to ensure "validity" is required (not null)
            if (validity == null)
            {
                throw new InvalidDataException("validity is a required property for IffModeRestDto and cannot be null");
            }
            else
            {
                this.Validity = validity;
            }
        }
        
        /// <summary>
        /// [0 to 4095]: The value of the IFF tracks&#x27; response to the interrogation
        /// </summary>
        /// <value>[0 to 4095]: The value of the IFF tracks&#x27; response to the interrogation</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public int? Code { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IffModeRestDto {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Validity: ").Append(Validity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IffModeRestDto);
        }

        /// <summary>
        /// Returns true if IffModeRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of IffModeRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IffModeRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Validity == input.Validity ||
                    (this.Validity != null &&
                    this.Validity.Equals(input.Validity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Validity != null)
                    hashCode = hashCode * 59 + this.Validity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
