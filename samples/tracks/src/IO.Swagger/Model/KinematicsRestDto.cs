/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Course and Speed
    /// </summary>
    [DataContract]
        public partial class KinematicsRestDto :  IEquatable<KinematicsRestDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KinematicsRestDto" /> class.
        /// </summary>
        /// <param name="course">[0.0 to 359.9]: if an AIS track this is sourced from AIS, else its estimated course from the Tracker (degrees true). If its an AIS track and the AIS data is &#x27;late&#x27;, then this is sourced from the Tracker.</param>
        /// <param name="speed">[0.0 to greater]: if an AIS track this is sourced from AIS, else its estimated speed from the Tracker (knots). If its an AIS track and the AIS data is &#x27;late&#x27;, then this is sourced from the Tracker.</param>
        public KinematicsRestDto(double? course = default(double?), double? speed = default(double?))
        {
            this.Course = course;
            this.Speed = speed;
        }
        
        /// <summary>
        /// [0.0 to 359.9]: if an AIS track this is sourced from AIS, else its estimated course from the Tracker (degrees true). If its an AIS track and the AIS data is &#x27;late&#x27;, then this is sourced from the Tracker
        /// </summary>
        /// <value>[0.0 to 359.9]: if an AIS track this is sourced from AIS, else its estimated course from the Tracker (degrees true). If its an AIS track and the AIS data is &#x27;late&#x27;, then this is sourced from the Tracker</value>
        [DataMember(Name="course", EmitDefaultValue=false)]
        public double? Course { get; set; }

        /// <summary>
        /// [0.0 to greater]: if an AIS track this is sourced from AIS, else its estimated speed from the Tracker (knots). If its an AIS track and the AIS data is &#x27;late&#x27;, then this is sourced from the Tracker
        /// </summary>
        /// <value>[0.0 to greater]: if an AIS track this is sourced from AIS, else its estimated speed from the Tracker (knots). If its an AIS track and the AIS data is &#x27;late&#x27;, then this is sourced from the Tracker</value>
        [DataMember(Name="speed", EmitDefaultValue=false)]
        public double? Speed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KinematicsRestDto {\n");
            sb.Append("  Course: ").Append(Course).Append("\n");
            sb.Append("  Speed: ").Append(Speed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KinematicsRestDto);
        }

        /// <summary>
        /// Returns true if KinematicsRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of KinematicsRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KinematicsRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Course == input.Course ||
                    (this.Course != null &&
                    this.Course.Equals(input.Course))
                ) && 
                (
                    this.Speed == input.Speed ||
                    (this.Speed != null &&
                    this.Speed.Equals(input.Speed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Course != null)
                    hashCode = hashCode * 59 + this.Course.GetHashCode();
                if (this.Speed != null)
                    hashCode = hashCode * 59 + this.Speed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
