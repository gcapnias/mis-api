/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TrackIffRestDto
    /// </summary>
    [DataContract]
        public partial class TrackIffRestDto :  IEquatable<TrackIffRestDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackIffRestDto" /> class.
        /// </summary>
        /// <param name="id">the resource identifier; the track id (like &#x27;COM0100100&#x27;).</param>
        /// <param name="links">*method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria.</param>
        /// <param name="mode1">mode1.</param>
        /// <param name="mode2">mode2.</param>
        /// <param name="mode3A">mode3A.</param>
        /// <param name="modeC">modeC.</param>
        public TrackIffRestDto(string id = default(string), List<Link> links = default(List<Link>), IffModeRestDto mode1 = default(IffModeRestDto), IffModeRestDto mode2 = default(IffModeRestDto), IffModeRestDto mode3A = default(IffModeRestDto), IffModeRestDto modeC = default(IffModeRestDto))
        {
            this.Id = id;
            this.Links = links;
            this.Mode1 = mode1;
            this.Mode2 = mode2;
            this.Mode3A = mode3A;
            this.ModeC = modeC;
        }
        
        /// <summary>
        /// the resource identifier; the track id (like &#x27;COM0100100&#x27;)
        /// </summary>
        /// <value>the resource identifier; the track id (like &#x27;COM0100100&#x27;)</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// *method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria
        /// </summary>
        /// <value>*method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria</value>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Gets or Sets Mode1
        /// </summary>
        [DataMember(Name="mode1", EmitDefaultValue=false)]
        public IffModeRestDto Mode1 { get; set; }

        /// <summary>
        /// Gets or Sets Mode2
        /// </summary>
        [DataMember(Name="mode2", EmitDefaultValue=false)]
        public IffModeRestDto Mode2 { get; set; }

        /// <summary>
        /// Gets or Sets Mode3A
        /// </summary>
        [DataMember(Name="mode3A", EmitDefaultValue=false)]
        public IffModeRestDto Mode3A { get; set; }

        /// <summary>
        /// Gets or Sets ModeC
        /// </summary>
        [DataMember(Name="modeC", EmitDefaultValue=false)]
        public IffModeRestDto ModeC { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrackIffRestDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Mode1: ").Append(Mode1).Append("\n");
            sb.Append("  Mode2: ").Append(Mode2).Append("\n");
            sb.Append("  Mode3A: ").Append(Mode3A).Append("\n");
            sb.Append("  ModeC: ").Append(ModeC).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrackIffRestDto);
        }

        /// <summary>
        /// Returns true if TrackIffRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of TrackIffRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrackIffRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.Mode1 == input.Mode1 ||
                    (this.Mode1 != null &&
                    this.Mode1.Equals(input.Mode1))
                ) && 
                (
                    this.Mode2 == input.Mode2 ||
                    (this.Mode2 != null &&
                    this.Mode2.Equals(input.Mode2))
                ) && 
                (
                    this.Mode3A == input.Mode3A ||
                    (this.Mode3A != null &&
                    this.Mode3A.Equals(input.Mode3A))
                ) && 
                (
                    this.ModeC == input.ModeC ||
                    (this.ModeC != null &&
                    this.ModeC.Equals(input.ModeC))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.Mode1 != null)
                    hashCode = hashCode * 59 + this.Mode1.GetHashCode();
                if (this.Mode2 != null)
                    hashCode = hashCode * 59 + this.Mode2.GetHashCode();
                if (this.Mode3A != null)
                    hashCode = hashCode * 59 + this.Mode3A.GetHashCode();
                if (this.ModeC != null)
                    hashCode = hashCode * 59 + this.ModeC.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
