/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AisShipTypeRestDto
    /// </summary>
    [DataContract]
        public partial class AisShipTypeRestDto :  IEquatable<AisShipTypeRestDto>, IValidatableObject
    {
        /// <summary>
        /// The ship category, derived from the first digit of the code, using Table 50 of ITU-R M.1371-4
        /// </summary>
        /// <value>The ship category, derived from the first digit of the code, using Table 50 of ITU-R M.1371-4</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CategoryTextEnum
        {
            /// <summary>
            /// Enum WIG for value: WIG
            /// </summary>
            [EnumMember(Value = "WIG")]
            WIG = 1,
            /// <summary>
            /// Enum Vessel for value:  Vessel
            /// </summary>
            [EnumMember(Value = " Vessel")]
            Vessel = 2,
            /// <summary>
            /// Enum HSC for value:  HSC
            /// </summary>
            [EnumMember(Value = " HSC")]
            HSC = 3,
            /// <summary>
            /// Enum SpecialCraft for value:  Special Craft
            /// </summary>
            [EnumMember(Value = " Special Craft")]
            SpecialCraft = 4,
            /// <summary>
            /// Enum PassengerShip for value:  Passenger Ship
            /// </summary>
            [EnumMember(Value = " Passenger Ship")]
            PassengerShip = 5,
            /// <summary>
            /// Enum CargoShip for value:  Cargo Ship
            /// </summary>
            [EnumMember(Value = " Cargo Ship")]
            CargoShip = 6,
            /// <summary>
            /// Enum Tanker for value:  Tanker
            /// </summary>
            [EnumMember(Value = " Tanker")]
            Tanker = 7,
            /// <summary>
            /// Enum Other for value:  Other
            /// </summary>
            [EnumMember(Value = " Other")]
            Other = 8        }
        /// <summary>
        /// The ship category, derived from the first digit of the code, using Table 50 of ITU-R M.1371-4
        /// </summary>
        /// <value>The ship category, derived from the first digit of the code, using Table 50 of ITU-R M.1371-4</value>
        [DataMember(Name="categoryText", EmitDefaultValue=false)]
        public CategoryTextEnum? CategoryText { get; set; }
        /// <summary>
        /// Additional ship type information, derived from the second digit of the code, using Table 50 of ITU-R M.1371-4
        /// </summary>
        /// <value>Additional ship type information, derived from the second digit of the code, using Table 50 of ITU-R M.1371-4</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum DetailTextEnum
        {
            /// <summary>
            /// Enum CargoCategoryA for value: Cargo Category A
            /// </summary>
            [EnumMember(Value = "Cargo Category A")]
            CargoCategoryA = 1,
            /// <summary>
            /// Enum CargoCategoryB for value:  Cargo Category B
            /// </summary>
            [EnumMember(Value = " Cargo Category B")]
            CargoCategoryB = 2,
            /// <summary>
            /// Enum CargoCategoryC for value:  Cargo Category C
            /// </summary>
            [EnumMember(Value = " Cargo Category C")]
            CargoCategoryC = 3,
            /// <summary>
            /// Enum CargoCategoryD for value:  Cargo Category D
            /// </summary>
            [EnumMember(Value = " Cargo Category D")]
            CargoCategoryD = 4,
            /// <summary>
            /// Enum Fishing for value:  Fishing
            /// </summary>
            [EnumMember(Value = " Fishing")]
            Fishing = 5,
            /// <summary>
            /// Enum Towing for value:  Towing
            /// </summary>
            [EnumMember(Value = " Towing")]
            Towing = 6,
            /// <summary>
            /// Enum TowingLarge for value:  Towing Large
            /// </summary>
            [EnumMember(Value = " Towing Large")]
            TowingLarge = 7,
            /// <summary>
            /// Enum UnderwaterOps for value:  Underwater Ops
            /// </summary>
            [EnumMember(Value = " Underwater Ops")]
            UnderwaterOps = 8,
            /// <summary>
            /// Enum DivingOps for value:  Diving Ops
            /// </summary>
            [EnumMember(Value = " Diving Ops")]
            DivingOps = 9,
            /// <summary>
            /// Enum MilitaryOps for value:  Military Ops
            /// </summary>
            [EnumMember(Value = " Military Ops")]
            MilitaryOps = 10,
            /// <summary>
            /// Enum Sailing for value:  Sailing
            /// </summary>
            [EnumMember(Value = " Sailing")]
            Sailing = 11,
            /// <summary>
            /// Enum Pleasure for value:  Pleasure
            /// </summary>
            [EnumMember(Value = " Pleasure")]
            Pleasure = 12,
            /// <summary>
            /// Enum Pilot for value:  Pilot
            /// </summary>
            [EnumMember(Value = " Pilot")]
            Pilot = 13,
            /// <summary>
            /// Enum SearchandRescue for value:  Search and Rescue
            /// </summary>
            [EnumMember(Value = " Search and Rescue")]
            SearchandRescue = 14,
            /// <summary>
            /// Enum Tug for value:  Tug
            /// </summary>
            [EnumMember(Value = " Tug")]
            Tug = 15,
            /// <summary>
            /// Enum PortTender for value:  Port Tender
            /// </summary>
            [EnumMember(Value = " Port Tender")]
            PortTender = 16,
            /// <summary>
            /// Enum AntipollutionEquip for value:  Antipollution Equip.
            /// </summary>
            [EnumMember(Value = " Antipollution Equip.")]
            AntipollutionEquip = 17,
            /// <summary>
            /// Enum LawEnforcement for value:  Law Enforcement
            /// </summary>
            [EnumMember(Value = " Law Enforcement")]
            LawEnforcement = 18,
            /// <summary>
            /// Enum LocalA for value:  Local A
            /// </summary>
            [EnumMember(Value = " Local A")]
            LocalA = 19,
            /// <summary>
            /// Enum LocalB for value:  Local B
            /// </summary>
            [EnumMember(Value = " Local B")]
            LocalB = 20,
            /// <summary>
            /// Enum MedicalTransport for value:  Medical Transport
            /// </summary>
            [EnumMember(Value = " Medical Transport")]
            MedicalTransport = 21,
            /// <summary>
            /// Enum NotArmedConflict for value:  Not Armed Conflict
            /// </summary>
            [EnumMember(Value = " Not Armed Conflict")]
            NotArmedConflict = 22        }
        /// <summary>
        /// Additional ship type information, derived from the second digit of the code, using Table 50 of ITU-R M.1371-4
        /// </summary>
        /// <value>Additional ship type information, derived from the second digit of the code, using Table 50 of ITU-R M.1371-4</value>
        [DataMember(Name="detailText", EmitDefaultValue=false)]
        public DetailTextEnum? DetailText { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AisShipTypeRestDto" /> class.
        /// </summary>
        /// <param name="categoryText">The ship category, derived from the first digit of the code, using Table 50 of ITU-R M.1371-4.</param>
        /// <param name="code">[0-255 (1-99 defined)]: describes the ship type and cargo, as defined in the AIS Specification ITU-R M.1371-4 (required).</param>
        /// <param name="detailText">Additional ship type information, derived from the second digit of the code, using Table 50 of ITU-R M.1371-4.</param>
        public AisShipTypeRestDto(CategoryTextEnum? categoryText = default(CategoryTextEnum?), int? code = default(int?), DetailTextEnum? detailText = default(DetailTextEnum?))
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new InvalidDataException("code is a required property for AisShipTypeRestDto and cannot be null");
            }
            else
            {
                this.Code = code;
            }
            this.CategoryText = categoryText;
            this.DetailText = detailText;
        }
        

        /// <summary>
        /// [0-255 (1-99 defined)]: describes the ship type and cargo, as defined in the AIS Specification ITU-R M.1371-4
        /// </summary>
        /// <value>[0-255 (1-99 defined)]: describes the ship type and cargo, as defined in the AIS Specification ITU-R M.1371-4</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public int? Code { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AisShipTypeRestDto {\n");
            sb.Append("  CategoryText: ").Append(CategoryText).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  DetailText: ").Append(DetailText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AisShipTypeRestDto);
        }

        /// <summary>
        /// Returns true if AisShipTypeRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of AisShipTypeRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AisShipTypeRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CategoryText == input.CategoryText ||
                    (this.CategoryText != null &&
                    this.CategoryText.Equals(input.CategoryText))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.DetailText == input.DetailText ||
                    (this.DetailText != null &&
                    this.DetailText.Equals(input.DetailText))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CategoryText != null)
                    hashCode = hashCode * 59 + this.CategoryText.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.DetailText != null)
                    hashCode = hashCode * 59 + this.DetailText.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
