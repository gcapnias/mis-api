/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TrackAffiliationRestDto
    /// </summary>
    [DataContract]
        public partial class TrackAffiliationRestDto :  IEquatable<TrackAffiliationRestDto>, IValidatableObject
    {
        /// <summary>
        /// Affiliation of this track
        /// </summary>
        /// <value>Affiliation of this track</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum AffiliationEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,
            /// <summary>
            /// Enum Friendly for value: Friendly
            /// </summary>
            [EnumMember(Value = "Friendly")]
            Friendly = 2,
            /// <summary>
            /// Enum Hostile for value: Hostile
            /// </summary>
            [EnumMember(Value = "Hostile")]
            Hostile = 3,
            /// <summary>
            /// Enum Neutral for value: Neutral
            /// </summary>
            [EnumMember(Value = "Neutral")]
            Neutral = 4,
            /// <summary>
            /// Enum Ownship for value: Ownship
            /// </summary>
            [EnumMember(Value = "Ownship")]
            Ownship = 5,
            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending = 6,
            /// <summary>
            /// Enum FriendlyAssumed for value: FriendlyAssumed
            /// </summary>
            [EnumMember(Value = "FriendlyAssumed")]
            FriendlyAssumed = 7,
            /// <summary>
            /// Enum HostileSuspected for value: HostileSuspected
            /// </summary>
            [EnumMember(Value = "HostileSuspected")]
            HostileSuspected = 8,
            /// <summary>
            /// Enum HostileJoker for value: HostileJoker
            /// </summary>
            [EnumMember(Value = "HostileJoker")]
            HostileJoker = 9,
            /// <summary>
            /// Enum HostileFaker for value: HostileFaker
            /// </summary>
            [EnumMember(Value = "HostileFaker")]
            HostileFaker = 10,
            /// <summary>
            /// Enum TrackOfInterest for value: TrackOfInterest
            /// </summary>
            [EnumMember(Value = "TrackOfInterest")]
            TrackOfInterest = 11        }
        /// <summary>
        /// Affiliation of this track
        /// </summary>
        /// <value>Affiliation of this track</value>
        [DataMember(Name="affiliation", EmitDefaultValue=false)]
        public AffiliationEnum? Affiliation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackAffiliationRestDto" /> class.
        /// </summary>
        /// <param name="affiliation">Affiliation of this track.</param>
        public TrackAffiliationRestDto(AffiliationEnum? affiliation = default(AffiliationEnum?))
        {
            this.Affiliation = affiliation;
        }
        

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrackAffiliationRestDto {\n");
            sb.Append("  Affiliation: ").Append(Affiliation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrackAffiliationRestDto);
        }

        /// <summary>
        /// Returns true if TrackAffiliationRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of TrackAffiliationRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrackAffiliationRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Affiliation == input.Affiliation ||
                    (this.Affiliation != null &&
                    this.Affiliation.Equals(input.Affiliation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Affiliation != null)
                    hashCode = hashCode * 59 + this.Affiliation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
