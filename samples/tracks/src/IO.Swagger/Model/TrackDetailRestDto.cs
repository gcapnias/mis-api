/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TrackDetailRestDto
    /// </summary>
    [DataContract]
        public partial class TrackDetailRestDto :  IEquatable<TrackDetailRestDto>, IValidatableObject
    {
        /// <summary>
        /// Represents how the track was initiated by the tracker, automatically through a graphic or manually by the operator (or AIS)
        /// </summary>
        /// <value>Represents how the track was initiated by the tracker, automatically through a graphic or manually by the operator (or AIS)</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum AcqModeEnum
        {
            /// <summary>
            /// Enum Auto for value: Auto
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto = 1,
            /// <summary>
            /// Enum Manual for value: Manual
            /// </summary>
            [EnumMember(Value = "Manual")]
            Manual = 2        }
        /// <summary>
        /// Represents how the track was initiated by the tracker, automatically through a graphic or manually by the operator (or AIS)
        /// </summary>
        /// <value>Represents how the track was initiated by the tracker, automatically through a graphic or manually by the operator (or AIS)</value>
        [DataMember(Name="acqMode", EmitDefaultValue=false)]
        public AcqModeEnum AcqMode { get; set; }
        /// <summary>
        /// Represents how the tracker is currently tracking this track, manual tracks are handled differently than auto tracks. {See Track Quality}
        /// </summary>
        /// <value>Represents how the tracker is currently tracking this track, manual tracks are handled differently than auto tracks. {See Track Quality}</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TrkModeEnum
        {
            /// <summary>
            /// Enum Auto for value: Auto
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto = 1,
            /// <summary>
            /// Enum Manual for value: Manual
            /// </summary>
            [EnumMember(Value = "Manual")]
            Manual = 2        }
        /// <summary>
        /// Represents how the tracker is currently tracking this track, manual tracks are handled differently than auto tracks. {See Track Quality}
        /// </summary>
        /// <value>Represents how the tracker is currently tracking this track, manual tracks are handled differently than auto tracks. {See Track Quality}</value>
        [DataMember(Name="trkMode", EmitDefaultValue=false)]
        public TrkModeEnum TrkMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackDetailRestDto" /> class.
        /// </summary>
        /// <param name="acqMode">Represents how the track was initiated by the tracker, automatically through a graphic or manually by the operator (or AIS) (required).</param>
        /// <param name="aisAntPos">aisAntPos.</param>
        /// <param name="aisEta">The Estimated Time of Arrival {Source AIS Transponder}.</param>
        /// <param name="aisFixingDevice">aisFixingDevice.</param>
        /// <param name="aisMaxDraft">[0 to 25.5]: Max draft (draught) of the track (meters) {Source AIS Transponder}.</param>
        /// <param name="aisTypeOfShip">aisTypeOfShip.</param>
        /// <param name="extTrkId">A track Id that was provided from an external source.</param>
        /// <param name="id">the resource identifier; the track id (like &#x27;COM0100100&#x27;).</param>
        /// <param name="imoNumber">IMO number.</param>
        /// <param name="links">*method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria.</param>
        /// <param name="mmsiNumber">MMSI number.</param>
        /// <param name="sizeType">sizeType.</param>
        /// <param name="specialIndicators">An array of strings representing special indicators about this track&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Interpretation:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;HighInterest / NmeaReportable: Legacy use&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BFT: Track is transmitting valid encrypted position reports&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ToiLocal: Track designated as a TOI from a local source&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ToiRemote: Track designated as a TOI from a remote source&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;DscDistress: Track sent a DSC Distressed Vessel signal.</param>
        /// <param name="trkMode">Represents how the tracker is currently tracking this track, manual tracks are handled differently than auto tracks. {See Track Quality} (required).</param>
        public TrackDetailRestDto(AcqModeEnum acqMode = default(AcqModeEnum), AisAntPosRestDto aisAntPos = default(AisAntPosRestDto), string aisEta = default(string), AisFixingDeviceRestDto aisFixingDevice = default(AisFixingDeviceRestDto), float? aisMaxDraft = default(float?), AisShipTypeRestDto aisTypeOfShip = default(AisShipTypeRestDto), int? extTrkId = default(int?), string id = default(string), int? imoNumber = default(int?), List<Link> links = default(List<Link>), int? mmsiNumber = default(int?), AisSizeRestDto sizeType = default(AisSizeRestDto), List<string> specialIndicators = default(List<string>), TrkModeEnum trkMode = default(TrkModeEnum))
        {
            // to ensure "acqMode" is required (not null)
            if (acqMode == null)
            {
                throw new InvalidDataException("acqMode is a required property for TrackDetailRestDto and cannot be null");
            }
            else
            {
                this.AcqMode = acqMode;
            }
            // to ensure "trkMode" is required (not null)
            if (trkMode == null)
            {
                throw new InvalidDataException("trkMode is a required property for TrackDetailRestDto and cannot be null");
            }
            else
            {
                this.TrkMode = trkMode;
            }
            this.AisAntPos = aisAntPos;
            this.AisEta = aisEta;
            this.AisFixingDevice = aisFixingDevice;
            this.AisMaxDraft = aisMaxDraft;
            this.AisTypeOfShip = aisTypeOfShip;
            this.ExtTrkId = extTrkId;
            this.Id = id;
            this.ImoNumber = imoNumber;
            this.Links = links;
            this.MmsiNumber = mmsiNumber;
            this.SizeType = sizeType;
            this.SpecialIndicators = specialIndicators;
        }
        

        /// <summary>
        /// Gets or Sets AisAntPos
        /// </summary>
        [DataMember(Name="aisAntPos", EmitDefaultValue=false)]
        public AisAntPosRestDto AisAntPos { get; set; }

        /// <summary>
        /// The Estimated Time of Arrival {Source AIS Transponder}
        /// </summary>
        /// <value>The Estimated Time of Arrival {Source AIS Transponder}</value>
        [DataMember(Name="aisEta", EmitDefaultValue=false)]
        public string AisEta { get; set; }

        /// <summary>
        /// Gets or Sets AisFixingDevice
        /// </summary>
        [DataMember(Name="aisFixingDevice", EmitDefaultValue=false)]
        public AisFixingDeviceRestDto AisFixingDevice { get; set; }

        /// <summary>
        /// [0 to 25.5]: Max draft (draught) of the track (meters) {Source AIS Transponder}
        /// </summary>
        /// <value>[0 to 25.5]: Max draft (draught) of the track (meters) {Source AIS Transponder}</value>
        [DataMember(Name="aisMaxDraft", EmitDefaultValue=false)]
        public float? AisMaxDraft { get; set; }

        /// <summary>
        /// Gets or Sets AisTypeOfShip
        /// </summary>
        [DataMember(Name="aisTypeOfShip", EmitDefaultValue=false)]
        public AisShipTypeRestDto AisTypeOfShip { get; set; }

        /// <summary>
        /// A track Id that was provided from an external source
        /// </summary>
        /// <value>A track Id that was provided from an external source</value>
        [DataMember(Name="extTrkId", EmitDefaultValue=false)]
        public int? ExtTrkId { get; set; }

        /// <summary>
        /// the resource identifier; the track id (like &#x27;COM0100100&#x27;)
        /// </summary>
        /// <value>the resource identifier; the track id (like &#x27;COM0100100&#x27;)</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// IMO number
        /// </summary>
        /// <value>IMO number</value>
        [DataMember(Name="imoNumber", EmitDefaultValue=false)]
        public int? ImoNumber { get; set; }

        /// <summary>
        /// *method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria
        /// </summary>
        /// <value>*method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria</value>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// MMSI number
        /// </summary>
        /// <value>MMSI number</value>
        [DataMember(Name="mmsiNumber", EmitDefaultValue=false)]
        public int? MmsiNumber { get; set; }

        /// <summary>
        /// Gets or Sets SizeType
        /// </summary>
        [DataMember(Name="sizeType", EmitDefaultValue=false)]
        public AisSizeRestDto SizeType { get; set; }

        /// <summary>
        /// An array of strings representing special indicators about this track&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Interpretation:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;HighInterest / NmeaReportable: Legacy use&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BFT: Track is transmitting valid encrypted position reports&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ToiLocal: Track designated as a TOI from a local source&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ToiRemote: Track designated as a TOI from a remote source&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;DscDistress: Track sent a DSC Distressed Vessel signal
        /// </summary>
        /// <value>An array of strings representing special indicators about this track&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Interpretation:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;HighInterest / NmeaReportable: Legacy use&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BFT: Track is transmitting valid encrypted position reports&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ToiLocal: Track designated as a TOI from a local source&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ToiRemote: Track designated as a TOI from a remote source&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;DscDistress: Track sent a DSC Distressed Vessel signal</value>
        [DataMember(Name="specialIndicators", EmitDefaultValue=false)]
        public List<string> SpecialIndicators { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrackDetailRestDto {\n");
            sb.Append("  AcqMode: ").Append(AcqMode).Append("\n");
            sb.Append("  AisAntPos: ").Append(AisAntPos).Append("\n");
            sb.Append("  AisEta: ").Append(AisEta).Append("\n");
            sb.Append("  AisFixingDevice: ").Append(AisFixingDevice).Append("\n");
            sb.Append("  AisMaxDraft: ").Append(AisMaxDraft).Append("\n");
            sb.Append("  AisTypeOfShip: ").Append(AisTypeOfShip).Append("\n");
            sb.Append("  ExtTrkId: ").Append(ExtTrkId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImoNumber: ").Append(ImoNumber).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  MmsiNumber: ").Append(MmsiNumber).Append("\n");
            sb.Append("  SizeType: ").Append(SizeType).Append("\n");
            sb.Append("  SpecialIndicators: ").Append(SpecialIndicators).Append("\n");
            sb.Append("  TrkMode: ").Append(TrkMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrackDetailRestDto);
        }

        /// <summary>
        /// Returns true if TrackDetailRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of TrackDetailRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrackDetailRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AcqMode == input.AcqMode ||
                    (this.AcqMode != null &&
                    this.AcqMode.Equals(input.AcqMode))
                ) && 
                (
                    this.AisAntPos == input.AisAntPos ||
                    (this.AisAntPos != null &&
                    this.AisAntPos.Equals(input.AisAntPos))
                ) && 
                (
                    this.AisEta == input.AisEta ||
                    (this.AisEta != null &&
                    this.AisEta.Equals(input.AisEta))
                ) && 
                (
                    this.AisFixingDevice == input.AisFixingDevice ||
                    (this.AisFixingDevice != null &&
                    this.AisFixingDevice.Equals(input.AisFixingDevice))
                ) && 
                (
                    this.AisMaxDraft == input.AisMaxDraft ||
                    (this.AisMaxDraft != null &&
                    this.AisMaxDraft.Equals(input.AisMaxDraft))
                ) && 
                (
                    this.AisTypeOfShip == input.AisTypeOfShip ||
                    (this.AisTypeOfShip != null &&
                    this.AisTypeOfShip.Equals(input.AisTypeOfShip))
                ) && 
                (
                    this.ExtTrkId == input.ExtTrkId ||
                    (this.ExtTrkId != null &&
                    this.ExtTrkId.Equals(input.ExtTrkId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ImoNumber == input.ImoNumber ||
                    (this.ImoNumber != null &&
                    this.ImoNumber.Equals(input.ImoNumber))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.MmsiNumber == input.MmsiNumber ||
                    (this.MmsiNumber != null &&
                    this.MmsiNumber.Equals(input.MmsiNumber))
                ) && 
                (
                    this.SizeType == input.SizeType ||
                    (this.SizeType != null &&
                    this.SizeType.Equals(input.SizeType))
                ) && 
                (
                    this.SpecialIndicators == input.SpecialIndicators ||
                    this.SpecialIndicators != null &&
                    input.SpecialIndicators != null &&
                    this.SpecialIndicators.SequenceEqual(input.SpecialIndicators)
                ) && 
                (
                    this.TrkMode == input.TrkMode ||
                    (this.TrkMode != null &&
                    this.TrkMode.Equals(input.TrkMode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AcqMode != null)
                    hashCode = hashCode * 59 + this.AcqMode.GetHashCode();
                if (this.AisAntPos != null)
                    hashCode = hashCode * 59 + this.AisAntPos.GetHashCode();
                if (this.AisEta != null)
                    hashCode = hashCode * 59 + this.AisEta.GetHashCode();
                if (this.AisFixingDevice != null)
                    hashCode = hashCode * 59 + this.AisFixingDevice.GetHashCode();
                if (this.AisMaxDraft != null)
                    hashCode = hashCode * 59 + this.AisMaxDraft.GetHashCode();
                if (this.AisTypeOfShip != null)
                    hashCode = hashCode * 59 + this.AisTypeOfShip.GetHashCode();
                if (this.ExtTrkId != null)
                    hashCode = hashCode * 59 + this.ExtTrkId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ImoNumber != null)
                    hashCode = hashCode * 59 + this.ImoNumber.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.MmsiNumber != null)
                    hashCode = hashCode * 59 + this.MmsiNumber.GetHashCode();
                if (this.SizeType != null)
                    hashCode = hashCode * 59 + this.SizeType.GetHashCode();
                if (this.SpecialIndicators != null)
                    hashCode = hashCode * 59 + this.SpecialIndicators.GetHashCode();
                if (this.TrkMode != null)
                    hashCode = hashCode * 59 + this.TrkMode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
