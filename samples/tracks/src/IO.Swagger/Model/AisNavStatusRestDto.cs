/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AisNavStatusRestDto
    /// </summary>
    [DataContract]
        public partial class AisNavStatusRestDto :  IEquatable<AisNavStatusRestDto>, IValidatableObject
    {
        /// <summary>
        /// A string representation of the numeric code, as defined in Table 45 of ITU-R M.1371-4
        /// </summary>
        /// <value>A string representation of the numeric code, as defined in Table 45 of ITU-R M.1371-4</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TextEnum
        {
            /// <summary>
            /// Enum UnderwayEngine for value: Underway Engine
            /// </summary>
            [EnumMember(Value = "Underway Engine")]
            UnderwayEngine = 1,
            /// <summary>
            /// Enum Anchored for value:  Anchored
            /// </summary>
            [EnumMember(Value = " Anchored")]
            Anchored = 2,
            /// <summary>
            /// Enum NotUnderCommand for value:  Not Under Command
            /// </summary>
            [EnumMember(Value = " Not Under Command")]
            NotUnderCommand = 3,
            /// <summary>
            /// Enum RestrictedManeuver for value:  Restricted Maneuver
            /// </summary>
            [EnumMember(Value = " Restricted Maneuver")]
            RestrictedManeuver = 4,
            /// <summary>
            /// Enum ConstrainedDraught for value:  Constrained Draught
            /// </summary>
            [EnumMember(Value = " Constrained Draught")]
            ConstrainedDraught = 5,
            /// <summary>
            /// Enum Moored for value:  Moored
            /// </summary>
            [EnumMember(Value = " Moored")]
            Moored = 6,
            /// <summary>
            /// Enum Aground for value:  Aground
            /// </summary>
            [EnumMember(Value = " Aground")]
            Aground = 7,
            /// <summary>
            /// Enum Fishing for value:  Fishing
            /// </summary>
            [EnumMember(Value = " Fishing")]
            Fishing = 8,
            /// <summary>
            /// Enum UnderwaySailing for value:  Underway Sailing
            /// </summary>
            [EnumMember(Value = " Underway Sailing")]
            UnderwaySailing = 9,
            /// <summary>
            /// Enum AISSART for value:  AIS SART
            /// </summary>
            [EnumMember(Value = " AIS SART")]
            AISSART = 10        }
        /// <summary>
        /// A string representation of the numeric code, as defined in Table 45 of ITU-R M.1371-4
        /// </summary>
        /// <value>A string representation of the numeric code, as defined in Table 45 of ITU-R M.1371-4</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public TextEnum? Text { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AisNavStatusRestDto" /> class.
        /// </summary>
        /// <param name="code">[0 to 8, 14]: describes the navigation status, as defined in the AIS Specification ITU-R M.1371-4 (required).</param>
        /// <param name="text">A string representation of the numeric code, as defined in Table 45 of ITU-R M.1371-4.</param>
        public AisNavStatusRestDto(int? code = default(int?), TextEnum? text = default(TextEnum?))
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new InvalidDataException("code is a required property for AisNavStatusRestDto and cannot be null");
            }
            else
            {
                this.Code = code;
            }
            this.Text = text;
        }
        
        /// <summary>
        /// [0 to 8, 14]: describes the navigation status, as defined in the AIS Specification ITU-R M.1371-4
        /// </summary>
        /// <value>[0 to 8, 14]: describes the navigation status, as defined in the AIS Specification ITU-R M.1371-4</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public int? Code { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AisNavStatusRestDto {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AisNavStatusRestDto);
        }

        /// <summary>
        /// Returns true if AisNavStatusRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of AisNavStatusRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AisNavStatusRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
