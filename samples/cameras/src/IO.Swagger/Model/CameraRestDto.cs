/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Real-time Camera status
    /// </summary>
    [DataContract]
        public partial class CameraRestDto :  IEquatable<CameraRestDto>, IValidatableObject
    {
        /// <summary>
        /// Type of camera
        /// </summary>
        /// <value>Type of camera</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CameraTypeEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,
            /// <summary>
            /// Enum CohuLegacy for value: CohuLegacy
            /// </summary>
            [EnumMember(Value = "CohuLegacy")]
            CohuLegacy = 2,
            /// <summary>
            /// Enum Pelco for value: Pelco
            /// </summary>
            [EnumMember(Value = "Pelco")]
            Pelco = 3,
            /// <summary>
            /// Enum Vumii for value: Vumii
            /// </summary>
            [EnumMember(Value = "Vumii")]
            Vumii = 4,
            /// <summary>
            /// Enum Bosch for value: Bosch
            /// </summary>
            [EnumMember(Value = "Bosch")]
            Bosch = 5,
            /// <summary>
            /// Enum Its for value: Its
            /// </summary>
            [EnumMember(Value = "Its")]
            Its = 6,
            /// <summary>
            /// Enum ItsLr for value: ItsLr
            /// </summary>
            [EnumMember(Value = "ItsLr")]
            ItsLr = 7,
            /// <summary>
            /// Enum Quickset for value: Quickset
            /// </summary>
            [EnumMember(Value = "Quickset")]
            Quickset = 8,
            /// <summary>
            /// Enum QuickIr for value: QuickIr
            /// </summary>
            [EnumMember(Value = "QuickIr")]
            QuickIr = 9,
            /// <summary>
            /// Enum CarbideLr for value: CarbideLr
            /// </summary>
            [EnumMember(Value = "CarbideLr")]
            CarbideLr = 10,
            /// <summary>
            /// Enum CarbideIr for value: CarbideIr
            /// </summary>
            [EnumMember(Value = "CarbideIr")]
            CarbideIr = 11,
            /// <summary>
            /// Enum MiniM3g for value: MiniM3g
            /// </summary>
            [EnumMember(Value = "MiniM3g")]
            MiniM3g = 12,
            /// <summary>
            /// Enum Emx for value: Emx
            /// </summary>
            [EnumMember(Value = "Emx")]
            Emx = 13,
            /// <summary>
            /// Enum Flir for value: Flir
            /// </summary>
            [EnumMember(Value = "Flir")]
            Flir = 14,
            /// <summary>
            /// Enum Sirvss for value: Sirvss
            /// </summary>
            [EnumMember(Value = "Sirvss")]
            Sirvss = 15,
            /// <summary>
            /// Enum Navigator for value: Navigator
            /// </summary>
            [EnumMember(Value = "Navigator")]
            Navigator = 16,
            /// <summary>
            /// Enum TspComm for value: TspComm
            /// </summary>
            [EnumMember(Value = "TspComm")]
            TspComm = 17,
            /// <summary>
            /// Enum Gvs1000 for value: Gvs1000
            /// </summary>
            [EnumMember(Value = "Gvs1000")]
            Gvs1000 = 18,
            /// <summary>
            /// Enum Eoss500 for value: Eoss500
            /// </summary>
            [EnumMember(Value = "Eoss500")]
            Eoss500 = 19,
            /// <summary>
            /// Enum Nexus for value: Nexus
            /// </summary>
            [EnumMember(Value = "Nexus")]
            Nexus = 20,
            /// <summary>
            /// Enum Lrad for value: Lrad
            /// </summary>
            [EnumMember(Value = "Lrad")]
            Lrad = 21,
            /// <summary>
            /// Enum Visca for value: Visca
            /// </summary>
            [EnumMember(Value = "Visca")]
            Visca = 22,
            /// <summary>
            /// Enum Wavcam for value: Wavcam
            /// </summary>
            [EnumMember(Value = "Wavcam")]
            Wavcam = 23,
            /// <summary>
            /// Enum IcxDefendIr for value: IcxDefendIr
            /// </summary>
            [EnumMember(Value = "IcxDefendIr")]
            IcxDefendIr = 24,
            /// <summary>
            /// Enum DwcPtz39x for value: DwcPtz39x
            /// </summary>
            [EnumMember(Value = "DwcPtz39x")]
            DwcPtz39x = 25,
            /// <summary>
            /// Enum IpPelco for value: IpPelco
            /// </summary>
            [EnumMember(Value = "IpPelco")]
            IpPelco = 26,
            /// <summary>
            /// Enum Cohu for value: Cohu
            /// </summary>
            [EnumMember(Value = "Cohu")]
            Cohu = 27,
            /// <summary>
            /// Enum Nighthawk for value: Nighthawk
            /// </summary>
            [EnumMember(Value = "Nighthawk")]
            Nighthawk = 28,
            /// <summary>
            /// Enum VideoOnly for value: VideoOnly
            /// </summary>
            [EnumMember(Value = "VideoOnly")]
            VideoOnly = 29,
            /// <summary>
            /// Enum Camera25 for value: Camera25
            /// </summary>
            [EnumMember(Value = "Camera25")]
            Camera25 = 30,
            /// <summary>
            /// Enum Camera26 for value: Camera26
            /// </summary>
            [EnumMember(Value = "Camera26")]
            Camera26 = 31,
            /// <summary>
            /// Enum Camera27 for value: Camera27
            /// </summary>
            [EnumMember(Value = "Camera27")]
            Camera27 = 32,
            /// <summary>
            /// Enum Camera28 for value: Camera28
            /// </summary>
            [EnumMember(Value = "Camera28")]
            Camera28 = 33,
            /// <summary>
            /// Enum Camera29 for value: Camera29
            /// </summary>
            [EnumMember(Value = "Camera29")]
            Camera29 = 34,
            /// <summary>
            /// Enum Camera30 for value: Camera30
            /// </summary>
            [EnumMember(Value = "Camera30")]
            Camera30 = 35,
            /// <summary>
            /// Enum Camera31 for value: Camera31
            /// </summary>
            [EnumMember(Value = "Camera31")]
            Camera31 = 36,
            /// <summary>
            /// Enum Camera32 for value: Camera32
            /// </summary>
            [EnumMember(Value = "Camera32")]
            Camera32 = 37        }
        /// <summary>
        /// Type of camera
        /// </summary>
        /// <value>Type of camera</value>
        [DataMember(Name="cameraType", EmitDefaultValue=false)]
        public CameraTypeEnum? CameraType { get; set; }
        /// <summary>
        /// tracking status of the camera
        /// </summary>
        /// <value>tracking status of the camera</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TrackingStatusEnum
        {
            /// <summary>
            /// Enum NotTracking for value: NotTracking
            /// </summary>
            [EnumMember(Value = "NotTracking")]
            NotTracking = 1,
            /// <summary>
            /// Enum AcquiringTrack for value: AcquiringTrack
            /// </summary>
            [EnumMember(Value = "AcquiringTrack")]
            AcquiringTrack = 2,
            /// <summary>
            /// Enum Steady for value: Steady
            /// </summary>
            [EnumMember(Value = "Steady")]
            Steady = 3,
            /// <summary>
            /// Enum Coasting for value: Coasting
            /// </summary>
            [EnumMember(Value = "Coasting")]
            Coasting = 4        }
        /// <summary>
        /// tracking status of the camera
        /// </summary>
        /// <value>tracking status of the camera</value>
        [DataMember(Name="trackingStatus", EmitDefaultValue=false)]
        public TrackingStatusEnum? TrackingStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CameraRestDto" /> class.
        /// </summary>
        /// <param name="cameraType">Type of camera.</param>
        /// <param name="fieldOfView">fieldOfView.</param>
        /// <param name="id">the resource identifier; the camera id.</param>
        /// <param name="isAutoTiltOn">[false, true]: boolean representing whether the auto-tilt feature is on.</param>
        /// <param name="isPowerOn">[false, true]: boolean representing the state of the camera&#x27;s power; not shown if server is offline (value is unknown and not applicable).</param>
        /// <param name="isServerOffline">[true]: boolean representing if the camera server is offline (else the field is not shown).</param>
        /// <param name="links">*method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;rel/track&#x27; link references the track this camera is following, if any..</param>
        /// <param name="name">given name of this camera.</param>
        /// <param name="pan">[0.0 to 359.99]: camera&#x27;s bearing direction in degrees (0 degrees is true north).</param>
        /// <param name="position">position.</param>
        /// <param name="tilt">[0.0 to 180.0]: camera&#x27;s tilt in degrees (90 degrees at the horizontal, 0 degrees is fully tilted down).</param>
        /// <param name="trackingStatus">tracking status of the camera.</param>
        /// <param name="zoom">[0.0 to 100.0]: camera&#x27;s zoom percentage.</param>
        public CameraRestDto(CameraTypeEnum? cameraType = default(CameraTypeEnum?), BearingFieldOfViewRestDto fieldOfView = default(BearingFieldOfViewRestDto), byte[] id = default(byte[]), bool? isAutoTiltOn = default(bool?), bool? isPowerOn = default(bool?), bool? isServerOffline = default(bool?), List<Link> links = default(List<Link>), string name = default(string), float? pan = default(float?), GeoPosRestDto position = default(GeoPosRestDto), float? tilt = default(float?), TrackingStatusEnum? trackingStatus = default(TrackingStatusEnum?), float? zoom = default(float?))
        {
            this.CameraType = cameraType;
            this.FieldOfView = fieldOfView;
            this.Id = id;
            this.IsAutoTiltOn = isAutoTiltOn;
            this.IsPowerOn = isPowerOn;
            this.IsServerOffline = isServerOffline;
            this.Links = links;
            this.Name = name;
            this.Pan = pan;
            this.Position = position;
            this.Tilt = tilt;
            this.TrackingStatus = trackingStatus;
            this.Zoom = zoom;
        }
        

        /// <summary>
        /// Gets or Sets FieldOfView
        /// </summary>
        [DataMember(Name="fieldOfView", EmitDefaultValue=false)]
        public BearingFieldOfViewRestDto FieldOfView { get; set; }

        /// <summary>
        /// the resource identifier; the camera id
        /// </summary>
        /// <value>the resource identifier; the camera id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public byte[] Id { get; set; }

        /// <summary>
        /// [false, true]: boolean representing whether the auto-tilt feature is on
        /// </summary>
        /// <value>[false, true]: boolean representing whether the auto-tilt feature is on</value>
        [DataMember(Name="isAutoTiltOn", EmitDefaultValue=false)]
        public bool? IsAutoTiltOn { get; set; }

        /// <summary>
        /// [false, true]: boolean representing the state of the camera&#x27;s power; not shown if server is offline (value is unknown and not applicable)
        /// </summary>
        /// <value>[false, true]: boolean representing the state of the camera&#x27;s power; not shown if server is offline (value is unknown and not applicable)</value>
        [DataMember(Name="isPowerOn", EmitDefaultValue=false)]
        public bool? IsPowerOn { get; set; }

        /// <summary>
        /// [true]: boolean representing if the camera server is offline (else the field is not shown)
        /// </summary>
        /// <value>[true]: boolean representing if the camera server is offline (else the field is not shown)</value>
        [DataMember(Name="isServerOffline", EmitDefaultValue=false)]
        public bool? IsServerOffline { get; set; }

        /// <summary>
        /// *method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;rel/track&#x27; link references the track this camera is following, if any.
        /// </summary>
        /// <value>*method&#x3D;GET*Provides link relations as URLs using the REST &#x27;hateoas&#x27; convention (for REST delivered data).&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;self&#x27; link references this rest object, including any specified query criteria,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;The &#x27;rel/track&#x27; link references the track this camera is following, if any.</value>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// given name of this camera
        /// </summary>
        /// <value>given name of this camera</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// [0.0 to 359.99]: camera&#x27;s bearing direction in degrees (0 degrees is true north)
        /// </summary>
        /// <value>[0.0 to 359.99]: camera&#x27;s bearing direction in degrees (0 degrees is true north)</value>
        [DataMember(Name="pan", EmitDefaultValue=false)]
        public float? Pan { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public GeoPosRestDto Position { get; set; }

        /// <summary>
        /// [0.0 to 180.0]: camera&#x27;s tilt in degrees (90 degrees at the horizontal, 0 degrees is fully tilted down)
        /// </summary>
        /// <value>[0.0 to 180.0]: camera&#x27;s tilt in degrees (90 degrees at the horizontal, 0 degrees is fully tilted down)</value>
        [DataMember(Name="tilt", EmitDefaultValue=false)]
        public float? Tilt { get; set; }


        /// <summary>
        /// [0.0 to 100.0]: camera&#x27;s zoom percentage
        /// </summary>
        /// <value>[0.0 to 100.0]: camera&#x27;s zoom percentage</value>
        [DataMember(Name="zoom", EmitDefaultValue=false)]
        public float? Zoom { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CameraRestDto {\n");
            sb.Append("  CameraType: ").Append(CameraType).Append("\n");
            sb.Append("  FieldOfView: ").Append(FieldOfView).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsAutoTiltOn: ").Append(IsAutoTiltOn).Append("\n");
            sb.Append("  IsPowerOn: ").Append(IsPowerOn).Append("\n");
            sb.Append("  IsServerOffline: ").Append(IsServerOffline).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Pan: ").Append(Pan).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Tilt: ").Append(Tilt).Append("\n");
            sb.Append("  TrackingStatus: ").Append(TrackingStatus).Append("\n");
            sb.Append("  Zoom: ").Append(Zoom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CameraRestDto);
        }

        /// <summary>
        /// Returns true if CameraRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CameraRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CameraRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CameraType == input.CameraType ||
                    (this.CameraType != null &&
                    this.CameraType.Equals(input.CameraType))
                ) && 
                (
                    this.FieldOfView == input.FieldOfView ||
                    (this.FieldOfView != null &&
                    this.FieldOfView.Equals(input.FieldOfView))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsAutoTiltOn == input.IsAutoTiltOn ||
                    (this.IsAutoTiltOn != null &&
                    this.IsAutoTiltOn.Equals(input.IsAutoTiltOn))
                ) && 
                (
                    this.IsPowerOn == input.IsPowerOn ||
                    (this.IsPowerOn != null &&
                    this.IsPowerOn.Equals(input.IsPowerOn))
                ) && 
                (
                    this.IsServerOffline == input.IsServerOffline ||
                    (this.IsServerOffline != null &&
                    this.IsServerOffline.Equals(input.IsServerOffline))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Pan == input.Pan ||
                    (this.Pan != null &&
                    this.Pan.Equals(input.Pan))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Tilt == input.Tilt ||
                    (this.Tilt != null &&
                    this.Tilt.Equals(input.Tilt))
                ) && 
                (
                    this.TrackingStatus == input.TrackingStatus ||
                    (this.TrackingStatus != null &&
                    this.TrackingStatus.Equals(input.TrackingStatus))
                ) && 
                (
                    this.Zoom == input.Zoom ||
                    (this.Zoom != null &&
                    this.Zoom.Equals(input.Zoom))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CameraType != null)
                    hashCode = hashCode * 59 + this.CameraType.GetHashCode();
                if (this.FieldOfView != null)
                    hashCode = hashCode * 59 + this.FieldOfView.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsAutoTiltOn != null)
                    hashCode = hashCode * 59 + this.IsAutoTiltOn.GetHashCode();
                if (this.IsPowerOn != null)
                    hashCode = hashCode * 59 + this.IsPowerOn.GetHashCode();
                if (this.IsServerOffline != null)
                    hashCode = hashCode * 59 + this.IsServerOffline.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Pan != null)
                    hashCode = hashCode * 59 + this.Pan.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Tilt != null)
                    hashCode = hashCode * 59 + this.Tilt.GetHashCode();
                if (this.TrackingStatus != null)
                    hashCode = hashCode * 59 + this.TrackingStatus.GetHashCode();
                if (this.Zoom != null)
                    hashCode = hashCode * 59 + this.Zoom.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
