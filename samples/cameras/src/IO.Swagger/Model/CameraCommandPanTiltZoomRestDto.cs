/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// dto description not used
    /// </summary>
    [DataContract]
        public partial class CameraCommandPanTiltZoomRestDto :  IEquatable<CameraCommandPanTiltZoomRestDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CameraCommandPanTiltZoomRestDto" /> class.
        /// </summary>
        /// <param name="pan">[0.0 to 359.99]: camera&#x27;s bearing direction in degrees (0 degrees is true north).</param>
        /// <param name="tilt">[0.0 to 180.0]: camera&#x27;s tilt in degrees (90 degrees at the horizontal, 0 degrees is fully tilted down).</param>
        /// <param name="zoom">[0.0 to 100.0]: camera&#x27;s zoom percentage.</param>
        public CameraCommandPanTiltZoomRestDto(double? pan = default(double?), double? tilt = default(double?), double? zoom = default(double?))
        {
            this.Pan = pan;
            this.Tilt = tilt;
            this.Zoom = zoom;
        }
        
        /// <summary>
        /// [0.0 to 359.99]: camera&#x27;s bearing direction in degrees (0 degrees is true north)
        /// </summary>
        /// <value>[0.0 to 359.99]: camera&#x27;s bearing direction in degrees (0 degrees is true north)</value>
        [DataMember(Name="pan", EmitDefaultValue=false)]
        public double? Pan { get; set; }

        /// <summary>
        /// [0.0 to 180.0]: camera&#x27;s tilt in degrees (90 degrees at the horizontal, 0 degrees is fully tilted down)
        /// </summary>
        /// <value>[0.0 to 180.0]: camera&#x27;s tilt in degrees (90 degrees at the horizontal, 0 degrees is fully tilted down)</value>
        [DataMember(Name="tilt", EmitDefaultValue=false)]
        public double? Tilt { get; set; }

        /// <summary>
        /// [0.0 to 100.0]: camera&#x27;s zoom percentage
        /// </summary>
        /// <value>[0.0 to 100.0]: camera&#x27;s zoom percentage</value>
        [DataMember(Name="zoom", EmitDefaultValue=false)]
        public double? Zoom { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CameraCommandPanTiltZoomRestDto {\n");
            sb.Append("  Pan: ").Append(Pan).Append("\n");
            sb.Append("  Tilt: ").Append(Tilt).Append("\n");
            sb.Append("  Zoom: ").Append(Zoom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CameraCommandPanTiltZoomRestDto);
        }

        /// <summary>
        /// Returns true if CameraCommandPanTiltZoomRestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CameraCommandPanTiltZoomRestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CameraCommandPanTiltZoomRestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Pan == input.Pan ||
                    (this.Pan != null &&
                    this.Pan.Equals(input.Pan))
                ) && 
                (
                    this.Tilt == input.Tilt ||
                    (this.Tilt != null &&
                    this.Tilt.Equals(input.Tilt))
                ) && 
                (
                    this.Zoom == input.Zoom ||
                    (this.Zoom != null &&
                    this.Zoom.Equals(input.Zoom))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Pan != null)
                    hashCode = hashCode * 59 + this.Pan.GetHashCode();
                if (this.Tilt != null)
                    hashCode = hashCode * 59 + this.Tilt.GetHashCode();
                if (this.Zoom != null)
                    hashCode = hashCode * 59 + this.Zoom.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
