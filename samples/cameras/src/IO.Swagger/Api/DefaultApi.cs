/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Assign Track to Camera
        /// </summary>
        /// <remarks>
        /// Assign the camera to a track by changing the &#x27;trackToAssign&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Track to assign to the camera.&lt;br&gt;For example:&lt;br&gt;{  &quot;trackToAssign&quot;: &quot;COM0100002&quot;}</param>
        /// <param name="id">the camera id</param>
        /// <returns></returns>
        void CommandAssignTrack (CameraCommandAssignTrackRestDto body, byte[] id);

        /// <summary>
        /// Assign Track to Camera
        /// </summary>
        /// <remarks>
        /// Assign the camera to a track by changing the &#x27;trackToAssign&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Track to assign to the camera.&lt;br&gt;For example:&lt;br&gt;{  &quot;trackToAssign&quot;: &quot;COM0100002&quot;}</param>
        /// <param name="id">the camera id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CommandAssignTrackWithHttpInfo (CameraCommandAssignTrackRestDto body, byte[] id);
        /// <summary>
        /// Deassign Track from Camera
        /// </summary>
        /// <remarks>
        /// This command will deassign any tracks which might currently be assigned to a camera
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the camera id</param>
        /// <returns></returns>
        void CommandDeassignTrack (byte[] id);

        /// <summary>
        /// Deassign Track from Camera
        /// </summary>
        /// <remarks>
        /// This command will deassign any tracks which might currently be assigned to a camera
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the camera id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CommandDeassignTrackWithHttpInfo (byte[] id);
        /// <summary>
        /// Apply a Generic command
        /// </summary>
        /// <remarks>
        /// Command the camera via a &#x27;Generic&#x27; command.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Generic Command data to command the camera.&lt;br&gt;For example:&lt;br&gt;{ &quot;command&quot; : &quot;PanTilt&quot;, &quot;value1&quot; : 7.75, &quot;value2&quot; : 89.5 }</param>
        /// <param name="id">the camera id</param>
        /// <returns></returns>
        void CommandGenericCommand (CameraCommandGenericRestDto body, byte[] id);

        /// <summary>
        /// Apply a Generic command
        /// </summary>
        /// <remarks>
        /// Command the camera via a &#x27;Generic&#x27; command.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Generic Command data to command the camera.&lt;br&gt;For example:&lt;br&gt;{ &quot;command&quot; : &quot;PanTilt&quot;, &quot;value1&quot; : 7.75, &quot;value2&quot; : 89.5 }</param>
        /// <param name="id">the camera id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CommandGenericCommandWithHttpInfo (CameraCommandGenericRestDto body, byte[] id);
        /// <summary>
        /// Point Camera to a Location
        /// </summary>
        /// <remarks>
        /// Supply the latitude and longitude in which to point the camera.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Latitude and longitude in which to point the camera.&lt;br&gt;For example:&lt;br&gt;{ &quot;gotoPosition&quot;: {  &quot;latitude&quot;:33,   &quot;longitude&quot;:-180} }</param>
        /// <param name="id">the camera id</param>
        /// <returns></returns>
        void CommandGoToPosition (CameraCommandPositionRestDto body, byte[] id);

        /// <summary>
        /// Point Camera to a Location
        /// </summary>
        /// <remarks>
        /// Supply the latitude and longitude in which to point the camera.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Latitude and longitude in which to point the camera.&lt;br&gt;For example:&lt;br&gt;{ &quot;gotoPosition&quot;: {  &quot;latitude&quot;:33,   &quot;longitude&quot;:-180} }</param>
        /// <param name="id">the camera id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CommandGoToPositionWithHttpInfo (CameraCommandPositionRestDto body, byte[] id);
        /// <summary>
        /// Nudge the Camera
        /// </summary>
        /// <remarks>
        /// &#x27;Nudge&#x27; the camera&#x27;s direction a few degrees in any combination of four directions.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Direction and degrees in which to &#x27;nudge&#x27; the camera.&lt;br&gt;For example:&lt;br&gt;{ &quot;up&quot;: 1, &quot;left&quot;:2 }</param>
        /// <param name="id">the camera id</param>
        /// <returns></returns>
        void CommandNudge (CameraCommandNudgeRestDto body, byte[] id);

        /// <summary>
        /// Nudge the Camera
        /// </summary>
        /// <remarks>
        /// &#x27;Nudge&#x27; the camera&#x27;s direction a few degrees in any combination of four directions.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Direction and degrees in which to &#x27;nudge&#x27; the camera.&lt;br&gt;For example:&lt;br&gt;{ &quot;up&quot;: 1, &quot;left&quot;:2 }</param>
        /// <param name="id">the camera id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CommandNudgeWithHttpInfo (CameraCommandNudgeRestDto body, byte[] id);
        /// <summary>
        /// Pan, tilt, and zoom the Camera
        /// </summary>
        /// <remarks>
        /// Perform any combination of panning, tilting, or zooming the camera&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to pan, tilt, or zoom the camera.&lt;br&gt;For example:&lt;br&gt;{  &quot;pan&quot;: 90}</param>
        /// <param name="id">the camera id</param>
        /// <returns></returns>
        void CommandPanTiltZoom (CameraCommandPanTiltZoomRestDto body, byte[] id);

        /// <summary>
        /// Pan, tilt, and zoom the Camera
        /// </summary>
        /// <remarks>
        /// Perform any combination of panning, tilting, or zooming the camera&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to pan, tilt, or zoom the camera.&lt;br&gt;For example:&lt;br&gt;{  &quot;pan&quot;: 90}</param>
        /// <param name="id">the camera id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CommandPanTiltZoomWithHttpInfo (CameraCommandPanTiltZoomRestDto body, byte[] id);
        /// <summary>
        /// Apply a Pelco command
        /// </summary>
        /// <remarks>
        /// Command the camera via a &#x27;Pelco&#x27; command.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pelco Command.&lt;br&gt;For example:&lt;br&gt;{ &quot;command1&quot; : 3, &quot;command2&quot; : 5, &quot;data1&quot; : 7, &quot;data2&quot; : 0 }</param>
        /// <param name="id">the camera id</param>
        /// <returns></returns>
        void CommandPelcoCommand (CameraCommandPelcoRestDto body, byte[] id);

        /// <summary>
        /// Apply a Pelco command
        /// </summary>
        /// <remarks>
        /// Command the camera via a &#x27;Pelco&#x27; command.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pelco Command.&lt;br&gt;For example:&lt;br&gt;{ &quot;command1&quot; : 3, &quot;command2&quot; : 5, &quot;data1&quot; : 7, &quot;data2&quot; : 0 }</param>
        /// <param name="id">the camera id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CommandPelcoCommandWithHttpInfo (CameraCommandPelcoRestDto body, byte[] id);
        /// <summary>
        /// Get Camera status
        /// </summary>
        /// <remarks>
        /// Get the status for a specific camera
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the camera id</param>
        /// <returns>CameraRestDto</returns>
        CameraRestDto GetCamera (byte[] id);

        /// <summary>
        /// Get Camera status
        /// </summary>
        /// <remarks>
        /// Get the status for a specific camera
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the camera id</param>
        /// <returns>ApiResponse of CameraRestDto</returns>
        ApiResponse<CameraRestDto> GetCameraWithHttpInfo (byte[] id);
        /// <summary>
        /// Get Camera Image
        /// </summary>
        /// <remarks>
        /// Retrieves the current Camera Image as a jpeg
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the camera id</param>
        /// <param name="cacheId">Optional user-chosen value to provide a &#x27;context&#x27; for the request.&lt;br&gt;This serves two purposes:&lt;br&gt;First, to ensure the request goes to the server instead of being cached at the browser, and,&lt;br&gt;Secondly, to correlate the request with the return (this information is in the &#x27;location&#x27; of the header).&lt;br&gt;This value is otherwise ignored by the server and can be any value. (optional)</param>
        /// <returns>List&lt;int?&gt;</returns>
        List<int?> GetCameraImage (int? id, string cacheId = null);

        /// <summary>
        /// Get Camera Image
        /// </summary>
        /// <remarks>
        /// Retrieves the current Camera Image as a jpeg
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the camera id</param>
        /// <param name="cacheId">Optional user-chosen value to provide a &#x27;context&#x27; for the request.&lt;br&gt;This serves two purposes:&lt;br&gt;First, to ensure the request goes to the server instead of being cached at the browser, and,&lt;br&gt;Secondly, to correlate the request with the return (this information is in the &#x27;location&#x27; of the header).&lt;br&gt;This value is otherwise ignored by the server and can be any value. (optional)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        ApiResponse<List<int?>> GetCameraImageWithHttpInfo (int? id, string cacheId = null);
        /// <summary>
        /// Get Cameras status
        /// </summary>
        /// <remarks>
        /// Returns all camera statuses in the system, thereby providing the means to be aware of all cameras in the system. Note that the returned array of cameras is not paged.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CamerasRestDto</returns>
        CamerasRestDto GetCameras ();

        /// <summary>
        /// Get Cameras status
        /// </summary>
        /// <remarks>
        /// Returns all camera statuses in the system, thereby providing the means to be aware of all cameras in the system. Note that the returned array of cameras is not paged.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CamerasRestDto</returns>
        ApiResponse<CamerasRestDto> GetCamerasWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Assign Track to Camera
        /// </summary>
        /// <remarks>
        /// Assign the camera to a track by changing the &#x27;trackToAssign&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Track to assign to the camera.&lt;br&gt;For example:&lt;br&gt;{  &quot;trackToAssign&quot;: &quot;COM0100002&quot;}</param>
        /// <param name="id">the camera id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CommandAssignTrackAsync (CameraCommandAssignTrackRestDto body, byte[] id);

        /// <summary>
        /// Assign Track to Camera
        /// </summary>
        /// <remarks>
        /// Assign the camera to a track by changing the &#x27;trackToAssign&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Track to assign to the camera.&lt;br&gt;For example:&lt;br&gt;{  &quot;trackToAssign&quot;: &quot;COM0100002&quot;}</param>
        /// <param name="id">the camera id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CommandAssignTrackAsyncWithHttpInfo (CameraCommandAssignTrackRestDto body, byte[] id);
        /// <summary>
        /// Deassign Track from Camera
        /// </summary>
        /// <remarks>
        /// This command will deassign any tracks which might currently be assigned to a camera
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the camera id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CommandDeassignTrackAsync (byte[] id);

        /// <summary>
        /// Deassign Track from Camera
        /// </summary>
        /// <remarks>
        /// This command will deassign any tracks which might currently be assigned to a camera
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the camera id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CommandDeassignTrackAsyncWithHttpInfo (byte[] id);
        /// <summary>
        /// Apply a Generic command
        /// </summary>
        /// <remarks>
        /// Command the camera via a &#x27;Generic&#x27; command.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Generic Command data to command the camera.&lt;br&gt;For example:&lt;br&gt;{ &quot;command&quot; : &quot;PanTilt&quot;, &quot;value1&quot; : 7.75, &quot;value2&quot; : 89.5 }</param>
        /// <param name="id">the camera id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CommandGenericCommandAsync (CameraCommandGenericRestDto body, byte[] id);

        /// <summary>
        /// Apply a Generic command
        /// </summary>
        /// <remarks>
        /// Command the camera via a &#x27;Generic&#x27; command.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Generic Command data to command the camera.&lt;br&gt;For example:&lt;br&gt;{ &quot;command&quot; : &quot;PanTilt&quot;, &quot;value1&quot; : 7.75, &quot;value2&quot; : 89.5 }</param>
        /// <param name="id">the camera id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CommandGenericCommandAsyncWithHttpInfo (CameraCommandGenericRestDto body, byte[] id);
        /// <summary>
        /// Point Camera to a Location
        /// </summary>
        /// <remarks>
        /// Supply the latitude and longitude in which to point the camera.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Latitude and longitude in which to point the camera.&lt;br&gt;For example:&lt;br&gt;{ &quot;gotoPosition&quot;: {  &quot;latitude&quot;:33,   &quot;longitude&quot;:-180} }</param>
        /// <param name="id">the camera id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CommandGoToPositionAsync (CameraCommandPositionRestDto body, byte[] id);

        /// <summary>
        /// Point Camera to a Location
        /// </summary>
        /// <remarks>
        /// Supply the latitude and longitude in which to point the camera.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Latitude and longitude in which to point the camera.&lt;br&gt;For example:&lt;br&gt;{ &quot;gotoPosition&quot;: {  &quot;latitude&quot;:33,   &quot;longitude&quot;:-180} }</param>
        /// <param name="id">the camera id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CommandGoToPositionAsyncWithHttpInfo (CameraCommandPositionRestDto body, byte[] id);
        /// <summary>
        /// Nudge the Camera
        /// </summary>
        /// <remarks>
        /// &#x27;Nudge&#x27; the camera&#x27;s direction a few degrees in any combination of four directions.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Direction and degrees in which to &#x27;nudge&#x27; the camera.&lt;br&gt;For example:&lt;br&gt;{ &quot;up&quot;: 1, &quot;left&quot;:2 }</param>
        /// <param name="id">the camera id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CommandNudgeAsync (CameraCommandNudgeRestDto body, byte[] id);

        /// <summary>
        /// Nudge the Camera
        /// </summary>
        /// <remarks>
        /// &#x27;Nudge&#x27; the camera&#x27;s direction a few degrees in any combination of four directions.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Direction and degrees in which to &#x27;nudge&#x27; the camera.&lt;br&gt;For example:&lt;br&gt;{ &quot;up&quot;: 1, &quot;left&quot;:2 }</param>
        /// <param name="id">the camera id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CommandNudgeAsyncWithHttpInfo (CameraCommandNudgeRestDto body, byte[] id);
        /// <summary>
        /// Pan, tilt, and zoom the Camera
        /// </summary>
        /// <remarks>
        /// Perform any combination of panning, tilting, or zooming the camera&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to pan, tilt, or zoom the camera.&lt;br&gt;For example:&lt;br&gt;{  &quot;pan&quot;: 90}</param>
        /// <param name="id">the camera id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CommandPanTiltZoomAsync (CameraCommandPanTiltZoomRestDto body, byte[] id);

        /// <summary>
        /// Pan, tilt, and zoom the Camera
        /// </summary>
        /// <remarks>
        /// Perform any combination of panning, tilting, or zooming the camera&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to pan, tilt, or zoom the camera.&lt;br&gt;For example:&lt;br&gt;{  &quot;pan&quot;: 90}</param>
        /// <param name="id">the camera id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CommandPanTiltZoomAsyncWithHttpInfo (CameraCommandPanTiltZoomRestDto body, byte[] id);
        /// <summary>
        /// Apply a Pelco command
        /// </summary>
        /// <remarks>
        /// Command the camera via a &#x27;Pelco&#x27; command.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pelco Command.&lt;br&gt;For example:&lt;br&gt;{ &quot;command1&quot; : 3, &quot;command2&quot; : 5, &quot;data1&quot; : 7, &quot;data2&quot; : 0 }</param>
        /// <param name="id">the camera id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CommandPelcoCommandAsync (CameraCommandPelcoRestDto body, byte[] id);

        /// <summary>
        /// Apply a Pelco command
        /// </summary>
        /// <remarks>
        /// Command the camera via a &#x27;Pelco&#x27; command.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pelco Command.&lt;br&gt;For example:&lt;br&gt;{ &quot;command1&quot; : 3, &quot;command2&quot; : 5, &quot;data1&quot; : 7, &quot;data2&quot; : 0 }</param>
        /// <param name="id">the camera id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CommandPelcoCommandAsyncWithHttpInfo (CameraCommandPelcoRestDto body, byte[] id);
        /// <summary>
        /// Get Camera status
        /// </summary>
        /// <remarks>
        /// Get the status for a specific camera
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the camera id</param>
        /// <returns>Task of CameraRestDto</returns>
        System.Threading.Tasks.Task<CameraRestDto> GetCameraAsync (byte[] id);

        /// <summary>
        /// Get Camera status
        /// </summary>
        /// <remarks>
        /// Get the status for a specific camera
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the camera id</param>
        /// <returns>Task of ApiResponse (CameraRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CameraRestDto>> GetCameraAsyncWithHttpInfo (byte[] id);
        /// <summary>
        /// Get Camera Image
        /// </summary>
        /// <remarks>
        /// Retrieves the current Camera Image as a jpeg
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the camera id</param>
        /// <param name="cacheId">Optional user-chosen value to provide a &#x27;context&#x27; for the request.&lt;br&gt;This serves two purposes:&lt;br&gt;First, to ensure the request goes to the server instead of being cached at the browser, and,&lt;br&gt;Secondly, to correlate the request with the return (this information is in the &#x27;location&#x27; of the header).&lt;br&gt;This value is otherwise ignored by the server and can be any value. (optional)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        System.Threading.Tasks.Task<List<int?>> GetCameraImageAsync (int? id, string cacheId = null);

        /// <summary>
        /// Get Camera Image
        /// </summary>
        /// <remarks>
        /// Retrieves the current Camera Image as a jpeg
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the camera id</param>
        /// <param name="cacheId">Optional user-chosen value to provide a &#x27;context&#x27; for the request.&lt;br&gt;This serves two purposes:&lt;br&gt;First, to ensure the request goes to the server instead of being cached at the browser, and,&lt;br&gt;Secondly, to correlate the request with the return (this information is in the &#x27;location&#x27; of the header).&lt;br&gt;This value is otherwise ignored by the server and can be any value. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetCameraImageAsyncWithHttpInfo (int? id, string cacheId = null);
        /// <summary>
        /// Get Cameras status
        /// </summary>
        /// <remarks>
        /// Returns all camera statuses in the system, thereby providing the means to be aware of all cameras in the system. Note that the returned array of cameras is not paged.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CamerasRestDto</returns>
        System.Threading.Tasks.Task<CamerasRestDto> GetCamerasAsync ();

        /// <summary>
        /// Get Cameras status
        /// </summary>
        /// <remarks>
        /// Returns all camera statuses in the system, thereby providing the means to be aware of all cameras in the system. Note that the returned array of cameras is not paged.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CamerasRestDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CamerasRestDto>> GetCamerasAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Assign Track to Camera Assign the camera to a track by changing the &#x27;trackToAssign&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Track to assign to the camera.&lt;br&gt;For example:&lt;br&gt;{  &quot;trackToAssign&quot;: &quot;COM0100002&quot;}</param>
        /// <param name="id">the camera id</param>
        /// <returns></returns>
        public void CommandAssignTrack (CameraCommandAssignTrackRestDto body, byte[] id)
        {
             CommandAssignTrackWithHttpInfo(body, id);
        }

        /// <summary>
        /// Assign Track to Camera Assign the camera to a track by changing the &#x27;trackToAssign&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Track to assign to the camera.&lt;br&gt;For example:&lt;br&gt;{  &quot;trackToAssign&quot;: &quot;COM0100002&quot;}</param>
        /// <param name="id">the camera id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CommandAssignTrackWithHttpInfo (CameraCommandAssignTrackRestDto body, byte[] id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CommandAssignTrack");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->CommandAssignTrack");

            var localVarPath = "/cameras/{id}/assignTrack";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommandAssignTrack", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Assign Track to Camera Assign the camera to a track by changing the &#x27;trackToAssign&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Track to assign to the camera.&lt;br&gt;For example:&lt;br&gt;{  &quot;trackToAssign&quot;: &quot;COM0100002&quot;}</param>
        /// <param name="id">the camera id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CommandAssignTrackAsync (CameraCommandAssignTrackRestDto body, byte[] id)
        {
             await CommandAssignTrackAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Assign Track to Camera Assign the camera to a track by changing the &#x27;trackToAssign&#x27; field.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Track to assign to the camera.&lt;br&gt;For example:&lt;br&gt;{  &quot;trackToAssign&quot;: &quot;COM0100002&quot;}</param>
        /// <param name="id">the camera id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CommandAssignTrackAsyncWithHttpInfo (CameraCommandAssignTrackRestDto body, byte[] id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CommandAssignTrack");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->CommandAssignTrack");

            var localVarPath = "/cameras/{id}/assignTrack";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommandAssignTrack", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deassign Track from Camera This command will deassign any tracks which might currently be assigned to a camera
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the camera id</param>
        /// <returns></returns>
        public void CommandDeassignTrack (byte[] id)
        {
             CommandDeassignTrackWithHttpInfo(id);
        }

        /// <summary>
        /// Deassign Track from Camera This command will deassign any tracks which might currently be assigned to a camera
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the camera id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CommandDeassignTrackWithHttpInfo (byte[] id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->CommandDeassignTrack");

            var localVarPath = "/cameras/{id}/deassignTrack";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommandDeassignTrack", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deassign Track from Camera This command will deassign any tracks which might currently be assigned to a camera
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the camera id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CommandDeassignTrackAsync (byte[] id)
        {
             await CommandDeassignTrackAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deassign Track from Camera This command will deassign any tracks which might currently be assigned to a camera
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the camera id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CommandDeassignTrackAsyncWithHttpInfo (byte[] id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->CommandDeassignTrack");

            var localVarPath = "/cameras/{id}/deassignTrack";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommandDeassignTrack", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Apply a Generic command Command the camera via a &#x27;Generic&#x27; command.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Generic Command data to command the camera.&lt;br&gt;For example:&lt;br&gt;{ &quot;command&quot; : &quot;PanTilt&quot;, &quot;value1&quot; : 7.75, &quot;value2&quot; : 89.5 }</param>
        /// <param name="id">the camera id</param>
        /// <returns></returns>
        public void CommandGenericCommand (CameraCommandGenericRestDto body, byte[] id)
        {
             CommandGenericCommandWithHttpInfo(body, id);
        }

        /// <summary>
        /// Apply a Generic command Command the camera via a &#x27;Generic&#x27; command.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Generic Command data to command the camera.&lt;br&gt;For example:&lt;br&gt;{ &quot;command&quot; : &quot;PanTilt&quot;, &quot;value1&quot; : 7.75, &quot;value2&quot; : 89.5 }</param>
        /// <param name="id">the camera id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CommandGenericCommandWithHttpInfo (CameraCommandGenericRestDto body, byte[] id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CommandGenericCommand");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->CommandGenericCommand");

            var localVarPath = "/cameras/{id}/genericCommand";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommandGenericCommand", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Apply a Generic command Command the camera via a &#x27;Generic&#x27; command.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Generic Command data to command the camera.&lt;br&gt;For example:&lt;br&gt;{ &quot;command&quot; : &quot;PanTilt&quot;, &quot;value1&quot; : 7.75, &quot;value2&quot; : 89.5 }</param>
        /// <param name="id">the camera id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CommandGenericCommandAsync (CameraCommandGenericRestDto body, byte[] id)
        {
             await CommandGenericCommandAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Apply a Generic command Command the camera via a &#x27;Generic&#x27; command.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Generic Command data to command the camera.&lt;br&gt;For example:&lt;br&gt;{ &quot;command&quot; : &quot;PanTilt&quot;, &quot;value1&quot; : 7.75, &quot;value2&quot; : 89.5 }</param>
        /// <param name="id">the camera id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CommandGenericCommandAsyncWithHttpInfo (CameraCommandGenericRestDto body, byte[] id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CommandGenericCommand");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->CommandGenericCommand");

            var localVarPath = "/cameras/{id}/genericCommand";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommandGenericCommand", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Point Camera to a Location Supply the latitude and longitude in which to point the camera.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Latitude and longitude in which to point the camera.&lt;br&gt;For example:&lt;br&gt;{ &quot;gotoPosition&quot;: {  &quot;latitude&quot;:33,   &quot;longitude&quot;:-180} }</param>
        /// <param name="id">the camera id</param>
        /// <returns></returns>
        public void CommandGoToPosition (CameraCommandPositionRestDto body, byte[] id)
        {
             CommandGoToPositionWithHttpInfo(body, id);
        }

        /// <summary>
        /// Point Camera to a Location Supply the latitude and longitude in which to point the camera.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Latitude and longitude in which to point the camera.&lt;br&gt;For example:&lt;br&gt;{ &quot;gotoPosition&quot;: {  &quot;latitude&quot;:33,   &quot;longitude&quot;:-180} }</param>
        /// <param name="id">the camera id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CommandGoToPositionWithHttpInfo (CameraCommandPositionRestDto body, byte[] id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CommandGoToPosition");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->CommandGoToPosition");

            var localVarPath = "/cameras/{id}/gotoPosition";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommandGoToPosition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Point Camera to a Location Supply the latitude and longitude in which to point the camera.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Latitude and longitude in which to point the camera.&lt;br&gt;For example:&lt;br&gt;{ &quot;gotoPosition&quot;: {  &quot;latitude&quot;:33,   &quot;longitude&quot;:-180} }</param>
        /// <param name="id">the camera id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CommandGoToPositionAsync (CameraCommandPositionRestDto body, byte[] id)
        {
             await CommandGoToPositionAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Point Camera to a Location Supply the latitude and longitude in which to point the camera.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Latitude and longitude in which to point the camera.&lt;br&gt;For example:&lt;br&gt;{ &quot;gotoPosition&quot;: {  &quot;latitude&quot;:33,   &quot;longitude&quot;:-180} }</param>
        /// <param name="id">the camera id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CommandGoToPositionAsyncWithHttpInfo (CameraCommandPositionRestDto body, byte[] id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CommandGoToPosition");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->CommandGoToPosition");

            var localVarPath = "/cameras/{id}/gotoPosition";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommandGoToPosition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Nudge the Camera &#x27;Nudge&#x27; the camera&#x27;s direction a few degrees in any combination of four directions.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Direction and degrees in which to &#x27;nudge&#x27; the camera.&lt;br&gt;For example:&lt;br&gt;{ &quot;up&quot;: 1, &quot;left&quot;:2 }</param>
        /// <param name="id">the camera id</param>
        /// <returns></returns>
        public void CommandNudge (CameraCommandNudgeRestDto body, byte[] id)
        {
             CommandNudgeWithHttpInfo(body, id);
        }

        /// <summary>
        /// Nudge the Camera &#x27;Nudge&#x27; the camera&#x27;s direction a few degrees in any combination of four directions.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Direction and degrees in which to &#x27;nudge&#x27; the camera.&lt;br&gt;For example:&lt;br&gt;{ &quot;up&quot;: 1, &quot;left&quot;:2 }</param>
        /// <param name="id">the camera id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CommandNudgeWithHttpInfo (CameraCommandNudgeRestDto body, byte[] id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CommandNudge");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->CommandNudge");

            var localVarPath = "/cameras/{id}/nudge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommandNudge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Nudge the Camera &#x27;Nudge&#x27; the camera&#x27;s direction a few degrees in any combination of four directions.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Direction and degrees in which to &#x27;nudge&#x27; the camera.&lt;br&gt;For example:&lt;br&gt;{ &quot;up&quot;: 1, &quot;left&quot;:2 }</param>
        /// <param name="id">the camera id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CommandNudgeAsync (CameraCommandNudgeRestDto body, byte[] id)
        {
             await CommandNudgeAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Nudge the Camera &#x27;Nudge&#x27; the camera&#x27;s direction a few degrees in any combination of four directions.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Direction and degrees in which to &#x27;nudge&#x27; the camera.&lt;br&gt;For example:&lt;br&gt;{ &quot;up&quot;: 1, &quot;left&quot;:2 }</param>
        /// <param name="id">the camera id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CommandNudgeAsyncWithHttpInfo (CameraCommandNudgeRestDto body, byte[] id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CommandNudge");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->CommandNudge");

            var localVarPath = "/cameras/{id}/nudge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommandNudge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Pan, tilt, and zoom the Camera Perform any combination of panning, tilting, or zooming the camera&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to pan, tilt, or zoom the camera.&lt;br&gt;For example:&lt;br&gt;{  &quot;pan&quot;: 90}</param>
        /// <param name="id">the camera id</param>
        /// <returns></returns>
        public void CommandPanTiltZoom (CameraCommandPanTiltZoomRestDto body, byte[] id)
        {
             CommandPanTiltZoomWithHttpInfo(body, id);
        }

        /// <summary>
        /// Pan, tilt, and zoom the Camera Perform any combination of panning, tilting, or zooming the camera&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to pan, tilt, or zoom the camera.&lt;br&gt;For example:&lt;br&gt;{  &quot;pan&quot;: 90}</param>
        /// <param name="id">the camera id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CommandPanTiltZoomWithHttpInfo (CameraCommandPanTiltZoomRestDto body, byte[] id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CommandPanTiltZoom");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->CommandPanTiltZoom");

            var localVarPath = "/cameras/{id}/panTiltZoom";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommandPanTiltZoom", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Pan, tilt, and zoom the Camera Perform any combination of panning, tilting, or zooming the camera&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to pan, tilt, or zoom the camera.&lt;br&gt;For example:&lt;br&gt;{  &quot;pan&quot;: 90}</param>
        /// <param name="id">the camera id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CommandPanTiltZoomAsync (CameraCommandPanTiltZoomRestDto body, byte[] id)
        {
             await CommandPanTiltZoomAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Pan, tilt, and zoom the Camera Perform any combination of panning, tilting, or zooming the camera&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Parameters to pan, tilt, or zoom the camera.&lt;br&gt;For example:&lt;br&gt;{  &quot;pan&quot;: 90}</param>
        /// <param name="id">the camera id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CommandPanTiltZoomAsyncWithHttpInfo (CameraCommandPanTiltZoomRestDto body, byte[] id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CommandPanTiltZoom");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->CommandPanTiltZoom");

            var localVarPath = "/cameras/{id}/panTiltZoom";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommandPanTiltZoom", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Apply a Pelco command Command the camera via a &#x27;Pelco&#x27; command.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pelco Command.&lt;br&gt;For example:&lt;br&gt;{ &quot;command1&quot; : 3, &quot;command2&quot; : 5, &quot;data1&quot; : 7, &quot;data2&quot; : 0 }</param>
        /// <param name="id">the camera id</param>
        /// <returns></returns>
        public void CommandPelcoCommand (CameraCommandPelcoRestDto body, byte[] id)
        {
             CommandPelcoCommandWithHttpInfo(body, id);
        }

        /// <summary>
        /// Apply a Pelco command Command the camera via a &#x27;Pelco&#x27; command.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pelco Command.&lt;br&gt;For example:&lt;br&gt;{ &quot;command1&quot; : 3, &quot;command2&quot; : 5, &quot;data1&quot; : 7, &quot;data2&quot; : 0 }</param>
        /// <param name="id">the camera id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CommandPelcoCommandWithHttpInfo (CameraCommandPelcoRestDto body, byte[] id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CommandPelcoCommand");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->CommandPelcoCommand");

            var localVarPath = "/cameras/{id}/pelcoCommand";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommandPelcoCommand", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Apply a Pelco command Command the camera via a &#x27;Pelco&#x27; command.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pelco Command.&lt;br&gt;For example:&lt;br&gt;{ &quot;command1&quot; : 3, &quot;command2&quot; : 5, &quot;data1&quot; : 7, &quot;data2&quot; : 0 }</param>
        /// <param name="id">the camera id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CommandPelcoCommandAsync (CameraCommandPelcoRestDto body, byte[] id)
        {
             await CommandPelcoCommandAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        /// Apply a Pelco command Command the camera via a &#x27;Pelco&#x27; command.&lt;br&gt;See the \&quot;Parameters\&quot; section, \&quot;Model\&quot; sub-section for this items data name, type, and acceptable value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pelco Command.&lt;br&gt;For example:&lt;br&gt;{ &quot;command1&quot; : 3, &quot;command2&quot; : 5, &quot;data1&quot; : 7, &quot;data2&quot; : 0 }</param>
        /// <param name="id">the camera id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CommandPelcoCommandAsyncWithHttpInfo (CameraCommandPelcoRestDto body, byte[] id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CommandPelcoCommand");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->CommandPelcoCommand");

            var localVarPath = "/cameras/{id}/pelcoCommand";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommandPelcoCommand", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Camera status Get the status for a specific camera
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the camera id</param>
        /// <returns>CameraRestDto</returns>
        public CameraRestDto GetCamera (byte[] id)
        {
             ApiResponse<CameraRestDto> localVarResponse = GetCameraWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Camera status Get the status for a specific camera
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the camera id</param>
        /// <returns>ApiResponse of CameraRestDto</returns>
        public ApiResponse< CameraRestDto > GetCameraWithHttpInfo (byte[] id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetCamera");

            var localVarPath = "/cameras/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCamera", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CameraRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CameraRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CameraRestDto)));
        }

        /// <summary>
        /// Get Camera status Get the status for a specific camera
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the camera id</param>
        /// <returns>Task of CameraRestDto</returns>
        public async System.Threading.Tasks.Task<CameraRestDto> GetCameraAsync (byte[] id)
        {
             ApiResponse<CameraRestDto> localVarResponse = await GetCameraAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Camera status Get the status for a specific camera
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the camera id</param>
        /// <returns>Task of ApiResponse (CameraRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CameraRestDto>> GetCameraAsyncWithHttpInfo (byte[] id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetCamera");

            var localVarPath = "/cameras/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCamera", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CameraRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CameraRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CameraRestDto)));
        }

        /// <summary>
        /// Get Camera Image Retrieves the current Camera Image as a jpeg
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the camera id</param>
        /// <param name="cacheId">Optional user-chosen value to provide a &#x27;context&#x27; for the request.&lt;br&gt;This serves two purposes:&lt;br&gt;First, to ensure the request goes to the server instead of being cached at the browser, and,&lt;br&gt;Secondly, to correlate the request with the return (this information is in the &#x27;location&#x27; of the header).&lt;br&gt;This value is otherwise ignored by the server and can be any value. (optional)</param>
        /// <returns>List&lt;int?&gt;</returns>
        public List<int?> GetCameraImage (int? id, string cacheId = null)
        {
             ApiResponse<List<int?>> localVarResponse = GetCameraImageWithHttpInfo(id, cacheId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Camera Image Retrieves the current Camera Image as a jpeg
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the camera id</param>
        /// <param name="cacheId">Optional user-chosen value to provide a &#x27;context&#x27; for the request.&lt;br&gt;This serves two purposes:&lt;br&gt;First, to ensure the request goes to the server instead of being cached at the browser, and,&lt;br&gt;Secondly, to correlate the request with the return (this information is in the &#x27;location&#x27; of the header).&lt;br&gt;This value is otherwise ignored by the server and can be any value. (optional)</param>
        /// <returns>ApiResponse of List&lt;int?&gt;</returns>
        public ApiResponse< List<int?> > GetCameraImageWithHttpInfo (int? id, string cacheId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetCameraImage");

            var localVarPath = "/cameras/{id}/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (cacheId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cacheId", cacheId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCameraImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// Get Camera Image Retrieves the current Camera Image as a jpeg
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the camera id</param>
        /// <param name="cacheId">Optional user-chosen value to provide a &#x27;context&#x27; for the request.&lt;br&gt;This serves two purposes:&lt;br&gt;First, to ensure the request goes to the server instead of being cached at the browser, and,&lt;br&gt;Secondly, to correlate the request with the return (this information is in the &#x27;location&#x27; of the header).&lt;br&gt;This value is otherwise ignored by the server and can be any value. (optional)</param>
        /// <returns>Task of List&lt;int?&gt;</returns>
        public async System.Threading.Tasks.Task<List<int?>> GetCameraImageAsync (int? id, string cacheId = null)
        {
             ApiResponse<List<int?>> localVarResponse = await GetCameraImageAsyncWithHttpInfo(id, cacheId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Camera Image Retrieves the current Camera Image as a jpeg
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the camera id</param>
        /// <param name="cacheId">Optional user-chosen value to provide a &#x27;context&#x27; for the request.&lt;br&gt;This serves two purposes:&lt;br&gt;First, to ensure the request goes to the server instead of being cached at the browser, and,&lt;br&gt;Secondly, to correlate the request with the return (this information is in the &#x27;location&#x27; of the header).&lt;br&gt;This value is otherwise ignored by the server and can be any value. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;int?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<int?>>> GetCameraImageAsyncWithHttpInfo (int? id, string cacheId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetCameraImage");

            var localVarPath = "/cameras/{id}/image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (cacheId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cacheId", cacheId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCameraImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<int?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<int?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<int?>)));
        }

        /// <summary>
        /// Get Cameras status Returns all camera statuses in the system, thereby providing the means to be aware of all cameras in the system. Note that the returned array of cameras is not paged.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CamerasRestDto</returns>
        public CamerasRestDto GetCameras ()
        {
             ApiResponse<CamerasRestDto> localVarResponse = GetCamerasWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Cameras status Returns all camera statuses in the system, thereby providing the means to be aware of all cameras in the system. Note that the returned array of cameras is not paged.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CamerasRestDto</returns>
        public ApiResponse< CamerasRestDto > GetCamerasWithHttpInfo ()
        {

            var localVarPath = "/cameras";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCameras", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CamerasRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CamerasRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CamerasRestDto)));
        }

        /// <summary>
        /// Get Cameras status Returns all camera statuses in the system, thereby providing the means to be aware of all cameras in the system. Note that the returned array of cameras is not paged.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CamerasRestDto</returns>
        public async System.Threading.Tasks.Task<CamerasRestDto> GetCamerasAsync ()
        {
             ApiResponse<CamerasRestDto> localVarResponse = await GetCamerasAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Cameras status Returns all camera statuses in the system, thereby providing the means to be aware of all cameras in the system. Note that the returned array of cameras is not paged.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CamerasRestDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CamerasRestDto>> GetCamerasAsyncWithHttpInfo ()
        {

            var localVarPath = "/cameras";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCameras", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CamerasRestDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CamerasRestDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CamerasRestDto)));
        }

    }
}
