{"apiVersion":"1.0","swaggerVersion":"1.2","basePath":"/api","resourcePath":"/radars","produces":["application/xml","application/json"],"consumes":["application/json"],"apis":[{"path":"/radars","description":"getRadarDatas","operations":[{"method":"GET","summary":"Get Radars Status","notes":"Requests Radar Data for all Radars in the system. (No paging or querying available).","type":"RadarsRestDto","nickname":"getRadarDatas","produces":["application/xml","application/json"],"consumes":["application/json"],"parameters":[{"name":"expand","description":"Provides extra data. if 'control' is requested then control settings are provided. if 'detail' is requested then extra detail of the resource is provided. Any combination of these can be given.<br>Values: [control, detail]","defaultValue":"","required":false,"type":"string","paramType":"query","allowMultiple":false}],"responseMessages":[{"code":200,"message":"Success. See the 'Response Class' section above for the description of the data.","responseModel":"HttpEntity«RadarsRestDto»"},{"code":400,"message":"Bad Request. Typically invalid or incomplete parameter(s). See the 'message' property for detail of the error.","responseModel":"ResponseBodyExceptionInfo"},{"code":401,"message":"Insufficient authorization. Basic Authentication is missing, invalid, or permissions are insufficient for the operation.","responseModel":"ResponseBodyExceptionInfo"}],"deprecated":"false"}]},{"path":"/radars/{id}","description":"getRadarData","operations":[{"method":"GET","summary":"Get Radar Data","notes":"Requests the Radar Data for the specified Radar","type":"RadarRestDto","nickname":"getRadarData","produces":["application/xml","application/json"],"consumes":["application/json"],"parameters":[{"name":"id","description":"the radar id (the Radar Processor unit number)","defaultValue":"","required":true,"type":"integer","format":"int32","paramType":"path","allowMultiple":false},{"name":"expand","description":"Provides extra data. if 'control' is requested then control settings are provided. if 'detail' is requested then extra detail of the resource is provided. Any combination of these can be given.<br>Values: [control, detail]","defaultValue":"","required":false,"type":"string","paramType":"query","allowMultiple":false}],"responseMessages":[{"code":200,"message":"Success. See the 'Response Class' section above for the description of the data.","responseModel":"HttpEntity«object»"},{"code":400,"message":"Bad Request. Typically invalid or incomplete parameter(s). See the 'message' property for detail of the error.","responseModel":"ResponseBodyExceptionInfo"},{"code":401,"message":"Insufficient authorization. Basic Authentication is missing, invalid, or permissions are insufficient for the operation.","responseModel":"ResponseBodyExceptionInfo"},{"code":404,"message":"No such Radar with Radar ID found","responseModel":"ResponseBodyExceptionInfo"}],"deprecated":"false"}]},{"path":"/radars/{id}/control","description":"getRadarControl","operations":[{"method":"GET","summary":"Get Radar Control Settings","notes":"Requests the Radar Control settings for the specified Radar","type":"RadarControlRestDto","nickname":"getRadarControl","produces":["application/xml","application/json"],"consumes":["application/json"],"parameters":[{"name":"id","description":"the radar id (the Radar Processor unit number)","defaultValue":"","required":true,"type":"integer","format":"int32","paramType":"path","allowMultiple":false}],"responseMessages":[{"code":200,"message":"Success. See the 'Response Class' section above for the description of the data.","responseModel":"HttpEntity«object»"},{"code":400,"message":"Bad Request. Typically invalid or incomplete parameter(s). See the 'message' property for detail of the error.","responseModel":"ResponseBodyExceptionInfo"},{"code":401,"message":"Insufficient authorization. Basic Authentication is missing, invalid, or permissions are insufficient for the operation.","responseModel":"ResponseBodyExceptionInfo"},{"code":404,"message":"No such Radar with Radar ID found","responseModel":"ResponseBodyExceptionInfo"}],"deprecated":"false"}]},{"path":"/radars/{id}/control/filter","description":"updateFilter","operations":[{"method":"POST","summary":"Provides Control of Radar Filtering","notes":"Updates Radar Filtering controls. Please note not all combination of settings are allowed as further described below. Also, fields which are not provided use the current system setting.","type":"void","nickname":"updateFilter","produces":["application/xml","application/json"],"consumes":["application/json"],"parameters":[{"name":"id","description":"the radar id (the Radar Processor unit number)","defaultValue":"","required":true,"type":"integer","format":"int32","paramType":"path","allowMultiple":false},{"name":"filter","description":"Radar Filter settings","defaultValue":"","required":true,"type":"FilterRestDto","paramType":"body","allowMultiple":false}],"responseMessages":[{"code":202,"message":"Accepted (the request to update the resource has been accepted but the resource itself is not yet necessarily updated.) "},{"code":400,"message":"Bad Request. Typically invalid or incomplete parameter(s). See the 'message' property for detail of the error.","responseModel":"ResponseBodyExceptionInfo"},{"code":401,"message":"Insufficient authorization. Basic Authentication is missing, invalid, or permissions are insufficient for the operation.","responseModel":"ResponseBodyExceptionInfo"},{"code":404,"message":"No such Radar with Radar ID found","responseModel":"ResponseBodyExceptionInfo"}],"deprecated":"false"}]},{"path":"/radars/{id}/control/mode","description":"updateRadarMode","operations":[{"method":"POST","summary":"Provides Control of Radar Mode","notes":"Updates Radar Mode","type":"void","nickname":"updateRadarMode","produces":["application/xml","application/json"],"consumes":["application/json"],"parameters":[{"name":"id","description":"the radar id (the Radar Processor unit number)","defaultValue":"","required":true,"type":"integer","format":"int32","paramType":"path","allowMultiple":false},{"name":"radarMode","description":"Radar mode settings","defaultValue":"","required":true,"type":"RadarModeRestDto","paramType":"body","allowMultiple":false}],"responseMessages":[{"code":202,"message":"Accepted (the request to update the resource has been accepted but the resource itself is not yet necessarily updated.) "},{"code":400,"message":"Bad Request. Typically invalid or incomplete parameter(s). See the 'message' property for detail of the error.","responseModel":"ResponseBodyExceptionInfo"},{"code":401,"message":"Insufficient authorization. Basic Authentication is missing, invalid, or permissions are insufficient for the operation.","responseModel":"ResponseBodyExceptionInfo"},{"code":404,"message":"No such Radar with Radar ID found","responseModel":"ResponseBodyExceptionInfo"}],"deprecated":"false"}]},{"path":"/radars/{id}/control/rangeScale","description":"updateRangeScale","operations":[{"method":"POST","summary":"Provides Control of Range Scale","notes":"Updates Radar Range Scale","type":"void","nickname":"updateRangeScale","produces":["application/xml","application/json"],"consumes":["application/json"],"parameters":[{"name":"id","description":"the radar id (the Radar Processor unit number)","defaultValue":"","required":true,"type":"integer","format":"int32","paramType":"path","allowMultiple":false},{"name":"rangeScale","description":"Range Scale Setting","defaultValue":"","required":true,"type":"RangeScaleRestDto","paramType":"body","allowMultiple":false}],"responseMessages":[{"code":202,"message":"Accepted (the request to update the resource has been accepted but the resource itself is not yet necessarily updated.) "},{"code":400,"message":"Bad Request. Typically invalid or incomplete parameter(s). See the 'message' property for detail of the error.","responseModel":"ResponseBodyExceptionInfo"},{"code":401,"message":"Insufficient authorization. Basic Authentication is missing, invalid, or permissions are insufficient for the operation.","responseModel":"ResponseBodyExceptionInfo"},{"code":404,"message":"No such Radar with Radar ID found","responseModel":"ResponseBodyExceptionInfo"}],"deprecated":"false"}]},{"path":"/radars/{id}/control/state","description":"updateRadarState","operations":[{"method":"POST","summary":"Provides Control of Radar State","notes":"Updates Radar State","type":"void","nickname":"updateRadarState","produces":["application/xml","application/json"],"consumes":["application/json"],"parameters":[{"name":"id","description":"the radar id (the Radar Processor unit number)","defaultValue":"","required":true,"type":"integer","format":"int32","paramType":"path","allowMultiple":false},{"name":"radarState","description":"Radar state settings","defaultValue":"","required":true,"type":"RadarStateRestDto","paramType":"body","allowMultiple":false}],"responseMessages":[{"code":202,"message":"Accepted (the request to update the resource has been accepted but the resource itself is not yet necessarily updated.) "},{"code":400,"message":"Bad Request. Typically invalid or incomplete parameter(s). See the 'message' property for detail of the error.","responseModel":"ResponseBodyExceptionInfo"},{"code":401,"message":"Insufficient authorization. Basic Authentication is missing, invalid, or permissions are insufficient for the operation.","responseModel":"ResponseBodyExceptionInfo"},{"code":404,"message":"No such Radar with Radar ID found","responseModel":"ResponseBodyExceptionInfo"}],"deprecated":"false"}]},{"path":"/radars/{id}/control/termaProfile","description":"updateTermaProfile","operations":[{"method":"POST","summary":"Provides control of the Terma Profile","notes":"Updates Terma Profile","type":"void","nickname":"updateTermaProfile","produces":["application/xml","application/json"],"consumes":["application/json"],"parameters":[{"name":"id","description":"the radar id (the Radar Processor unit number)","defaultValue":"","required":true,"type":"integer","format":"int32","paramType":"path","allowMultiple":false},{"name":"termaProfile","description":"Terma Profile","defaultValue":"","required":true,"type":"TermaProfileRestDto","paramType":"body","allowMultiple":false}],"responseMessages":[{"code":202,"message":"Accepted (the request to update the resource has been accepted but the resource itself is not yet necessarily updated.) "},{"code":400,"message":"Bad Request. Typically invalid or incomplete parameter(s). See the 'message' property for detail of the error.","responseModel":"ResponseBodyExceptionInfo"},{"code":401,"message":"Insufficient authorization. Basic Authentication is missing, invalid, or permissions are insufficient for the operation.","responseModel":"ResponseBodyExceptionInfo"},{"code":404,"message":"No such Radar with Radar ID found","responseModel":"ResponseBodyExceptionInfo"}],"deprecated":"false"}]},{"path":"/radars/{id}/detail","description":"getRadarDetail","operations":[{"method":"GET","summary":"Get Radar Detail","notes":"Requests the Radar Detail data for the specified Radar","type":"RadarDetailRestDto","nickname":"getRadarDetail","produces":["application/xml","application/json"],"consumes":["application/json"],"parameters":[{"name":"id","description":"the radar id (the Radar Processor unit number)","defaultValue":"","required":true,"type":"integer","format":"int32","paramType":"path","allowMultiple":false}],"responseMessages":[{"code":200,"message":"Success. See the 'Response Class' section above for the description of the data.","responseModel":"HttpEntity«object»"},{"code":400,"message":"Bad Request. Typically invalid or incomplete parameter(s). See the 'message' property for detail of the error.","responseModel":"ResponseBodyExceptionInfo"},{"code":401,"message":"Insufficient authorization. Basic Authentication is missing, invalid, or permissions are insufficient for the operation.","responseModel":"ResponseBodyExceptionInfo"},{"code":404,"message":"No such Radar with Radar ID found","responseModel":"ResponseBodyExceptionInfo"}],"deprecated":"false"}]},{"path":"/radars/{id}/terma/BITE/measurements","description":"getRadarTermaBiteMeasurements","operations":[{"method":"GET","summary":"Get Terma Radar BITE measurements","notes":"Provides all Terma BITE Measurements (Status, Errors, and Warnings) for a Terma Radar. No action is required for this data to be made available. <br/><br/><em>Important Note on Time Zones:</em><br/>For correct presentation, the MIS and the system interfacing with the Terma (the Radar Processor) require their system time to be set to the same Time Zone. If not, then the presented data will be offset in the same way the Time Zones are. <br/><br/>Note on using updateSince<br/>The recommended approach is to simply base the updateSince query value relative to the time of the data received and presented. This will overcome any differences in system time or Time Zones between the client, MIS, and the system supplying the Terma BITE data. <br/>E.g., if presented time of data received is 2019-03-14T14:55:00.050Z, then using a query of updateSince=2019-03-14T14:55:00.050Z will get all data since that time. <br/><br/>Note on Amount of Data Available<br/> Terma BITE data is constantly being received. MIS stores a limited amount of this Terma BITE data. Requesting data every 5 seconds should be sufficient to get all data since the last request without missing any. ","type":"RadarTermaBiteMsRestDto","nickname":"getRadarTermaBiteMeasurements","produces":["application/xml","application/json"],"consumes":["application/json"],"parameters":[{"name":"id","description":"the radar id (the Radar Processor unit number)","defaultValue":"","required":true,"type":"integer","format":"int32","paramType":"path","allowMultiple":false},{"name":"updateSince","description":"Returns Terma BITE measurements that have been updated since (greater than) the rp_time.<br>This is useful for clients that are continually polling the server.<br>See the 'Note on using updateSince' above in the 'Implementation Notes' section. <br><br>&nbsp;&nbsp;&nbsp;&nbsp;Example Value: 2019-03-14T14:55:00.050Z specifies a year-month-day followed by 24-hour hours:minutes:seconds.milliseconds in GMT time<br><br>Note that the size query is ignored when this query is given; all matched items will be returned.","defaultValue":"","required":false,"type":"string","paramType":"query","allowMultiple":false},{"name":"size","description":"How many entries to retrieve. Ignored if updateSince is given. Defaults to 20","defaultValue":"","required":false,"type":"integer","format":"int32","paramType":"query","allowMultiple":false}],"responseMessages":[{"code":200,"message":"Success. See the 'Response Class' section above for the description of the data.","responseModel":"HttpEntity«RadarTermaBiteMsRestDto»"},{"code":400,"message":"Bad Request. Typically invalid or incomplete parameter(s). See the 'message' property for detail of the error.","responseModel":"ResponseBodyExceptionInfo"},{"code":401,"message":"Insufficient authorization. Basic Authentication is missing, invalid, or permissions are insufficient for the operation.","responseModel":"ResponseBodyExceptionInfo"},{"code":404,"message":"No such Radar with Radar ID found or Radar has no Terma Data","responseModel":"ResponseBodyExceptionInfo"}],"deprecated":"false"}]}],"models":{"RadarStateRestDto":{"id":"RadarStateRestDto","description":"","extends":"","properties":{"radarState":{"type":"string","description":"radar state for this radar. Please note that this can NOT be set if the Radar is a slave RP","enum":["Off","Standby","Radiate","Rotate","RotateRadiate"]}}},"RadarsRestDto":{"id":"RadarsRestDto","description":"Container for multiple Radar Statuses","required":["links","items","totalItems"],"extends":"","properties":{"links":{"type":"array","description":"*method=GET*Provides link relations as URLs using the REST 'hateoas' convention (for REST delivered data).<br>&nbsp;&nbsp;&nbsp;&nbsp;The 'self' link references this rest object, including any specified query criteria","items":{"$ref":"Link"}},"items":{"type":"array","description":"An array of Radar Statuses matching the query criteria","items":{"$ref":"RadarRestDto"}},"totalItems":{"type":"integer","format":"int64","description":"Total number of elements matching the query filter and not limited by page size"}}},"ErrorRestDto":{"id":"ErrorRestDto","description":"","extends":"","properties":{"code":{"type":"integer","format":"int32","description":"HTTP Status Code"},"url":{"type":"string","description":"URL resulting in this error message"},"message":{"type":"string","description":"summary description of the error"}}},"F21x7StatusTypeRestDto":{"id":"F21x7StatusTypeRestDto","description":"Readback status for the 21x7 radar","required":["radarTemperature","transmitHvStatus","plus32vStatus","plus12vStatus","minus12vStatus","plus5vStatus","magnetronHeaterStatus"],"extends":"","properties":{"radarTemperature":{"type":"number","format":"double","description":"temperature reported from the radar in degrees celsius"},"transmitHvStatus":{"type":"number","format":"double","description":"transmit high voltage status reported from the radar in volts"},"plus32vStatus":{"type":"number","format":"double","description":"+32 voltage status reported from the radar in volts"},"plus12vStatus":{"type":"number","format":"double","description":"+12 voltage status reported from the radar in volts"},"minus12vStatus":{"type":"number","format":"double","description":"-12 voltage status reported from the radar in volts"},"plus5vStatus":{"type":"number","format":"double","description":"+5 voltage status reported from the radar in volts"},"magnetronHeaterStatus":{"type":"number","format":"double","description":"magnetron heater status reported from the radar in volts"}}},"ResponseBodyExceptionInfo":{"id":"ResponseBodyExceptionInfo","description":"description not used ","extends":"","properties":{"error":{"$ref":"ErrorRestDto","description":"error details"}}},"FilterRestDto":{"id":"FilterRestDto","description":"","extends":"","properties":{"irControl":{"type":"string","description":"interference rejection control","enum":["Off","Low","Medium","High"]},"gainControl":{"type":"integer","format":"int32","description":"[0-100]: gain control"},"clutterMode":{"type":"string","description":"clutter mode (typically Manual, Semi-Auto, or Full-Auto)","enum":["Manual","Semi-Auto","Full-Auto","MTD","Transceiver"]},"seaControl":{"type":"integer","format":"int32","description":"[0-100]: control for sea clutter"},"rainControl":{"type":"integer","format":"int32","description":"[0-100]: control for rain clutter"}}},"RadarModeRestDto":{"id":"RadarModeRestDto","description":"","extends":"","properties":{"radarMode":{"type":"string","description":"pulse mode of the radar. Please note that this can NOT be set if the Radar is a slave RP","enum":["Auto","Manual","Short-1","Short-2","Medium-1","Medium-2","Long-1","Long-2","Short-3","Medium-3","Long-3"]}}},"RadarTermaBiteMRestDto":{"id":"RadarTermaBiteMRestDto","description":"","required":["type"],"extends":"","properties":{"type":{"type":"string","description":"Terma type of BITE data. 'UNKNOWN' is reported if it's an unrecognized value","enum":["FUNCTION","FLOAT","SHORT","USHORT","CHAR","UCHAR","TIME","BITE_MEASUREMENT","BITE_MODULE_STATUS","UNKNOWN"]},"id":{"type":"integer","format":"int32","description":"Terma id of the BITE data"},"float_value":{"type":"number","format":"float","description":"Terma value provided if data is of float type"},"value":{"type":"integer","format":"int32","description":"Terma value provided if data is of integer type"},"error_or_warn_value":{"type":"integer","format":"int32","description":"Terma value of an error or warning"},"terma_time":{"type":"string","description":"Terma provided timestamp when provided"},"rp_time":{"type":"string","description":"SSR's Radar Processor timestamp of when received the BITE data"},"description":{"type":"string","description":"SSR's Radar Processor generated description of the meaning of the type and id"}}},"GeoPosRestDto":{"id":"GeoPosRestDto","description":"Geophysical location","required":["latitude","longitude"],"extends":"","properties":{"latitude":{"type":"number","format":"double","description":"[-90 to +90]: Latitude of the object (Decimal Degrees, North Positive/South Negative)"},"longitude":{"type":"number","format":"double","description":"[-180 to +180]: Longitude of the object (Decimal Degrees, East Positive/West Negative)"},"altitude":{"type":"number","format":"double","description":"Height of the object above sea level (meters)"}}},"RadarRestDto":{"id":"RadarRestDto","description":"","required":["links","control","antennaRpm","warmupCountdown","prf","detail","isNotUpdating","radarFamily","pulseWidth","transmitFrequency"],"extends":"","properties":{"links":{"type":"array","description":"*method=GET*Provides link relations as URLs using the REST 'hateoas' convention (for REST delivered data).<br>&nbsp;&nbsp;&nbsp;&nbsp;The 'self' link references this rest object, including any specified query criteria","items":{"$ref":"Link"}},"control":{"$ref":"RadarControlRestDto","description":"control settings for the radar"},"antennaRpm":{"type":"number","format":"float","description":"measured RPM value of the radar"},"warmupCountdown":{"type":"integer","format":"int32","description":"time in seconds until the radar is warmed and in Standby Mode. A -1 indicates the countdown is not active"},"prf":{"type":"integer","format":"int32","description":"current PRF (Pulse Repetition Frequency) of the radar"},"id":{"type":"integer","format":"int32","description":"[1-64]: the resource identifier; the radar id (the Radar Processor unit number)"},"detail":{"$ref":"RadarDetailRestDto","description":"details of the radar"},"isNotUpdating":{"type":"boolean","description":"[true]: boolean representing if this resource is no longer being updated or seen in the system and will soon no longer be accessible from the API"},"radarFamily":{"type":"string","description":"type of radar (shown if it is in the set of given possible values)","enum":["Manta","SharpEyeS","SharpEyeX","Furuno","Terma","BME","Pahtfinder","GEM","Simrad"]},"pulseWidth":{"type":"integer","format":"int32","description":"pulse width of a pulsed magnetron radar in nanoseconds"},"transmitFrequency":{"type":"number","format":"double","description":"transmit frequency of a solid state radar in kHz"},"radarFullName":{"type":"string","description":"RP Station Name followed by the Radar Name as in 'RP Station X:Radar A'"},"position":{"$ref":"GeoPosRestDto","description":"Location of the Radar"}}},"RadarDetailRestDto":{"id":"RadarDetailRestDto","description":"Detail for the Radar","required":["links","rfFineTune","rfCoarseTune","orderedTuneVoltage","tuneIndicator","magnetronCurrent","micCurrent","mainBangSuppressLevel","mainBangSuppressTiming","isRtPowered","isAutotuned","isPerformanceMonitorActivated","isMotorPowered","isMotorTurningCommanded","isMotorTurning","isRtModulePowered","isMagnetronPowered","isTransmitTriggerActive","isSignalBearingGeneratorPowered","isAcProtectionPsActive","isLvPsPowered","isHvPsPowered","isLvPsActive","isHvPsActive","isAcProtectionPsPowered","f21x7Status","kelvinHughesRadarInfo"],"extends":"","properties":{"links":{"type":"array","description":"*method=GET*Provides link relations as URLs using the REST 'hateoas' convention (for REST delivered data).<br>&nbsp;&nbsp;&nbsp;&nbsp;The 'self' link references this rest object, including any specified query criteria","items":{"$ref":"Link"}},"id":{"type":"integer","format":"int32","description":"[1-64]: the resource identifier; the radar id (the Radar Processor unit number)"},"rfFineTune":{"type":"integer","format":"int32","description":"RF fine value used to generate the ordered voltage. Available with expand=detail"},"rfCoarseTune":{"type":"integer","format":"int32","description":"RF coarse value used to generate the ordered voltage. Available with expand=detail"},"orderedTuneVoltage":{"type":"number","format":"float","description":"ordered voltage sent to the radar which controls the tune of the radar's receiver. Available with expand=detail"},"tuneIndicator":{"type":"number","format":"float","description":"the RF Tune readback value, it indicates how well the receiver is tuned. A value <= 1.0 is badly tuned or there is something wrong with the radar system and <= 1.4 is poorly tuned, otherwise it is considered acceptable. Available with expand=detail"},"magnetronCurrent":{"type":"number","format":"float","description":"magnetron current value sensed by the radar. Not available for all Radars (e.g., not available for Terma Radars). Available with expand=detail"},"micCurrent":{"type":"number","format":"float","description":"MIC current value sensed by the radar. Available with expand=detail"},"mainBangSuppressLevel":{"type":"number","format":"float","description":"main bang suppression level sensed by the radar. Available with expand=detail"},"mainBangSuppressTiming":{"type":"number","format":"float","description":"main bang timing level sensed by the radar. Available with expand=detail"},"isRtPowered":{"type":"boolean","description":"is the RT powered"},"isAutotuned":{"type":"boolean","description":"is the radar being auto tuned as opposed to manually tuned. Available with expand=detail"},"isPerformanceMonitorActivated":{"type":"boolean","description":"is the performance monitor activated. Available with expand=detail"},"isMotorPowered":{"type":"boolean","description":"is power provided to the motor. Available with expand=detail"},"isMotorTurningCommanded":{"type":"boolean","description":"is motor commanded to turn. Available with expand=detail"},"isMotorTurning":{"type":"boolean","description":"is radar's readback status saying motor is turning. Available with expand=detail"},"isRtModulePowered":{"type":"boolean","description":"is there power to the RT module. Available with expand=detail"},"isMagnetronPowered":{"type":"boolean","description":"is magnetron power provided. Not available for all Radars (e.g., not available for Terma Radars). Available with expand=detail"},"isTransmitTriggerActive":{"type":"boolean","description":"is the transmit trigger active. Available with expand=detail"},"isSignalBearingGeneratorPowered":{"type":"boolean","description":"is the signal bearing generator powered. Available with expand=detail"},"isAcProtectionPsActive":{"type":"boolean","description":"is the AC protection power supply active. Available with expand=detail"},"isLvPsPowered":{"type":"boolean","description":"is the Low Voltage Power Supply powered. Available with expand=detail"},"isHvPsPowered":{"type":"boolean","description":"is the High Voltage Power Supply powered. Available with expand=detail"},"isLvPsActive":{"type":"boolean","description":"is the Low Voltage Power Supply active. Available with expand=detail"},"isHvPsActive":{"type":"boolean","description":"is the High Voltage Power Supply active. Available with expand=detail"},"isAcProtectionPsPowered":{"type":"boolean","description":"is the AC protection power supply powered. Available with expand=detail"},"f21x7Status":{"$ref":"F21x7StatusTypeRestDto","description":"status values if a f21x7 radar. Available with expand=detail"},"kelvinHughesRadarInfo":{"$ref":"KelvinHughesRadarInfoRestDto","description":"information for Kelvin Hughes family of radars. Available with expand=detail"}}},"RangeScaleRestDto":{"id":"RangeScaleRestDto","description":"","extends":"","properties":{"rangeScale":{"type":"integer","format":"int32","description":"[24 or 48]: range scale setting (applies only if Kelvin Hughes type of radar)"}}},"RadarControlRestDto":{"id":"RadarControlRestDto","description":"","required":["links","rpNum","radarMode"],"extends":"","properties":{"links":{"type":"array","description":"*method=GET*Provides link relations as URLs using the REST 'hateoas' convention (for REST delivered data).<br>&nbsp;&nbsp;&nbsp;&nbsp;The 'self' link references this rest object, including any specified query criteria","items":{"$ref":"Link"}},"isAdjunctRp":{"type":"boolean","description":"[false, true] is the Radar an 'Adjunct' RP (can only change a limited set of fields)"},"rpNum":{"type":"integer","format":"int32","description":"[1-64]: RP Number of the radar"},"isNotUpdating":{"type":"boolean","description":"[true]: boolean representing if this resource is no longer being updated or seen in the system and will soon no longer be accessible from the API"},"termaProfile":{"type":"integer","format":"int32","description":"[0-15]: Terma Profile setting for the radar. (Not shown if not a Terma Radar or if the profile is not set or if the SSR system does not know the profile)"},"gainControl":{"type":"integer","format":"int32","description":"[0-100]: gain control"},"seaControl":{"type":"integer","format":"int32","description":"[0-100]: control for sea clutter"},"rainControl":{"type":"integer","format":"int32","description":"[0-100]: control for rain clutter"},"controller":{"type":"string","description":"ip address of the Radar's primary controller"},"controllerName":{"type":"string","description":"name of the station which has control. If it is the 'MIS' station, then the loginId of the user is typically also shown"},"radarState":{"type":"string","description":"radar state for this radar","enum":["Warmup","Off","Standby","Radiate","Rotate","RotateRadiate","SafetyStandby","RadarControlFailure","Unknown"]},"radarMode":{"type":"string","description":"pulse mode of the radar","enum":["Auto","Manual","Short-1","Short-2","Medium-1","Medium-2","Long-1","Long-2","Short-3","Medium-3","Long-3"]},"rangeScale":{"type":"integer","format":"int32","description":"[24 or 48]: range scale setting (applies only if Kelvin Hughes type of radar)"},"irControl":{"type":"string","description":"interference rejection control","enum":["Off","Low","Medium","High"]},"clutterMode":{"type":"string","description":"clutter mode (typically Manual, Semi-Auto, or Full-Auto)","enum":["Manual","Semi-Auto","Full-Auto","MTD","Transceiver","Other"]}}},"KelvinHughesRadarInfoRestDto":{"id":"KelvinHughesRadarInfoRestDto","description":"Radar Info for Kelvin Hughes type Radars","required":["radarType","isDopplerSharpEye"],"extends":"","properties":{"radarType":{"type":"string","format":"byte","description":"type of radar within the family"},"isDopplerSharpEye":{"type":"boolean","description":"is Doppler SharpEye"}}},"RadarTermaBiteMsRestDto":{"id":"RadarTermaBiteMsRestDto","description":"BITE Measurements for a Terma Radar","required":["items","links"],"extends":"","properties":{"totalItems":{"type":"integer","format":"int64","description":"Total number of elements matching the query filter and not limited by page size"},"items":{"type":"array","description":"BITE (Built In Test Measurements) data","items":{"$ref":"RadarTermaBiteMRestDto"}},"links":{"type":"array","description":"*method=GET*Provides link relations as URLs using the REST 'hateoas' convention (for REST delivered data).<br>&nbsp;&nbsp;&nbsp;&nbsp;The 'self' link references this rest object, including any specified query criteria","items":{"$ref":"Link"}},"id":{"type":"integer","format":"int32","description":"[1-64]: the resource identifier; the radar id (the Radar Processor unit number)"}}},"TermaProfileRestDto":{"id":"TermaProfileRestDto","description":"","extends":"","properties":{"termaProfile":{"type":"integer","format":"int32","description":"[0-15]: Terma Profile setting for the radar. (Not shown if not a Terma Radar or if the profile is not set or if the SSR system does not know the profile)"}}},"Link":{"id":"Link","description":"","extends":"","properties":{"rel":{"type":"string"},"href":{"type":"string"},"templated":{"type":"boolean"}}},"Void":{"id":"Void","description":"","extends":"","properties":{}}}}